{"id":"1569565263","paper":{"title":{"text":"On codes for structured bursts"},"authors":[{"name":"L.A. Lastras-Monta˜no"},{"name":"M. Blaum"}],"abstr":{"text":"Abstract\u2014We introduce a technique for constructing codes for bursts of errors that have some known structure; for example bursts of length at most b and Hamming weight at most t. This technique is based on modifying existing codes for generic bursts by replacing a portion of their check matrix with a more efﬁcient one, in light of the additional constraints on the burst. We illustrate this procedure by modifying the Fire, Burton and Gilbert codes to address bursts with maximum Hamming weight, bursts with solid errors, or bursts with internal \u201cmini-bursts\u201d. We provide evidence that the redundancy of the codes we construct can be very good through examples, one of which is optimal within the class of cyclic codes."},"body":{"text":"In this article we study the problem of the design of error correcting codes for burst errors that have some known structure. One possibility is that a burst is known to be very sparse in errors when it happens - the ﬁrst example in Figure 1. Or alternately, the burst may have small mini-bursts inside but otherwise have few errors overall (the second example). Yet another possibility is that the burst is known to be solid, this is, a streak of uninterrupted errors with a bound on the maximum length of the streak.\nWe have detected a number of applications in which these type of properties might be relevant. For example, receivers employing Differential Feedback Equalization with 1 tap of feedback can cause solid burst errors. Codes for such errors are known, the most notable example being Shiva et. al. [1] who adapt generic cyclic codes for errors for such purposes (see also Wyner [2]). Nonetheless such codes are inefﬁcient when one can place a reasonable upper bound on the length of the solid burst, which is the case in the cited application. Bursts with few errors, even if there are \u201cmini-bursts\u201d inside of the bursts, can arise from multi-state channel models where there is an underlying physical mechanism that increases the propensity to have errors. In addition, in [3] Etzion and Yaakobi employ codes for bursts with few errors that can also be used as a construction block for codes for multidimensional bursts with similar characteristics.\nThe theory of burst error correction is arguably one of the oldest and still hardest problems in coding theory. No- table successes with practical implications include the early work by Fire [4] for a single binary bursts and of course the omnipresent Reed-Solomon codes, that provide practical solutions for the problem of correcting (potentially multiple) binary bursts by thinking of a binary burst as contained in a sequence of multibit symbols from a Galois Field. Nonetheless from the perspective of coding theory, these solutions are far\nfrom being optimal in the sense of redundancy for a given error correction capability, particularly for relatively small burst sizes. Signiﬁcant progress in identifying the properties of optimal codes for single burst errors has been made [5], [6].\nThe theory of algebraic codes for structured bursts is at best, in its very early stages. Our contribution is to provide a reasonably general construction technique that gives good results in some examples. Our main line of attack is to ask how one might modify an existing burst error correcting code to suit our needs. The goal is to reduce its required redundancy by leveraging the additional information given by the burst structure. Motivated by the Fire codes and the related Burton [7] code concept, we study how to modify cyclic codes whose generator polynomial can be written as\nfor some integer i and some polynomial p(x). Other codes that fall in this category are the Gilbert codes [8] and subsequent extensions [9], [10], [11], [12], [13].\nIt turns out that under proper conditions, it is possible to substitute the factor x i − 1 with a factor of lower degree when we restrict the class of burst errors one wants to correct. Through examples, we show that this technique can result in codes that are within 1 bit of a redundancy lower bound discussed later; in fact for one example we show that the redundancy of the example is optimal within the class of cyclic codes of a given length. The techniques for decoding these modiﬁed codes can be derived from available techniques for decoding the original parent code, further enhancing the attractiveness of our construction.\nWe start our discussion by giving the reader in Section II the gist of our idea. We provide mathematical preliminaries\nin Section III, followed by the main result in Section IV. We apply this result in Section V where we give examples of codes with very favorable -sometimes optimal- redundancy characteristics. Conclusions and future work are in Section VI.\nSuppose that we were given a full rank parity check matrix H and we were told that the associated code is good for correcting some class of errors. We notice that the class of errors has some property - e.g. bursty with sparse bursts - such that if e is an error vector within that class, we can always recover the syndrome He from ˆ He, and hence e itself due to the starting assumption. In here ˆ H is some matrix with fewer rows than H. Then if we employed a code with parity check matrix ˆ H instead, we could always correct the same class of errors, yet spend fewer redundant bits in doing that.\nIn this article we apply this idea to the case where the parity check matrix H with n columns can be written as:\nfor a square identity matrix I of size × . Partition e as e = [e 0 , · · · , e (n−1)/ ] with each e i being a vector of length\ne i . If for example, e has at most t errors then i e i also has at most t errors and thus we can substitute every instance of I with a parity check matrix M deﬁning a code of length\nand distance 2t + 1, and be able to always recover i e i . From the previous discussion, we thus conclude that we can use the more efﬁcient parity check matrix\na i x i . Conversely, if one deﬁnes a(x) to be a polynomial with degree at most n, whenever we refer to a we mean the n-length vector comprising the coefﬁcients of the polynomial a(x). We will often switch notation (a ↔ a(x)) without notice.\nA weight function w n is a mapping F n q → Z with the property that for any two a, b ∈ F n q , w n (a + b) ≤ w n (a) + w n (b) and if a = 0, then w n (a) > 0. A class of weight functions w = {w i } ∞ i=1 is a collection of weight functions for every possible vector length parameter. We will use the same notation for a weight function independently of whether the argument is a vector or a polynomial.\nSince we will be focusing on cyclic codes, we will assume that the w n -weight of a vector or polynomial remains invariant with cyclic shifts: for every j > 1, and v(x) with deg v(x) < n, w n (x j v(x) mod x n − 1) = w n (v(x)).\nWe say that a polynomial f (x) gives w n -weight non- increasing residues, if for every polynomial v(x) such that deg v(x) < n,\nThe class of Hamming weight functions deﬁnes the weight of v ∈ F n q as w H n (v) = |{i ∈ {0, · · · , n − 1} : v i = 0}|. It is easy to see that for every integer j, the polynomial x j − 1 gives w H n -weight non-increasing residues.\nFor another example of a weight function, consider the problem of counting the number of (generic) bursts of length at most b ≥ 1 in a vector (see [14]). A burst of length at most b is a polynomial x j e(x) with e 0 = 0 and deg e(x) < b. Deﬁne the set of cyclic burst covers as follows:\nThus each element of C b,n is a set of b (modulo n) consecutive integers. One can deﬁne the burst weight function as follows:\nwhere the minimization is over all W ⊂ C b,n such that ∀v j = 0, there exists a cyclic burst cover c ∈ W such that j ∈ c. The minimizing W is in general not unique. This burst weight function can be regarded as a count of the number of bursts of length at most b in v(x).\nLemma 1: If |n for positive integers , n, b, then the poly- nomial x − 1 gives w B n (·, b)-weight non-increasing residues.\nFor any weight function w n , we say that a cyclic code with generator g(x) and code length n has w n -minimum distance d if for every nonzero v(x) with deg v(x) < n, v(x) mod g(x) = 0 implies that w n (v(x)) ≥ d.\nWe say that a cyclic code with generator g(x) can correct the class of error patterns E n if for every a, b ∈ E n with a(x) = b(x), a(x) mod g(x) = b(x) mod g(x).\nFinally we have the following basic facts: 1) if a|c and b|c then lcm(a, b)|c.\n3) The polynomial x m − 1 divides x n − 1 if and only if m divides n.\n4) For any two polynomials p 0 (x), p 1 (x), if v(x) mod p 0 (x) = 0, then v(x) mod lcm(p 0 (x), p 1 (x)) = 0.\nTheorem 1: Let a class of weight functions w = {w j } ∞ j=1 be given. Assume that g(x) and are such that the n-length cyclic code generated by\nand assume that x − 1 gives w n -weight non-increasing residues. Let d(x) be a divisor of x − 1 generating a cyclic code of length with w -minimum distance at least 2T + 1; we assume that d(x) does not divide x i − 1 for i < . Then the cyclic code generated by\nProof. Let e 1 (x), e 2 (x) ∈ E n be such that v(x) ∆ = e 1 (x) − e 2 (x) = 0. Then because the class E n is correctable by (2), v(x) mod lcm(g(x), x − 1) = 0. At least one of the following must be true:\nbecause if two polynomials divide a third one, the least common multiple of the two polynomials must also divide the third one.\nIf the ﬁrst condition is true, then from basic fact 4 nec- essarily v(x) mod lcm(g(x), d(x)) = 0, and the theorem is proved. If the second statement is true, then w (v(x) mod x − 1) > 0 and since w n (v(x)) = w n (e 1 (x) − e 2 (x)) ≤ w n (e 1 (x)) + w n (e 2 (x)) ≤ 2T and x − 1 gives w n -weight non increasing residues,\nDeﬁne r(x) = v(x) mod x − 1. Since the code generated by d(x) has length and also has w -minimum distance at least 2T + 1, we have\nTaking the modulus with respect to d(x) and recalling that d(x) divides x − 1, we get\nFinally through a second application of basic fact 4 we obtain v(x) mod lcm(g(x), d(x)) = 0.\nIt remains to analyze the lengths of the codes. Let n 1 be the smallest positive integer such that lcm(g(x), x − 1)|(x n 1 − 1), and let n 2 be the smallest positive integer such that lcm(g(x), d(x))|(x n 2 − 1). It is obvious that lcm(g(x), d(x))|lcm(g(x), x − 1), and thus n 2 ≤ n 1 . By the theorem assumption, d(x) divides a polynomial of the form x i − 1 only if i ≥ \t since otherwise the code\u2019s length would be smaller. Therefore since d(x)|(x n 2 − 1), it is true that n 2 ≥ ; even more sharply, it must be true from basic fact 3 that n 2 = θ for some positive integer θ. This implies that x − 1|x n 2 − 1. This, together with the assumption that g(x)|x n 2 − 1, implies that lcm(g(x), x − 1)|x n 2 − 1 and therefore n 1 ≤ n 2 . We conclude that n 1 = n 2 .\nA. Codes for bursts with maximum Hamming weight based on the Fire construction\nThe Fire codes are single (generic) b-burst error correcting codes deﬁned by a generator polynomial of the form\nwhere p(x) is a primitive polynomial of degree m ≥ b that does not divide x 2b−1 − 1. The length of the code is lcm(2b − 1, q m − 1). We shall assume in this section that we are working with binary codes (q = 2).\nSuppose now that we wanted to correct one burst of length at most b containing at most t binary errors, for the same code length. With reference to Theorem 1, we seek a polynomial d(x)|(x 2b−1 − 1) generating a cyclic code of length 2b − 1 and that also has minimum Hamming distance at least 2t + 1. Once in possession of such polynomial, by Theorem 1 the code with generator polynomial lcm(d(x), p(x)) = d(x)p(x) would have the desired attributes. As for candidates for d(x), the class of BCH codes and close relatives immediately come to mind.\nFor illustrative purposes, consider the Fire code given by setting, in (3), b = 8, 16 and p(x) to be an irreducible polynomial of degree m = 9 and m = 16, respectively so that lcm(2b − 1, 2 m − 1) is as large as one would hope. We refer the reader to Table I. The column under b indicates the burst length. The column under n is the code\u2019s length. The parameter t refers to the number of errors inside of the burst. The redundancy column denoted by r, indicates the number of check bits in the code, which is the sum of the number of bits devoted to the binary error correcting code d(x) and the number of bits devoted to the primitive polynomial p(x) employed in the original Fire construction. For the binary error correcting code, we employ BCH codes with a generator polynomial of the form Π 2t i=1 (x − ω i+δ ) with ω a primitive element in the appropriate ﬁeld and δ = 0, with the exception of the case b = 8 and t = 4 where we found it advantageous to set δ = 10. It is easy to see that the expression\nis a lower bound on the number of bits one needs. This bound is included in the table for comparison purposes under the \u201clower bound\u201d column. As one can see, the codes that we have constructed can have very good redundancy characteristics for the case t = 2 where in both examples we are within 1 bit of the lower bound. For reference purposes,we have also included the parameters of the Fire code from which the codes were constructed; this can be found shaded in gray. To sharpen our\nlower bound, we have performed an exhaustive search over the space of cyclic codes of degree less than the degree we give and with the same length. Such a search was conducted for the case b = 8 only as the code length in the case b = 16 is too large; the results of this search are presented under the column \u201ccyclic lower bound\u201d. From this, one can see that within the class of cyclic codes, the example for b = 8 and t = 3 in our table is exactly optimal, and the case b = 8 and t = 4 is within 1 bit of optimality.\nWe provide now a comparison to a code construction of Etzion and Yaakobi [3] found as part of the more general goal of coding for multidimensional bursts. In this work, the authors employ a certain type of code for a burst with limited weight as an intermediate construction block for building codes for multidimensional bursts.\nThis construction is based on the notion of a burst locator code which in essence allows you to ﬁnd the start of a burst error whose error magnitude is known up to a cyclic permutation, regarding the burst error magnitude as a binary vector of length b that has its ﬁrst bit set to 1. To learn the burst error magnitude up to a cyclic permutation, the authors employ a short binary code of length b that can correct t binary errors by concatenating the corresponding parity check matrix horizontally as many times as needed to cover the vector length n.\nThe basic requirement in the Etzion and Yaakobi construc- tion is the existence of the burst locator code. The theory of such codes is based on the theory of of optimum cyclic burst-correcting codes of Abdel-Ghaffar [5], [6]. Whenever such optimum cyclic codes exist, Abdel-Ghaffar shows that the corresponding generator polynomial can be written as the product e(x)p(x) where e(x) satisﬁes a technical condition named b-polynomial, and p(x) is an irreducible polynomial that generates the desired burst locator code. In general, these polynomials are not easy to ﬁnd (since they are tied to the existence of optimum cyclic burst codes, which are themselves rare) and one may have to search in the space of polynomials p(x) with very large degree. Therefore this construction for limited weight burst error correcting codes serves primarily as a theoretical device for proving the existence of other mathematical objects.\nIn the following, we will assume that binary BCH codes are being employed as a component of either the construction we propose or for the Etzion-Yaakobi construction. Disregarding the possibility of the non-existence of burst locator codes with a generator with a desired degree, the Etzion-Yaakobi codes for bursts of length b (for b odd) and weight at most t have length 2 m − 1 and redundancy at most\nThe codes induced by Theorem 1 have length lcm(2 m − 1, 2b − 1) and redundancy at most\nwhich is a reasonable upper bound for small values of t. One way to (very crudely) compare these codes is to note that\nthe upper bound (6) has roughly t more bits of redundancy, which could be spent in increasing the degree m of the burst locator code, with the effect of increasing their length by a factor of about 2 t . Assuming that 2 m − 1 and 2b − 1 in the construction induced from Fire are relatively prime, one sees that whenever 2 t is small compared to 2b − 1 the codes we offer will remain superior than those of Etzion-Yaakobi and viceversa. This approximate analysis is reasonable in light of the earlier discussion showing that for t = 3 we have an example of a code produced using our construction that is optimum within the class of cyclic codes.\nIn this subsection we discuss the problem of designing codes for a single burst of errors that could contain \u201csmall bursts\u201d inside (see second example in Figure 1). As before, we shall do so by substituting the term x 2b−1 − 1 in the generator polynomial for a Fire code (Equation 3) with a suitable divisor d(x) of x 2b−1 − 1. This can be done in light of Lemma 1, which guarantees that we can use the burst weight function also when constructing codes.\nWe shall focus on the problem of correcting a burst of length b containing at most 2 minibursts of length b m each. For our examples, we will focus on b = 8, 16 as before and b m = 2, 3, 4. For the case b = 8 (resp b = 16) we will need codes of length 15 (resp. 31) that can correct up to 2 bursts of length at most b m each. Good choices for such codes (to be used as the divisor d(x)) have been derived using computer search techniques. Table II gives the characteristics of the codes for structured bursts derived this way, including the sample divisors d(x) we found.\nWe now turn our attention to the problem of correcting a single phased burst (see later for an explanation) by by modifying the Burton code, which is closely related to the Fire code. If p(x) is a polynomial of degree b and exponent e, and p(x) is relatively prime with x b − 1, then the Burton code is generated by\nThis code has length n = eb, and can correct any burst of length b or less which is conﬁned to positions x ib , x ib+1 , · · · , x ib+b−1 , for 0 ≤ i < e.\nSuppose as in subsection V-A before that we were interested in correcting a single burst of errors where the burst has\nHamming weight at most t. Choose p(x) to be a primitive polynomial. Suppose that b = 2 w − 1 for some w > 0, and let d(x) denote the generator of a cyclic code with minimum distance 2t + 1, with the property that d(x) is coprime with p(x). Then d(x)p(x) is the generator of a code with the desired property. If d(x) is chosen to be a BCH code, then its redundancy is at most t log 2 (b + 1) and then the redundancy of the code for limited weight bursts is at most t log 2 (b + 1) + b. By comparing with (6) (where we would set m = b), we can see that the main effect of the restriction to phased bursts is to improve redundancy by approximately t bits. It is worth noting that it is not immediately clear how to specialize the results of [3] to the case of phased bursts.\nD. Codes induced from the Gilbert construction The Gilbert codes are given by\ng(x) = lcm(x n 1 − 1, x n 2 − 1) \t (7) where n 1 and n 2 are coprime and n = n 1 n 2 is the length of the code. We include a discussion on this code because this basic structure, together with extensions that include more than 2 terms in the product (7) has been the subject of many research articles [9], [10], [11], [12], [13], [15]. Suppose that n 1 and n 2 , in addition to being coprime, are of the form n 1 = 2 j 1 − 1, n 2 = 2 j 2 − 1 for some j 1 = j 2 . This gives us great ﬂexibility in choosing divisors d 1 (x) and d 2 (x) of x n 1 −1 and x n 2 − 1, respectively, since the factorization of x n i − 1 in its splitting ﬁeld contains every term of the form x − ω where ω is any nonzero element of the ﬁeld GF (2 j i ).\nNow let d 1 (x)|x n 1 −1 and d 2 (x)|x n 2 −1 generate codes with Hamming distance t + 1. Through two sequential applications of Theorem 1, we conclude that\nlcm(d 1 (x), d 2 (x)) \t (8) generates a code of length n 1 n 2 that can correct a single burst with weight t or less.\nFor example if n 1 = 7, n 2 = 15 we know from Table I of [15] that the burst error correcting ability of the corresponding Gilbert code is b = 6. Such code would have length 105. Suppose we want to correct bursts of length at most 6 with weight 2. By choosing the divisors d 1 (x) and d 2 (x) to be BCH codes of distance 5 each, we obtain from (7) a code with redundancy 14 that achieves this goal, in comparison with the redundancy of the originating Gilbert code which is 21.\nIf one is interested in correcting solid bursts of errors with a maximum length constraint, one can combine the ideas of the discussion on codes for bursts with a maximum weight constraint with the idea of Shiva et. al. [1]), who employ cyclic linear codes for binary random errors together with the trick of adding a received codeword with a 1-bit shifted version of itself. The result is still a codeword due to the cyclic and linear properties, but the solid error is transformed into 2 binary errors. The performance of the resulting codes for structured bursts is intimately related to that of the earlier discussion, and thus omitted.\nIn this article we gave a code modiﬁcation technique that allows us to reduce the redundancy of existing codes whenever the target error class has additional constraints one wants to take advantage of. We applied this to the problem of correcting bursts with limited Hamming weight, bursts with \u201cmini-bursts\u201d inside and bursts with solid errors by modifying the Fire, Burton and Gilbert codes. We showed signiﬁcant promise in this direction as the redundancy of some of our examples is either within 1 bit of optimality or strictly optimal within the class of cyclic codes.\nFuture work should examine the gap between the codes proposed and the optimum cyclic codes. We will also demon- strate how to build a class of codes related to the Fire construction but which relaxes the constraint on the degree of the polynomial p(x) so that it can be lower, thereby producing codes with lower redundancy when a large length is not necessary.\nThe authors acknowledge discussions with M. Franceschini which led to the realization that solid bursts were a common pattern in channels with DFE receivers and discussions with Eitan Yaakobi regarding his work on multidimensional error bursts."},"refs":[{"authors":[{"name":"S. G. S. Shiv"},{"name":"C. L. Sheng"}],"title":{"text":"Multiple solid burst-error-correcting binary codes"}},{"authors":[{"name":"A. D. Wyner"}],"title":{"text":"A note on a class of binary cyclic codes which correct solid-burst errors"}},{"authors":[{"name":"T. Etzio"},{"name":"E. Yaakobi"}],"title":{"text":"Error-correction of multidimensional bursts"}},{"authors":[{"name":"P. Fire"}],"title":{"text":"A class of multiple-error correcting binary codes for non- independent errors"}},{"authors":[{"name":"S. Abdel-Ghaffar"}],"title":{"text":"K"}},{"authors":[{"name":"S. Abdel-Ghaffa"},{"name":"J. McEliec"},{"name":"M. Odlyzk"},{"name":"A. van Tilborg"}],"title":{"text":"K"}},{"authors":[{"name":"O. Burton"}],"title":{"text":"H"}},{"authors":[{"name":"E. N. Gilbert"}],"title":{"text":"A problem in binary encoding"}},{"authors":[{"name":"O. Burto"},{"name":"J. Weldon"}],"title":{"text":"H"}},{"authors":[{"name":"P. Neumann"}],"title":{"text":"A note on Gilbert burst-correcting codes"}},{"authors":[{"name":"R. Bah"},{"name":"T. Chien"}],"title":{"text":"L"}},{"authors":[{"name":"J. Overveld"}],"title":{"text":"W"}},{"authors":[{"name":"L. R. Bah"},{"name":"R. T. Chien"}],"title":{"text":"Single- and multiple-burst-correcting properties of a class of cyclic product codes"}},{"authors":[{"name":"S. Wainber"},{"name":"J. K. Wolf"}],"title":{"text":"Burst decoding of binary block codes on q-ary output channels"}},{"authors":[{"name":"W. Zhan"},{"name":"K. Wolf"}],"title":{"text":"J"}}]},"file":{"jsonClass":"File","file":"/home/arnfred/Code/trailhead/resources/isit2012/1569565263.pdf"},"links":[{"id":"1569566567","weight":3},{"id":"1569564843","weight":2},{"id":"1569566527","weight":4},{"id":"1569566485","weight":2},{"id":"1569565383","weight":2},{"id":"1569565883","weight":4},{"id":"1569564889","weight":3},{"id":"1569566725","weight":2},{"id":"1569565663","weight":2},{"id":"1569565377","weight":2},{"id":"1569566385","weight":3},{"id":"1569564635","weight":3},{"id":"1569565867","weight":2},{"id":"1569566799","weight":3},{"id":"1569565067","weight":2},{"id":"1569559665","weight":3},{"id":"1569561021","weight":2},{"id":"1569566815","weight":2},{"id":"1569566875","weight":10},{"id":"1569564605","weight":3},{"id":"1569559617","weight":3},{"id":"1569566433","weight":2},{"id":"1569566321","weight":3},{"id":"1569566605","weight":2},{"id":"1569566683","weight":6},{"id":"1569566855","weight":2},{"id":"1569560629","weight":2},{"id":"1569566869","weight":4},{"id":"1569566091","weight":5},{"id":"1569559259","weight":4},{"id":"1569566697","weight":3},{"id":"1569566597","weight":2},{"id":"1569565551","weight":2},{"id":"1569565711","weight":4},{"id":"1569566943","weight":4},{"id":"1569565091","weight":10},{"id":"1569566591","weight":2},{"id":"1569566571","weight":5},{"id":"1569552245","weight":4},{"id":"1569559967","weight":7},{"id":"1569567045","weight":2},{"id":"1569565227","weight":2},{"id":"1569564481","weight":10},{"id":"1569560833","weight":6},{"id":"1569566415","weight":5},{"id":"1569564805","weight":8},{"id":"1569567005","weight":3},{"id":"1569566081","weight":4},{"id":"1569565355","weight":2},{"id":"1569564469","weight":3},{"id":"1569565931","weight":2},{"id":"1569566647","weight":2},{"id":"1569551535","weight":5},{"id":"1569564897","weight":6},{"id":"1569565775","weight":10},{"id":"1569566871","weight":12},{"id":"1569565461","weight":5},{"id":"1569564731","weight":2},{"id":"1569566207","weight":10},{"id":"1569564227","weight":2},{"id":"1569558325","weight":3},{"id":"1569565837","weight":2},{"id":"1569566671","weight":3},{"id":"1569564233","weight":2},{"id":"1569566459","weight":2},{"id":"1569567535","weight":5},{"id":"1569563411","weight":3},{"id":"1569560427","weight":56},{"id":"1569564849","weight":4},{"id":"1569559541","weight":2},{"id":"1569566363","weight":2},{"id":"1569565459","weight":3},{"id":"1569565123","weight":2},{"id":"1569566941","weight":2},{"id":"1569566033","weight":2},{"id":"1569566739","weight":4},{"id":"1569555811","weight":3},{"id":"1569558459","weight":2},{"id":"1569565609","weight":3},{"id":"1569565291","weight":3},{"id":"1569564203","weight":2},{"id":"1569566821","weight":2},{"id":"1569556713","weight":2},{"id":"1569562685","weight":4},{"id":"1569566467","weight":2},{"id":"1569565771","weight":2},{"id":"1569566157","weight":2},{"id":"1569566903","weight":2},{"id":"1569566999","weight":3},{"id":"1569565859","weight":3},{"id":"1569565809","weight":2},{"id":"1569566843","weight":2},{"id":"1569566579","weight":4},{"id":"1569558483","weight":2},{"id":"1569566563","weight":6},{"id":"1569566089","weight":2},{"id":"1569559221","weight":2},{"id":"1569556091","weight":2},{"id":"1569565347","weight":3},{"id":"1569566925","weight":8},{"id":"1569564387","weight":3},{"id":"1569565455","weight":2},{"id":"1569566497","weight":4},{"id":"1569566795","weight":2},{"id":"1569566963","weight":3},{"id":"1569561679","weight":4},{"id":"1569564989","weight":2},{"id":"1569566787","weight":4},{"id":"1569566717","weight":4},{"id":"1569566015","weight":2},{"id":"1569565897","weight":3},{"id":"1569551763","weight":2},{"id":"1569566895","weight":2},{"id":"1569565709","weight":4},{"id":"1569566749","weight":2},{"id":"1569566269","weight":9},{"id":"1569564189","weight":4},{"id":"1569564195","weight":2},{"id":"1569566985","weight":2},{"id":"1569564613","weight":3},{"id":"1569567009","weight":6},{"id":"1569566865","weight":4},{"id":"1569558785","weight":5},{"id":"1569566095","weight":2},{"id":"1569566193","weight":3},{"id":"1569566343","weight":5},{"id":"1569564311","weight":3},{"id":"1569565803","weight":3},{"id":"1569565785","weight":2},{"id":"1569566167","weight":2},{"id":"1569566679","weight":5},{"id":"1569566575","weight":6},{"id":"1569563981","weight":3},{"id":"1569561085","weight":2},{"id":"1569566617","weight":2},{"id":"1569559565","weight":4},{"id":"1569566905","weight":4},{"id":"1569566311","weight":2},{"id":"1569563307","weight":5},{"id":"1569566063","weight":2},{"id":"1569558681","weight":2},{"id":"1569566759","weight":3},{"id":"1569566149","weight":3},{"id":"1569566217","weight":11},{"id":"1569566657","weight":5},{"id":"1569558859","weight":16},{"id":"1569565199","weight":2},{"id":"1569565213","weight":2},{"id":"1569566511","weight":2},{"id":"1569566719","weight":2},{"id":"1569566991","weight":2},{"id":"1569565841","weight":2},{"id":"1569566369","weight":6},{"id":"1569567665","weight":4},{"id":"1569561143","weight":6},{"id":"1569566581","weight":3},{"id":"1569565833","weight":2},{"id":"1569564611","weight":2},{"id":"1569565535","weight":2},{"id":"1569562867","weight":2},{"id":"1569566395","weight":3},{"id":"1569565667","weight":3},{"id":"1569566845","weight":2},{"id":"1569566325","weight":3},{"id":"1569566423","weight":2},{"id":"1569564795","weight":2},{"id":"1569567015","weight":3},{"id":"1569559805","weight":5},{"id":"1569566437","weight":3},{"id":"1569558901","weight":4},{"id":"1569565735","weight":2},{"id":"1569559111","weight":3},{"id":"1569566687","weight":2},{"id":"1569553537","weight":3},{"id":"1569565427","weight":2},{"id":"1569566403","weight":2},{"id":"1569565839","weight":4},{"id":"1569565915","weight":3},{"id":"1569552251","weight":5},{"id":"1569566139","weight":2},{"id":"1569567051","weight":2},{"id":"1569566885","weight":3},{"id":"1569564209","weight":2},{"id":"1569566513","weight":2},{"id":"1569566425","weight":3},{"id":"1569554971","weight":2},{"id":"1569565501","weight":2},{"id":"1569566445","weight":2},{"id":"1569566791","weight":3},{"id":"1569565559","weight":2},{"id":"1569566371","weight":2},{"id":"1569565655","weight":3},{"id":"1569566909","weight":3},{"id":"1569566127","weight":2},{"id":"1569558985","weight":3},{"id":"1569563763","weight":4},{"id":"1569565087","weight":2},{"id":"1569566473","weight":5},{"id":"1569564857","weight":5},{"id":"1569564333","weight":2},{"id":"1569566913","weight":4},{"id":"1569566809","weight":3},{"id":"1569566629","weight":3},{"id":"1569565033","weight":7},{"id":"1569566447","weight":2},{"id":"1569565817","weight":18},{"id":"1569565847","weight":9},{"id":"1569564353","weight":2},{"id":"1569563897","weight":3},{"id":"1569557083","weight":4},{"id":"1569565887","weight":2},{"id":"1569565929","weight":3},{"id":"1569566141","weight":5},{"id":"1569563231","weight":3},{"id":"1569565633","weight":2},{"id":"1569565279","weight":4},{"id":"1569555879","weight":2},{"id":"1569566115","weight":2},{"id":"1569565219","weight":3},{"id":"1569558509","weight":2},{"id":"1569554759","weight":2},{"id":"1569565595","weight":6},{"id":"1569565185","weight":2},{"id":"1569564985","weight":6},{"id":"1569566223","weight":2},{"id":"1569558401","weight":6},{"id":"1569566553","weight":2},{"id":"1569564973","weight":8},{"id":"1569565469","weight":2},{"id":"1569564969","weight":2},{"id":"1569565029","weight":3},{"id":"1569566505","weight":2},{"id":"1569565393","weight":2},{"id":"1569565933","weight":9},{"id":"1569562207","weight":2},{"id":"1569565705","weight":4},{"id":"1569566191","weight":3},{"id":"1569567033","weight":4},{"id":"1569565527","weight":3},{"id":"1569566603","weight":2},{"id":"1569567029","weight":2},{"id":"1569566159","weight":7},{"id":"1569566695","weight":2},{"id":"1569566051","weight":2},{"id":"1569561379","weight":2},{"id":"1569561123","weight":13},{"id":"1569565467","weight":2},{"id":"1569566655","weight":2},{"id":"1569566673","weight":2},{"id":"1569565311","weight":2},{"id":"1569566233","weight":2},{"id":"1569566893","weight":2},{"id":"1569560997","weight":3},{"id":"1569563845","weight":3},{"id":"1569566407","weight":2},{"id":"1569560349","weight":2},{"id":"1569566501","weight":2},{"id":"1569565741","weight":6},{"id":"1569566275","weight":6},{"id":"1569566481","weight":2},{"id":"1569565545","weight":2},{"id":"1569566857","weight":2},{"id":"1569565961","weight":2},{"id":"1569566245","weight":3},{"id":"1569560503","weight":5},{"id":"1569565463","weight":2},{"id":"1569564339","weight":5},{"id":"1569566219","weight":2},{"id":"1569565439","weight":4},{"id":"1569566229","weight":3},{"id":"1569562551","weight":2},{"id":"1569563395","weight":2},{"id":"1569566901","weight":2},{"id":"1569551347","weight":2},{"id":"1569565415","weight":2},{"id":"1569561623","weight":2},{"id":"1569564485","weight":4},{"id":"1569565155","weight":3},{"id":"1569566631","weight":14},{"id":"1569565571","weight":4},{"id":"1569565885","weight":2},{"id":"1569566177","weight":4},{"id":"1569565493","weight":5},{"id":"1569557633","weight":6},{"id":"1569564411","weight":2},{"id":"1569566805","weight":5},{"id":"1569559199","weight":2},{"id":"1569566293","weight":3},{"id":"1569565665","weight":4},{"id":"1569566831","weight":6},{"id":"1569565549","weight":2},{"id":"1569565523","weight":12},{"id":"1569565611","weight":2},{"id":"1569557715","weight":7},{"id":"1569564175","weight":3},{"id":"1569566983","weight":3},{"id":"1569566779","weight":2},{"id":"1569566097","weight":5},{"id":"1569566479","weight":2},{"id":"1569556361","weight":6},{"id":"1569566431","weight":6},{"id":"1569565397","weight":2},{"id":"1569566873","weight":2},{"id":"1569565765","weight":3},{"id":"1569565925","weight":5},{"id":"1569565435","weight":3},{"id":"1569557275","weight":2},{"id":"1569565215","weight":2},{"id":"1569565385","weight":8},{"id":"1569565575","weight":2},{"id":"1569565919","weight":3},{"id":"1569565181","weight":2},{"id":"1569566711","weight":6},{"id":"1569565241","weight":3},{"id":"1569566927","weight":3},{"id":"1569565661","weight":4},{"id":"1569565865","weight":2},{"id":"1569566887","weight":3},{"id":"1569565273","weight":3},{"id":"1569566267","weight":2},{"id":"1569564131","weight":2},{"id":"1569552037","weight":2},{"id":"1569564919","weight":5},{"id":"1569565511","weight":2},{"id":"1569566737","weight":7},{"id":"1569566429","weight":2},{"id":"1569566917","weight":3},{"id":"1569565353","weight":4},{"id":"1569564683","weight":2},{"id":"1569564305","weight":4},{"id":"1569564283","weight":6},{"id":"1569564291","weight":3},{"id":"1569566691","weight":9},{"id":"1569565421","weight":3},{"id":"1569566547","weight":2},{"id":"1569566651","weight":2},{"id":"1569565177","weight":3},{"id":"1569566823","weight":2},{"id":"1569566595","weight":2},{"id":"1569566677","weight":3},{"id":"1569566137","weight":6},{"id":"1569566529","weight":6},{"id":"1569565375","weight":2},{"id":"1569566715","weight":2},{"id":"1569565237","weight":4},{"id":"1569565041","weight":3},{"id":"1569564703","weight":2},{"id":"1569565541","weight":6},{"id":"1569566813","weight":2},{"id":"1569566771","weight":2},{"id":"1569564649","weight":2},{"id":"1569564201","weight":4},{"id":"1569562277","weight":4},{"id":"1569566641","weight":3},{"id":"1569565425","weight":4},{"id":"1569564437","weight":6},{"id":"1569566533","weight":3},{"id":"1569551905","weight":2},{"id":"1569564861","weight":4},{"id":"1569566487","weight":4},{"id":"1569565529","weight":4},{"id":"1569556759","weight":2},{"id":"1569566619","weight":2},{"id":"1569561185","weight":2},{"id":"1569566075","weight":4},{"id":"1569566397","weight":5},{"id":"1569565233","weight":2},{"id":"1569563721","weight":3},{"id":"1569565593","weight":2},{"id":"1569560235","weight":2},{"id":"1569565729","weight":3},{"id":"1569566389","weight":2},{"id":"1569566435","weight":2},{"id":"1569567483","weight":2},{"id":"1569566911","weight":2},{"id":"1569564923","weight":3},{"id":"1569566299","weight":3},{"id":"1569564281","weight":2},{"id":"1569565039","weight":4},{"id":"1569565769","weight":5},{"id":"1569565805","weight":3},{"id":"1569561713","weight":3},{"id":"1569563919","weight":3},{"id":"1569566577","weight":3},{"id":"1569557851","weight":2},{"id":"1569567691","weight":2},{"id":"1569559919","weight":3},{"id":"1569565861","weight":4},{"id":"1569566147","weight":7},{"id":"1569565537","weight":3},{"id":"1569559523","weight":2},{"id":"1569566057","weight":2},{"id":"1569562367","weight":2},{"id":"1569560785","weight":7},{"id":"1569565561","weight":2},{"id":"1569565631","weight":5},{"id":"1569560213","weight":3},{"id":"1569555891","weight":2},{"id":"1569565997","weight":4},{"id":"1569563425","weight":3},{"id":"1569565035","weight":7},{"id":"1569559597","weight":2},{"id":"1569564961","weight":4},{"id":"1569559251","weight":3},{"id":"1569567013","weight":2},{"id":"1569566583","weight":2},{"id":"1569561861","weight":3},{"id":"1569565337","weight":2},{"id":"1569564253","weight":2},{"id":"1569565737","weight":3},{"id":"1569560459","weight":2},{"id":"1569564463","weight":2},{"id":"1569565853","weight":4},{"id":"1569550425","weight":2},{"id":"1569566273","weight":8},{"id":"1569564123","weight":5},{"id":"1569565889","weight":5},{"id":"1569566635","weight":2},{"id":"1569566611","weight":4},{"id":"1569551539","weight":5},{"id":"1569565165","weight":2},{"id":"1569565565","weight":5},{"id":"1569565635","weight":3},{"id":"1569561397","weight":3},{"id":"1569565731","weight":3},{"id":"1569566797","weight":11},{"id":"1569566413","weight":4},{"id":"1569565707","weight":3},{"id":"1569565113","weight":5},{"id":"1569566375","weight":3},{"id":"1569565143","weight":2},{"id":"1569564257","weight":3},{"id":"1569565583","weight":12},{"id":"1569566555","weight":2},{"id":"1569566973","weight":4},{"id":"1569561579","weight":2},{"id":"1569565031","weight":4},{"id":"1569564755","weight":3},{"id":"1569551541","weight":3},{"id":"1569566839","weight":2},{"id":"1569551751","weight":2},{"id":"1569565139","weight":3},{"id":"1569566663","weight":3},{"id":"1569565579","weight":2},{"id":"1569566067","weight":4},{"id":"1569566825","weight":3},{"id":"1569566241","weight":2},{"id":"1569563007","weight":2},{"id":"1569566113","weight":3},{"id":"1569566443","weight":2},{"id":"1569566727","weight":5},{"id":"1569565315","weight":32},{"id":"1569565515","weight":2},{"id":"1569560581","weight":5},{"id":"1569559233","weight":3}],"meta":{"jsonClass":"HashMap$HashTrieMap","sessionid":"S2.T6.3","endtime":"12:30","authors":"Luis A Lastras-Montaño, Mario Blaum","date":"1341231000000","papertitle":"On Codes for Structured Bursts","starttime":"12:10","session":"S2.T6: Constrained Coding","room":"Kresge Rehearsal A (033)","paperid":"1569565263"},"cluster":{"jsonClass":"HashMap$HashTrieMap","spectral6":"1","spectral43":"28","spectral28":"7","spectral32":"28","spectral14":"5","spectral20":"12","spectral9":"0","spectral25":"16","spectral42":"36","spectral3":"1","spectral47":"32","spectral17":"7","louvain":"350","spectral36":"31","spectral39":"3","spectral10":"5","spectral15":"4","spectral33":"13","spectral5":"2","spectral21":"17","spectral44":"23","spectral26":"0","spectral40":"31","spectral8":"7","spectral11":"2","spectral4":"3","spectral37":"7","spectral48":"9","spectral22":"1","spectral23":"17","spectral12":"10","spectral50":"9","spectral19":"16","spectral34":"28","spectral45":"3","spectral7":"3","spectral49":"44","spectral38":"12","spectral24":"23","spectral13":"0","spectral31":"25","spectral29":"27","spectral35":"21","spectral30":"1","spectral41":"16","spectral27":"10","spectral18":"3","spectral46":"27","spectral2":"0","spectral16":"7"}}
