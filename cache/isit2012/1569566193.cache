{"id":"1569566193","paper":{"title":{"text":"Efﬁcient Signature Scheme for Network Coding"},"authors":[{"name":"Ely Porat ∗"},{"name":"Erez Waisbard ∗"}],"abstr":{"text":"Abstract\u2014Network coding helps maximize the network throughput. However, such schemes are also vulnerable to pollution attacks in which malicious forwarders inject polluted messages into the system. Traditional cryptographic solution, such as digital signatures, are not suited for network coding, in which nodes do not forward the original packets, but rather linear combinations of the data they received. We describe secure scheme that uses batch techniques and selective veriﬁcation to efﬁciently verify the integrity of the received packets. We show that for real peer-to-peer networks, our scheme is much more efﬁcient than previously suggested schemes.\nIndex Terms\u2014Network coding; Digital signatures; Homomor- phic signatures; Group testing; Peer-to-peer; File sharing"},"body":{"text":"The volume of content that is distributed over the internet is growing every day. The simple client-server based approach ﬁnds it difﬁcult to cope with the growing number of clients and volume of data and there is a growing usage of peer-to-peer technologies.\nA peer-to-peer network uses distributed architecture instead of relying on a single server. The beneﬁt of this approach is in the splitting of the workload between many different servers instead of overloading a single server. BitTorrent [5] is an example for a popular peer-to-peer network that is used to distribute large ﬁles over the Internet. It works by splitting the large ﬁle into smaller blocks and sending these blocks to peers. Any peer that downloaded a block also becomes a server to this block and so the number of available sources increases as more peers download it. However, as efﬁcient as BitTorrent may be, it may happen that the scheduling scheme would result in having some blocks available only from a few peers with slow connection and as a result the completion of downloading of the entire ﬁle is delayed for many users. Using network coding as an efﬁcient way to cope with this problem was suggested in [2], [8].\nNetwork coding [3] was introduced as an efﬁcient alterna- tive to traditional routing that maximizes network throughput [10], [13], [14]. Network coding improves the spreading of different blocks in a peer-to-peer network by sending a random linear combination of the blocks instead of sending a single block. In such a scheme each peer continues to act as a server for blocks it has obtained and sends out random linear combinations of the blocks it has received. After receiving enough packets a peer would be able to reconstruct the ﬁle from the system of linear equations. Note that even before a peer is able to extract the different blocks, it can already participate in the distributed effort to spread the content by\ncreating a new random linear combination of the data that it already received. Using this method every peer simultaneously sends and receives partial information about many block, thus solving the problem of rare blocks.\nOne can see that network coding improves the network throughput and works well as long as everyone follows the protocol. Unfortunately, this is not always the case in real systems. Real systems need to cope with malicious users who try to pollute the network. In traditional content distribution schemes, this problem is easily solved by verifying the in- tegrity of the packets using cryptographic tools such as hash functions and digital signatures. This is also the case in peer- to-peer networks such as BitTorrent where each block of data has a hash value stored in the .torrent ﬁle. Each packet that is received by the peer is veriﬁed by computing its hash value and comparing it to the value that appears in the .torrent ﬁle. The security of a cryptographic hash function ensures that it is infeasible to ﬁnd two different blocks that hash to the same value. The integrity check takes place for each block separably. This allows early detection of corruption without having to wait for the entire ﬁle to download and prevents the further spread of corrupted packets.\nSecuring network coding schemes is more difﬁcult than securing traditional peer-to-peer schemes. We ﬁrst note that the problem of polluting the network is more acute for network coding schemes as a single corrupted block can corrupt the entire ﬁle and prevent its reconstruction. Furthermore, such a pollution quickly propagates throughout the network. Thus, it is crucial to be able to verify the integrity of incoming packets. Alas, the effective traditional cryptographic techniques that secure peer-to-peer networks such as BitTorrent no longer work. Incoming packets in a network coding scheme are random linear combinations of the source blocks and can take many different values. Since one cannot tell in advance which combination would be used by the forwarding peers, it is impossible to compute the appropriate hash values in advance.\nSome attempts have been made to solve this problem. These attempts largely focus on settings that are different than the one needed for large distribution ﬁle sharing over the internet.\nTrying to solve the problem from an information theoretic angle, [6], [17] suggested a way to protect the network against a passive adversary. Clearly this does not provide the required protection from an adversary in our setting.\nOthers considered byzantine adversaries [10], [9], [11] and provide security against a known threshold, but since adver- saries can freely join public peer-to-peer network, they can easily outnumber the byzantine bound.\nA different approach is to use homomorphic MACs [1]. Loosely speaking, Homomorphic MACs allows nodes that do not know the secret key to create a valid tag that can be authenticated by the end recipient. This allows the end recipient to discard polluted packets, but does not prevent their distribution throughout the network. This solution also assumes the existence of a shared secret between a sender and a receiver, which is not applicable to many settings. In particular, most of the popular peer-to-peer networks work in a mode in which one user shares a copy of his ﬁles with many users which he does not know in advance.\nHomomorphic signatures [18] allow intermediate nodes to create a signature on a linear combination of the incoming messages [18] or on any polynomial function of them [4]. Homomorphic signatures start by the source signing the differ- ent blocks. Each peer gets a linear combination of the blocks along with an homomorphic signature of it. The homomorphic property enables creating a new signature from the previously received signatures. These signatures are limited to signing only linear combinations of previously received packets, which is exactly what we need for network coding. This allows intermediate nodes to verify the integrity of the messages they receive and ﬁts well with the adversarial model for peer- to-peer ﬁle sharing. However the known schemes are either inefﬁcient [4] or known to be broken [18].\nAnother approach by [12] was to use the space orthogonal to the message space as a mean to verify that incoming messages are from a valid message space. This method is indeed more efﬁcient, however, as was noted by [16] the need to securely distribute the NULL message space before one can efﬁciently use this scheme puts us in a chicken and egg situation.\nZhao, et.al. [19] introduced an interesting scheme in which a source can \u2018sign\u2019 the message in a way that allows interme- diate nodes to efﬁciently verify the integrity of the messages without requiring a prior shared secret. Their scheme works by splitting the message M into vector blocks (v 1 , . . . , v n ) and looking at the vector space that they span V = Sp(v 1 , . . . , v n ). Then they ﬁnd a random vector u which is orthogonal to the message space and \u2018sign\u2019 it using a standard signature scheme. The signed vector is sent as part of the public information (the equivalent of the .torrent ﬁle in the BitTorrent). Using the linearity property u is guaranteed to be orthogonal to every linear combination of the message blocks. Upon receiving an incoming message, the receiving peer veriﬁes that the incoming message is orthogonal to u as a proof for it being a valid combination of the original blocks. Note that there are many vectors that are orthogonal to u, but are not in V . Thus, it is important to be able to verify that a vector is indeed orthogonal to u, but without explicitly publishing u. Using the hardness assumption of the discrete logarithm problem,\nthey publish a commitment to u that allows checking if a given vector is orthogonal to u without using u directly. We elaborate on the way it is done when we provide details of our construction in section III. The number of modular operations that are required in this scheme is proportional to the size of the vectors. If one considers a typical ﬁle sharing scenario over the internet, then a back of the envelope computation indicates that the veriﬁcation time of an incoming packet is longer than the communication time to receive it. Our construction aims to improve the efﬁciency of the veriﬁcation step by signiﬁcantly reducing the number of modular operations per packet.\nWe present a method for boosting the performance of homomorphic signatures. In this paper we present our con- struction by applying it to a speciﬁc scheme that was presented in [19]. Our method signiﬁcantly reduces the number of modular exponentiations required per packet by introducing two techniques: Selective veriﬁcation and Batch veriﬁcation.\nWe start with a large ﬁle F that we wish to share and divide it into n blocks, denoted ¯ v 1 , . . . , ¯ v n . Each block is viewed as an element in the m−dimentional vector space F m p , where p and q are large primes such that p is a divisor of q − 1.\nEach vector is then assigned with a preﬁx and these aug- mented vectors v 1 , . . . , v n are given by\nwhere the ﬁrst n elements are zero except that the ith one is 1, and ¯ v i ∈ F m p is the i-th vector block from the ﬁle.\nLet us denote the subspace that is spanned by these vectors as V . Namely:\nThe source starts distributing the data by computing a random linear combinations of the augmented vectors and sending them to peers. After collecting enough of these vectors the receiving peer would have n linearly independent blocks and would be able to reconstruct the original ﬁle. Peers actively participate in the distribution of the ﬁle (even before they are able to reconstruct the original ﬁle) by sending new random linear combinations of the blocks they obtain.\nIn order to protect against pollution attacks, we use an orthogonal vector to V as an indication that the incoming blocks are indeed from V . Noting that the augmented vectors span a subspace V of F n+m p , there exist many vectors which are orthogonal to V . Let us denote one of these vectors by u = (u 1 , . . . , u m+n ). As u ⊥ V , it is also orthogonal to any linear combination of the augmented vectors. Thus, checking that an incoming block is orthogonal to u would serve as an indication that it belongs to V . Naturally, the peers would need to know u before they can verify the authenticity of the incoming blocks. The vector u also needs to be authenticated\nand this can be done by having u digitally signed by s (using any standard digital signature scheme).\nHowever, if an attacker knows u then he can easily ﬁnd v / ∈ V for which < u, v >= 0. Thus we hide u by utilizing the hardness assumption of the discrete logarithm problem. Instead of using u directly, s picks a large prime q, such that p is a divisor of q − 1 and a generator g of a group of order p in F ∗ q . Then s picks a secret set of random elements in F ∗ p : {α i } i=1,...,m+n and publishes {h i = g α i } i=1,...,m+n after digitally signing it (again, using any standard digital signature scheme). Then s ﬁnds u 1 , . . . , u m+n orthogonal to all vectors in V and computes a vector x = u 1 α\n, which he also signs.\nThe ﬁrst idea that we introduce is the selective veriﬁcation. Loosely speaking, we are going to verify only part of the w i , but still get a high level of assurance while checking a signiﬁcantly smaller number of bits. In order to ensure that one cannot avoid this selective check by corrupting a small number of bits, we are using error correcting codes that expand the incoming messages in a way that any number of corrupted bits is reﬂected in many of the expanded bits.\nThe use of the error correcting code allows us to break the resulting expansion into blocks, each of length (1 + )n, and to do the veriﬁcation in one or more of these blocks. The idea is that for the right values of , checking over one or more blocks is much faster than verifying the full length of w. We use an efﬁcient construction of the code to ensure locality in the computation. Namely in order to verify a single block, we do not need to compute the full expansion of all the blocks. A key observation is that the probability of an attacker to pass this veriﬁcation using a corrupted vector is small as the number of possible \u201dlegal\u201d blocks is much smaller than .\nWe stress that although we use error correcting codes in the veriﬁcation step, there is no change in the length of the messages that traverse the network. Thus, with the exception of the initial signature (that is part of the metadata) the communication complexity remains the same as in [19].\n1) The Error correcting code: We start by deﬁning the error correcting code that we use. While a known code like the Reed-Solomon code may be used with a small tweak, we have chosen to explicitly deﬁne a new code that allows to illustrate the main ideas of our scheme in the simplest way.\nOur random code is a function h : F m+n p \t → F (1+ )n p \t , deﬁned as follows:\nWhere each of the A i s is random 2 (m + n) × (1 + )n matrix over F ∗ p .\n2) The Algorithms: We now describe the three key compo- nents of our scheme. We start with a description of setting up the public parameters and in particular the veriﬁcation vector. We then specify the sending algorithm and veriﬁcation algorithm. We note that there is no change in the sending algorithm when compared to [19]. The change is in the veriﬁcation step.\n\u2022 Computing orthogonal vector: Instead of ﬁnding a vector u that is orthogonal to every v i in the original ﬁle, we ﬁrst extend the matrix using error correcting code (ECC).\nWe look at the resulting matrix E and break it into blocks of size (1 + )n:\nWe then ﬁnd vectors u 1 , . . . , u , where u j is orthogonal to Sp(B j ). For every vector u j we also pick a secret set of random elements in F ∗ p : {α j i } i=1,...,(1+ )n , compute\nand publish {x j i } and {h j i } along with their digital signa- tures.\n\u2022 Sending a message: Sending a message is done as usual in network coding schemes by picking at random a i ∈ F ∗ p and sending v =\n\u2022 Message veriﬁcation: Upon receiving a vector w, the receiver picks a random j ∈ {1, . . . , } as the index of the block to verify and applies the ECC locally (i.e. computes only wA j ).\nThe speed up we gain by this method is proportional to the size of the block that we check compared to the size of the original vector, i.e. roughly (1+ )n m+n . In terms of security, it was proven in [19] that under the hardness assumption of solving the discrete logarithm problem, the scheme is secure if we were to check all blocks. We are going to check only portion of the blocks, but we are going to do so after applying the ECC. Intuitively, the ECC would ensure that even a few corrupted bits in the input vector would result in plenty of corrupted blocks. In section IV we show why even under a worse case scenario we can bound the error probability of our scheme with δ of our choice.\nAnother performance enhancement comes from performing batch veriﬁcation . The batch veriﬁcation technique is inde- pendent of the selective veriﬁcation technique. It can be used\nin conjunction with selective veriﬁcation or independently (e.g. it can be applied directly to the scheme of [19]). Batch veriﬁcation works by gathering a few incoming vectors before performing the veriﬁcation. Only once enough vectors are gathered, we check all of them in single veriﬁcation operation. The way we batch the vectors together is done as follows: Let w 1 , . . . , w k be the incoming vectors. We pick random r 1 , . . . , r k and compute w = r 1 w 1 + . . . + r k w k . Clearly, if w is a linear combination of vectors that are orthogonal to u, then w would also be orthogonal to u and it is enough to verify that w is orthogonal to u. If some of the vectors are not orthogonal to u, then with high probability w will not be orthogonal to u.\nSince veriﬁcation only occurs once every few packets, the incoming vectors w 1 , . . . , w k should be stored and marked as unveriﬁed until they pass veriﬁcation. This is important in cases where veriﬁcation fails and we wish to be able to identify which of the batched vectors are the corrupted ones (and perhaps also identify their sender).\nAs the modular operations are far more expensive than computing a linear combination of the incoming vectors, if we batch j vectors, our veriﬁcation time would be j times faster.\nThis certainly helps in terms of saving on veriﬁcation operations, but it also introduces a potential delay. If each node would need to wait for the arrival of t messages before it can forward them, then we are introducing a potential bottleneck.\nIn order to prevent this bottleneck we propose a randomized forwarding scheme that would forward packets even before they are checked, but with a lower probability. Before diving into the details, we use an example to illustrate our point. Assume that 10% of the incoming packets are polluted and assume that a forwarding probability of a non veriﬁed packet is 10%. This means that an unveriﬁed malicious packet would be forwarded with probability of 1%. The probability further forwarding corrupted packets quickly drops. In order to make this enhancement more robust, we suggest not to use a ﬁxed probability, but rather start with a conservative forwarding policy that gives little to no chance of forwarding a packet from an unfamiliar source. Only after a period of time, in which no corrupted packets received from this source, the probability of forwarding unveriﬁed packets should increase.\nThe two techniques introduced above can work in conjunc- tion. It can be readily seen that the overall performance boost is the product of the boost provided be each individual technique. We now make a note on how to combine the two techniques in a way that constantly increases the level of assurance. The naive way of combining both techniques is to batch k vectors each time, then perform a selective veriﬁcation on their linear combination and later to repeat the process with a different group of incoming vectors. Since selective veriﬁcation may err, a better approach is to add previously veriﬁed vectors to the batch. For example, if we batch k vectors at a time, then initially we would do a selective veriﬁcation on the linear\ncombination of the ﬁrst k vectors. After we get an additional k vectors we would batch all of the 2k vectors using fresh r 1 , . . . , r 2k before running selective veriﬁcation on their linear combination. This way we double check the ﬁrst k vectors (on different locations), reducing the chance that selective veriﬁcation fails to spot corrupted vectors.\nIn this section we prove the security of our construction. It was proven in [19] that ﬁnding a vector w / ∈ V for which\nh x i w i i \t = 1 is as hard as the discrete log problem. What remains to show is that our selective veriﬁcation does not allow the spreading of polluted ﬁle.\nWe take a group testing [15] approach to analyzing the security of our scheme. Using the ECC we deﬁned in III-B we apply h to all the possible vectors in Sp(V ). Let us denote the number of vectors in Sp(V ) by k, i.e. k = p n .\nGiven any input vector y / ∈ {x 1 , x 2 , . . . , x k }, we ask what is the probability that the j−th element in h(y) (denoted h(y)[j]) equals the j−th element in one of the previous x i s. Summing over all the x i s (using the union bound) we get that\nSince A j is random and since x i = y, the event in which (x i − y)A j = ¯ 0 occurs with probability\nThe probability that δ elements in h(y) appear in h(x i ) is bounded by δ ( 1 k ) δ\nBy taking the union bound over all possible values of y (which is bounded by p m+n ) we get that the probability for existence of a \u201dbad\u201d y is bounded by p m+n δ ( 1 k ) δ\nIn order to give a sense of security for practical parameters, lets assume that we want to bound 3 this probability by 2 −40 . In this case we get that\nSince log p δ and log p e are constants smaller than 1 (assum- ing a typical p to be about 2 1024 ), we get that\nTherefore, in order to have an error smaller than δ we would need to use > 41+m+n δ n .\nWe now consider the size of the orthogonal vector that achieves the above security. If we take for example δ = 1 10 and we wish to use blocks of size 2n then in order to get the security assurance for = 1 we would require our orthogonal vector to be of size 21(m + n). If we allow ourselves bigger blocks of size 3n, then we take = 2 , then we can see that it is sufﬁcient to stretch our orthogonal vector to the length of 16(m + n).\nThe different tradeoffs between and the stretch can be viewed in the graph below.\nIt was mentioned both in [19] and in [16] that the public key cannot be used for too many ﬁles as it would allow to collect enough equations to compute u. Thus a different public key needs to be associated with every new ﬁle. Since this information can be part of a .torrent ﬁle the only affect is that it adds a little overhead to the original data that is being transferred.\nWe now analyze the performance gains of our scheme and compare it to [19]. For this analysis we use common parameters from the Bittorrent peer-to-peer network.\nThe ﬁle size that we are going to share is 1GB. We are assuming a modulus q of 1024 bits 4 and we get that the packet size is m = 4M B (i.e. 4096*8 values from F ∗ p and there are n = 256 vectors in our matrix).\nIn the original scheme we had m + n modular exponenti- ations, which are at least logq ∗ (m + n) = 1024(m + n) = 33816576 modular multiplications.\nIn our method, let us take = 1. We only have (1 + )n modular exponentiations, i.e. 2 · 256 = 512 modular ex- ponentiations, which are at least 512 ∗ 1024 = 524288 modular multiplications. In addition we have our ECC, which takes (m + n)(1 + )n modular multiplications assuming the expansion matrix is full. However, if we take a sparse matrix with only 10 elements in each row 5 , then we get that there are only 10(m + n) = 330240 modular multiplication. So the total number of modular multiplication in our scheme is about 854528, which makes our scheme about 40 times faster than [19] with only using the selective check method. Further performance gain can be achieved by using batch veriﬁcation. If we batch in groups of ﬁve, then we would get that our scheme is about 5 ∗ 40 = 200 faster than [19]."},"refs":[{"authors":[{"name":"S. Agrawa"},{"name":"D. Boneh"}],"title":{"text":"Homomorphic MACs: MAC-Based In- tegrity for Network Coding"}},{"authors":[{"name":"S. Acedansk"},{"name":"S. De"},{"name":"M. Medar"},{"name":"R. Koette"}],"title":{"text":"How good is random linear coding based distributed network storage?"}},{"authors":[{"name":"R. Ahlswed"},{"name":"N. Ca"},{"name":"S. L"},{"name":"R. Yeung"}],"title":{"text":"In Network information ﬂow"}},{"authors":[{"name":"D. Bone"},{"name":"D. M Freeman"}],"title":{"text":"Homomorphic Signatures for Polynomial Functions"}},{"authors":[],"title":{"text":"BitTorrent ﬁle sharing protocol"}},{"authors":[{"name":"N. Ca"},{"name":"R. Yeung"}],"title":{"text":"Network coding and error correction"}},{"authors":[{"name":"R. Gennar"},{"name":"J. Kat"},{"name":"H. Krawczy"},{"name":"T. Rabin"}],"title":{"text":"Secure Network Coding over the Integers"}},{"authors":[{"name":"C. Gkantsidi"},{"name":"P. Rodrigue"}],"title":{"text":"Network coding for large scale content distribution, in Proc"}},{"authors":[{"name":"T. H"},{"name":"B. Leon"},{"name":"R. Koette"},{"name":"M. Medard"}],"title":{"text":"Byzantine Modiﬁcation Detection in Multicast Networks using Randomized Network Coding"}},{"authors":[{"name":"T. H"},{"name":"M. Medar"},{"name":"M. Effro"},{"name":"D. Karge"}],"title":{"text":"The beneﬁts of coding over routing in a randomized setting, in Proc"}},{"authors":[{"name":"S. Jagg"},{"name":"M. Langber"},{"name":"S. Katt"},{"name":"T. H"},{"name":"D. Katab"},{"name":"M. Medard Resilient network coding in the presence of Byzantine adversaries"}],"title":{"text":"In Proc"}},{"authors":[{"name":"E. Kehd"},{"name":"B. L"}],"title":{"text":"Null Keys: Limiting Malicious Attacks Via Null Space Properties of Network Coding"}},{"authors":[{"name":"Z. L"},{"name":"B. L"}],"title":{"text":"Network coding: the case of multiple unicast ses- sions,in Proc"}},{"authors":[{"name":"D. S. Lu"},{"name":"M. Medar"},{"name":"R. Koette"}],"title":{"text":"Network coding for efﬁcient wireless unicast, in Proc"}},{"authors":[{"name":"E. Pora"},{"name":"A. Rothschil"}],"title":{"text":"Explicit Non-adaptive Combinatorial Group Testing Schemes\u201d"}},{"authors":[{"name":"Y. Wan"}],"title":{"text":"Insecure \u201dProvable Secure Network Coding\u201d"}},{"authors":[{"name":"R. Yeun"},{"name":"N. Cai"}],"title":{"text":"Network Error Correction, In Basic Concepts and Upper Bounds"}},{"authors":[{"name":"Z. Y"},{"name":"T. We"},{"name":"B. Ramkuma"},{"name":"Y. Guan"}],"title":{"text":"An Efﬁcient Signa- turebased Scheme for Securing Network Coding against Pollution Attacks"}},{"authors":[{"name":"F. Zha"},{"name":"T. Kalke"},{"name":"M. Medar"},{"name":"K. Han"}],"title":{"text":"Signatures for Content Distribution with Network Coding"}}]},"file":{"jsonClass":"File","file":"/home/arnfred/Code/trailhead/resources/isit2012/1569566193.pdf"},"links":[{"id":"1569566567","weight":3},{"id":"1569564843","weight":4},{"id":"1569566381","weight":2},{"id":"1569566527","weight":2},{"id":"1569566485","weight":7},{"id":"1569565383","weight":2},{"id":"1569565883","weight":5},{"id":"1569564889","weight":5},{"id":"1569566725","weight":10},{"id":"1569565663","weight":3},{"id":"1569565377","weight":3},{"id":"1569566385","weight":5},{"id":"1569564635","weight":4},{"id":"1569565867","weight":4},{"id":"1569566799","weight":3},{"id":"1569565067","weight":4},{"id":"1569559665","weight":3},{"id":"1569561021","weight":2},{"id":"1569564669","weight":8},{"id":"1569565691","weight":16},{"id":"1569566815","weight":3},{"id":"1569566875","weight":4},{"id":"1569564605","weight":2},{"id":"1569559617","weight":4},{"id":"1569566981","weight":3},{"id":"1569566321","weight":3},{"id":"1569566605","weight":2},{"id":"1569565489","weight":3},{"id":"1569566683","weight":4},{"id":"1569566855","weight":3},{"id":"1569560629","weight":2},{"id":"1569566869","weight":5},{"id":"1569565097","weight":4},{"id":"1569566227","weight":4},{"id":"1569566091","weight":4},{"id":"1569559259","weight":11},{"id":"1569566697","weight":5},{"id":"1569566597","weight":7},{"id":"1569565551","weight":3},{"id":"1569565711","weight":3},{"id":"1569566761","weight":3},{"id":"1569566943","weight":5},{"id":"1569565091","weight":5},{"id":"1569566591","weight":4},{"id":"1569566571","weight":4},{"id":"1569552245","weight":3},{"id":"1569565607","weight":10},{"id":"1569565495","weight":9},{"id":"1569559967","weight":4},{"id":"1569567045","weight":9},{"id":"1569565227","weight":4},{"id":"1569564481","weight":4},{"id":"1569560833","weight":3},{"id":"1569566415","weight":6},{"id":"1569564805","weight":6},{"id":"1569567005","weight":6},{"id":"1569566469","weight":2},{"id":"1569566081","weight":7},{"id":"1569565613","weight":11},{"id":"1569565355","weight":3},{"id":"1569564469","weight":3},{"id":"1569565931","weight":6},{"id":"1569566373","weight":4},{"id":"1569566647","weight":3},{"id":"1569551535","weight":5},{"id":"1569566765","weight":2},{"id":"1569564897","weight":2},{"id":"1569565775","weight":3},{"id":"1569565547","weight":3},{"id":"1569566871","weight":5},{"id":"1569565461","weight":5},{"id":"1569564245","weight":2},{"id":"1569564731","weight":3},{"id":"1569565171","weight":3},{"id":"1569566207","weight":11},{"id":"1569564227","weight":2},{"id":"1569558325","weight":6},{"id":"1569565837","weight":5},{"id":"1569566671","weight":3},{"id":"1569566303","weight":2},{"id":"1569566119","weight":2},{"id":"1569564233","weight":4},{"id":"1569566459","weight":4},{"id":"1569567535","weight":24},{"id":"1569563411","weight":5},{"id":"1569560427","weight":2},{"id":"1569564401","weight":2},{"id":"1569564849","weight":6},{"id":"1569559541","weight":4},{"id":"1569565317","weight":2},{"id":"1569566363","weight":2},{"id":"1569566319","weight":3},{"id":"1569565123","weight":3},{"id":"1569566941","weight":5},{"id":"1569566033","weight":4},{"id":"1569566739","weight":2},{"id":"1569555811","weight":8},{"id":"1569558459","weight":4},{"id":"1569565609","weight":5},{"id":"1569565291","weight":3},{"id":"1569564203","weight":7},{"id":"1569566821","weight":3},{"id":"1569556713","weight":5},{"id":"1569562685","weight":2},{"id":"1569566467","weight":4},{"id":"1569566157","weight":4},{"id":"1569566903","weight":4},{"id":"1569566999","weight":2},{"id":"1569565859","weight":20},{"id":"1569565809","weight":11},{"id":"1569566843","weight":7},{"id":"1569566579","weight":2},{"id":"1569558483","weight":3},{"id":"1569566563","weight":4},{"id":"1569566089","weight":4},{"id":"1569566173","weight":3},{"id":"1569559221","weight":5},{"id":"1569556091","weight":3},{"id":"1569565347","weight":7},{"id":"1569566925","weight":4},{"id":"1569564387","weight":13},{"id":"1569565455","weight":5},{"id":"1569566497","weight":12},{"id":"1569566795","weight":13},{"id":"1569566963","weight":8},{"id":"1569561679","weight":6},{"id":"1569566709","weight":4},{"id":"1569564989","weight":3},{"id":"1569566015","weight":5},{"id":"1569566523","weight":2},{"id":"1569565897","weight":6},{"id":"1569551763","weight":5},{"id":"1569565953","weight":3},{"id":"1569566895","weight":8},{"id":"1569566889","weight":5},{"id":"1569566749","weight":3},{"id":"1569566269","weight":3},{"id":"1569564189","weight":5},{"id":"1569564195","weight":2},{"id":"1569561513","weight":2},{"id":"1569566985","weight":3},{"id":"1569564613","weight":3},{"id":"1569565369","weight":4},{"id":"1569567009","weight":6},{"id":"1569566865","weight":3},{"id":"1569565321","weight":4},{"id":"1569558785","weight":2},{"id":"1569564647","weight":9},{"id":"1569566095","weight":2},{"id":"1569564271","weight":2},{"id":"1569564337","weight":3},{"id":"1569565907","weight":2},{"id":"1569566343","weight":2},{"id":"1569564311","weight":2},{"id":"1569565803","weight":3},{"id":"1569565785","weight":5},{"id":"1569566239","weight":6},{"id":"1569566167","weight":2},{"id":"1569566679","weight":5},{"id":"1569565989","weight":9},{"id":"1569566575","weight":8},{"id":"1569563981","weight":5},{"id":"1569561085","weight":3},{"id":"1569566419","weight":2},{"id":"1569566617","weight":2},{"id":"1569559565","weight":6},{"id":"1569566905","weight":6},{"id":"1569566753","weight":2},{"id":"1569563307","weight":5},{"id":"1569566063","weight":7},{"id":"1569558681","weight":2},{"id":"1569566759","weight":5},{"id":"1569565589","weight":3},{"id":"1569559195","weight":3},{"id":"1569566149","weight":6},{"id":"1569559995","weight":5},{"id":"1569566657","weight":5},{"id":"1569558859","weight":6},{"id":"1569565199","weight":4},{"id":"1569565213","weight":2},{"id":"1569565365","weight":2},{"id":"1569566643","weight":3},{"id":"1569566511","weight":5},{"id":"1569566719","weight":5},{"id":"1569566991","weight":2},{"id":"1569565841","weight":15},{"id":"1569566975","weight":2},{"id":"1569566369","weight":4},{"id":"1569566531","weight":5},{"id":"1569567665","weight":5},{"id":"1569561143","weight":4},{"id":"1569566581","weight":3},{"id":"1569565833","weight":4},{"id":"1569566489","weight":3},{"id":"1569564611","weight":5},{"id":"1569565535","weight":6},{"id":"1569562867","weight":9},{"id":"1569566395","weight":2},{"id":"1569565667","weight":4},{"id":"1569561795","weight":6},{"id":"1569566845","weight":2},{"id":"1569566325","weight":7},{"id":"1569566423","weight":4},{"id":"1569565257","weight":2},{"id":"1569564795","weight":4},{"id":"1569567015","weight":4},{"id":"1569559805","weight":3},{"id":"1569566437","weight":3},{"id":"1569566811","weight":3},{"id":"1569566851","weight":2},{"id":"1569558901","weight":2},{"id":"1569565735","weight":4},{"id":"1569553909","weight":2},{"id":"1569559111","weight":4},{"id":"1569566687","weight":2},{"id":"1569562285","weight":8},{"id":"1569564881","weight":2},{"id":"1569553537","weight":4},{"id":"1569565427","weight":6},{"id":"1569566403","weight":4},{"id":"1569565915","weight":2},{"id":"1569552251","weight":4},{"id":"1569566139","weight":5},{"id":"1569553519","weight":4},{"id":"1569567051","weight":5},{"id":"1569566885","weight":5},{"id":"1569564441","weight":2},{"id":"1569566231","weight":4},{"id":"1569564209","weight":2},{"id":"1569566513","weight":3},{"id":"1569554881","weight":5},{"id":"1569554971","weight":3},{"id":"1569565501","weight":3},{"id":"1569566899","weight":2},{"id":"1569566445","weight":4},{"id":"1569566209","weight":5},{"id":"1569566649","weight":12},{"id":"1569566791","weight":2},{"id":"1569565559","weight":4},{"id":"1569566371","weight":3},{"id":"1569565655","weight":6},{"id":"1569566909","weight":4},{"id":"1569566127","weight":4},{"id":"1569565151","weight":2},{"id":"1569558985","weight":4},{"id":"1569563763","weight":3},{"id":"1569565087","weight":3},{"id":"1569566473","weight":11},{"id":"1569564857","weight":5},{"id":"1569564333","weight":4},{"id":"1569566913","weight":9},{"id":"1569566809","weight":4},{"id":"1569566629","weight":3},{"id":"1569566257","weight":5},{"id":"1569565033","weight":10},{"id":"1569566447","weight":4},{"id":"1569566357","weight":3},{"id":"1569565817","weight":2},{"id":"1569565847","weight":6},{"id":"1569564353","weight":2},{"id":"1569563897","weight":3},{"id":"1569557083","weight":2},{"id":"1569565887","weight":5},{"id":"1569565929","weight":2},{"id":"1569566141","weight":4},{"id":"1569553591","weight":2},{"id":"1569565055","weight":3},{"id":"1569563231","weight":2},{"id":"1569565633","weight":8},{"id":"1569566661","weight":9},{"id":"1569565279","weight":8},{"id":"1569555879","weight":5},{"id":"1569566115","weight":4},{"id":"1569565219","weight":7},{"id":"1569558509","weight":3},{"id":"1569554759","weight":2},{"id":"1569564851","weight":2},{"id":"1569566003","weight":3},{"id":"1569565595","weight":2},{"id":"1569565185","weight":13},{"id":"1569566773","weight":3},{"id":"1569566037","weight":7},{"id":"1569566223","weight":2},{"id":"1569558401","weight":2},{"id":"1569566553","weight":4},{"id":"1569564973","weight":2},{"id":"1569564969","weight":6},{"id":"1569566593","weight":2},{"id":"1569565029","weight":6},{"id":"1569565357","weight":2},{"id":"1569561245","weight":2},{"id":"1569566505","weight":3},{"id":"1569565393","weight":3},{"id":"1569565933","weight":7},{"id":"1569562207","weight":4},{"id":"1569565705","weight":3},{"id":"1569566191","weight":6},{"id":"1569567033","weight":5},{"id":"1569565527","weight":5},{"id":"1569566853","weight":3},{"id":"1569566603","weight":8},{"id":"1569567029","weight":2},{"id":"1569565363","weight":3},{"id":"1569566159","weight":4},{"id":"1569566695","weight":5},{"id":"1569566051","weight":5},{"id":"1569561379","weight":3},{"id":"1569565909","weight":3},{"id":"1569561123","weight":4},{"id":"1569566655","weight":2},{"id":"1569566673","weight":3},{"id":"1569567235","weight":2},{"id":"1569565441","weight":6},{"id":"1569565739","weight":2},{"id":"1569565311","weight":5},{"id":"1569566233","weight":2},{"id":"1569566667","weight":4},{"id":"1569566297","weight":3},{"id":"1569566893","weight":5},{"id":"1569566317","weight":5},{"id":"1569564097","weight":2},{"id":"1569560997","weight":10},{"id":"1569563845","weight":4},{"id":"1569566407","weight":4},{"id":"1569560349","weight":4},{"id":"1569566501","weight":9},{"id":"1569565741","weight":6},{"id":"1569566275","weight":3},{"id":"1569566481","weight":13},{"id":"1569565545","weight":5},{"id":"1569566857","weight":10},{"id":"1569565961","weight":7},{"id":"1569566387","weight":3},{"id":"1569566245","weight":3},{"id":"1569560503","weight":4},{"id":"1569565463","weight":3},{"id":"1569566219","weight":5},{"id":"1569565439","weight":2},{"id":"1569566229","weight":6},{"id":"1569566949","weight":3},{"id":"1569566133","weight":3},{"id":"1569562551","weight":2},{"id":"1569563395","weight":4},{"id":"1569566901","weight":2},{"id":"1569551347","weight":3},{"id":"1569565415","weight":2},{"id":"1569555367","weight":2},{"id":"1569561623","weight":2},{"id":"1569566383","weight":4},{"id":"1569564485","weight":3},{"id":"1569565155","weight":2},{"id":"1569566631","weight":5},{"id":"1569565571","weight":6},{"id":"1569565885","weight":3},{"id":"1569566177","weight":4},{"id":"1569565493","weight":2},{"id":"1569557633","weight":2},{"id":"1569564411","weight":7},{"id":"1569566805","weight":3},{"id":"1569566293","weight":7},{"id":"1569565665","weight":3},{"id":"1569566831","weight":9},{"id":"1569565549","weight":3},{"id":"1569565523","weight":3},{"id":"1569565611","weight":4},{"id":"1569557715","weight":3},{"id":"1569564175","weight":3},{"id":"1569566983","weight":7},{"id":"1569566779","weight":9},{"id":"1569566097","weight":4},{"id":"1569566479","weight":6},{"id":"1569556361","weight":4},{"id":"1569566431","weight":4},{"id":"1569565397","weight":3},{"id":"1569566873","weight":4},{"id":"1569565765","weight":4},{"id":"1569565925","weight":3},{"id":"1569565435","weight":2},{"id":"1569557275","weight":3},{"id":"1569565263","weight":3},{"id":"1569566129","weight":2},{"id":"1569566261","weight":3},{"id":"1569565215","weight":2},{"id":"1569565385","weight":3},{"id":"1569565575","weight":2},{"id":"1569565919","weight":8},{"id":"1569565181","weight":4},{"id":"1569566711","weight":7},{"id":"1569565241","weight":4},{"id":"1569566927","weight":5},{"id":"1569565661","weight":3},{"id":"1569565865","weight":3},{"id":"1569566887","weight":13},{"id":"1569565273","weight":4},{"id":"1569566267","weight":2},{"id":"1569564131","weight":3},{"id":"1569552037","weight":4},{"id":"1569564919","weight":3},{"id":"1569565511","weight":4},{"id":"1569566737","weight":6},{"id":"1569566429","weight":10},{"id":"1569561221","weight":3},{"id":"1569566917","weight":7},{"id":"1569566035","weight":10},{"id":"1569566253","weight":2},{"id":"1569565353","weight":5},{"id":"1569564683","weight":4},{"id":"1569564305","weight":7},{"id":"1569564283","weight":2},{"id":"1569564291","weight":6},{"id":"1569566691","weight":5},{"id":"1569565421","weight":3},{"id":"1569566547","weight":4},{"id":"1569566651","weight":3},{"id":"1569566823","weight":5},{"id":"1569566677","weight":3},{"id":"1569565349","weight":3},{"id":"1569552025","weight":2},{"id":"1569566137","weight":6},{"id":"1569566283","weight":2},{"id":"1569566529","weight":6},{"id":"1569565375","weight":4},{"id":"1569566715","weight":4},{"id":"1569565237","weight":3},{"id":"1569566819","weight":3},{"id":"1569565041","weight":7},{"id":"1569564703","weight":7},{"id":"1569566713","weight":2},{"id":"1569565541","weight":2},{"id":"1569565597","weight":2},{"id":"1569566813","weight":8},{"id":"1569566771","weight":7},{"id":"1569564201","weight":3},{"id":"1569562277","weight":3},{"id":"1569566641","weight":2},{"id":"1569565425","weight":5},{"id":"1569564247","weight":3},{"id":"1569564437","weight":4},{"id":"1569566533","weight":3},{"id":"1569551905","weight":4},{"id":"1569564861","weight":4},{"id":"1569565457","weight":6},{"id":"1569564787","weight":2},{"id":"1569566487","weight":8},{"id":"1569565529","weight":6},{"id":"1569556759","weight":5},{"id":"1569566619","weight":3},{"id":"1569561185","weight":3},{"id":"1569566075","weight":3},{"id":"1569566397","weight":2},{"id":"1569566301","weight":4},{"id":"1569558779","weight":4},{"id":"1569565233","weight":2},{"id":"1569563721","weight":2},{"id":"1569566001","weight":2},{"id":"1569565593","weight":4},{"id":"1569560235","weight":2},{"id":"1569566817","weight":2},{"id":"1569564157","weight":3},{"id":"1569566389","weight":5},{"id":"1569566435","weight":3},{"id":"1569567483","weight":3},{"id":"1569566911","weight":3},{"id":"1569564923","weight":17},{"id":"1569566299","weight":8},{"id":"1569564281","weight":2},{"id":"1569565039","weight":10},{"id":"1569564769","weight":4},{"id":"1569565769","weight":4},{"id":"1569566601","weight":13},{"id":"1569565805","weight":4},{"id":"1569561713","weight":2},{"id":"1569566933","weight":5},{"id":"1569563919","weight":8},{"id":"1569566577","weight":3},{"id":"1569557851","weight":4},{"id":"1569565389","weight":2},{"id":"1569559919","weight":6},{"id":"1569565861","weight":2},{"id":"1569566147","weight":6},{"id":"1569565537","weight":6},{"id":"1569566057","weight":3},{"id":"1569562367","weight":2},{"id":"1569560785","weight":3},{"id":"1569565561","weight":6},{"id":"1569565631","weight":2},{"id":"1569560213","weight":3},{"id":"1569566457","weight":4},{"id":"1569555891","weight":3},{"id":"1569566847","weight":3},{"id":"1569565997","weight":4},{"id":"1569563425","weight":4},{"id":"1569565035","weight":7},{"id":"1569559597","weight":5},{"id":"1569564961","weight":10},{"id":"1569559251","weight":3},{"id":"1569567013","weight":5},{"id":"1569566583","weight":3},{"id":"1569561861","weight":4},{"id":"1569565337","weight":4},{"id":"1569565737","weight":3},{"id":"1569560459","weight":3},{"id":"1569566807","weight":2},{"id":"1569564463","weight":3},{"id":"1569565853","weight":11},{"id":"1569550425","weight":4},{"id":"1569566273","weight":3},{"id":"1569564123","weight":8},{"id":"1569566341","weight":2},{"id":"1569565889","weight":4},{"id":"1569566635","weight":14},{"id":"1569566611","weight":3},{"id":"1569563725","weight":2},{"id":"1569551539","weight":3},{"id":"1569564505","weight":3},{"id":"1569565165","weight":6},{"id":"1569565565","weight":4},{"id":"1569565635","weight":4},{"id":"1569561397","weight":2},{"id":"1569565731","weight":3},{"id":"1569556327","weight":2},{"id":"1569566797","weight":7},{"id":"1569566125","weight":2},{"id":"1569566413","weight":4},{"id":"1569565707","weight":3},{"id":"1569565113","weight":3},{"id":"1569566375","weight":6},{"id":"1569564257","weight":3},{"id":"1569565583","weight":4},{"id":"1569566555","weight":11},{"id":"1569564931","weight":3},{"id":"1569565373","weight":3},{"id":"1569564141","weight":3},{"id":"1569566973","weight":22},{"id":"1569561579","weight":3},{"id":"1569566449","weight":2},{"id":"1569566987","weight":4},{"id":"1569565031","weight":4},{"id":"1569564755","weight":2},{"id":"1569551541","weight":4},{"id":"1569565619","weight":3},{"id":"1569566839","weight":3},{"id":"1569551751","weight":4},{"id":"1569565139","weight":14},{"id":"1569566663","weight":5},{"id":"1569564419","weight":4},{"id":"1569565579","weight":11},{"id":"1569566067","weight":3},{"id":"1569566825","weight":4},{"id":"1569566615","weight":2},{"id":"1569566241","weight":5},{"id":"1569564807","weight":2},{"id":"1569566609","weight":2},{"id":"1569563007","weight":3},{"id":"1569566113","weight":4},{"id":"1569566443","weight":3},{"id":"1569566727","weight":9},{"id":"1569565315","weight":5},{"id":"1569565515","weight":2},{"id":"1569566417","weight":10},{"id":"1569560581","weight":5},{"id":"1569559233","weight":3}],"meta":{"jsonClass":"HashMap$HashTrieMap","sessionid":"S11.T6.3","endtime":"10:50","authors":"Erez Waisbard, Ely Porat","date":"1341484200000","papertitle":"Efficient Signature Scheme for Network Coding","starttime":"10:30","session":"S11.T6: Authentication and Signatures","room":"Kresge Rehearsal A (033)","paperid":"1569566193"},"cluster":{"jsonClass":"HashMap$HashTrieMap","spectral6":"3","spectral43":"23","spectral28":"22","spectral32":"18","spectral14":"8","spectral20":"14","spectral9":"3","spectral25":"16","spectral42":"41","spectral3":"0","spectral47":"23","spectral17":"2","louvain":"287","spectral36":"33","spectral39":"26","spectral10":"0","spectral15":"8","spectral33":"5","spectral5":"4","spectral21":"10","spectral44":"6","spectral26":"2","spectral40":"18","spectral8":"2","spectral11":"6","spectral4":"2","spectral37":"34","spectral48":"17","spectral22":"21","spectral23":"5","spectral12":"6","spectral50":"14","spectral19":"8","spectral34":"20","spectral45":"44","spectral7":"5","spectral49":"43","spectral38":"33","spectral24":"22","spectral13":"2","spectral31":"21","spectral29":"17","spectral35":"9","spectral30":"13","spectral41":"9","spectral27":"6","spectral18":"5","spectral46":"35","spectral2":"0","spectral16":"14"}}
