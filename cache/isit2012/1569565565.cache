{"id":"1569565565","paper":{"title":{"text":"Efﬁcient Decoding of Permutation Codes Obtained from Distance Preserving Maps"},"authors":[{"name":"Yeow Meng Chee"},{"name":"Punarbasu Purkayastha"}],"abstr":{"text":"Abstract\u2014We study the decoding of permutation codes ob- tained from distance preserving maps and distance increasing maps from Hamming space. We provide efﬁcient algorithms for estimating the q-ary digits of the Hamming space so that decoding can be performed in the Hamming space."},"body":{"text":"Transmission of data over high voltage electric power lines is a challenging problem due to the harsh nature of the channel. The noise characteristics of this channel, called the powerline communication (PLC) channel, include permanent narrowband noise, impulse noise, in addition to fading and additive white Guassian noise. Vinck [8] studied this channel and showed that M -ary Frequency Shift Keying (M -FSK) modulation, in conjunction with the use of permutation codes, provide the required redundancy to correct the errors resulting from the harsh noise pattern. This has given rise to increased research on codes in the permutation space (see [4] for a survey). One method to obtain a permutation code is to consider distance increasing maps (DIMs) or distance preserving maps (DPMs) from the Hamming space to the permutation space. The works in [3], [5]\u2013[7] address the problem of constructing such DIMs and DPMs. Unlike the case of codes in the Hamming space, decoding of codes in the permutation space is a more difﬁcult problem, especially because of the loss of linearity. Bailey [1] gave efﬁcient decoding algorithms in the case when the permutation codes are subgroups. Unfortunately, the permutation codes obtained from DIMs or DPMs of codes in the Hamming space are not permutation groups in general. Swart and Ferreira [7] studied some DIMs and DPMs from the binary Hamming space to permutations and provided efﬁcient decoding algorithms for determining the binary vectors.\nIn this work we study the problem of decoding permutation codes obtained from DIMs or DPMs of q-ary Hamming codes. The main idea that we employ is to perform only estimation of the q-ary digits from the received vector. The actual decoding of the estimated q-ary vector is performed in the q-ary Hamming space. Decoding of linear codes is a very well studied problem and many efﬁcient decoding algorithms exist. Our aim here is to provide efﬁcient ways of estimating the q-ary digits so that the overall estimation and decoding procedure still retains low complexity.\nWe use the notation S N to denote the permutation space over the symbols {0, . . . , N − 1}. Each element σ of S N is\nwritten as a vector σ = (σ 0 , . . . , σ N −1 ), which represents the output of the permutation. The distance between two elements of S N is taken to be the Hamming distance between their vector representations. We use the notation Z n q = {0, . . . , q − 1} n to denote the Hamming space. A distance-preserving map Π : Z n q → S N is a mapping which preserves the Hamming distance between any two vectors, that is, d(Π(x), Π(y)) ≥ d(x, y) for any vectors x, y ∈ Z n q . A distance-increasing map Π : Z n q → S N strictly increases the Hamming distance, that is, d(Π(x), Π(y)) > d(x, y) for any distinct vectors x, y ∈ Z n q .\nAn upper bound on the size of a permutation code with minimum distance d is given by N !/(d − 1)!. Clearly, the information rate of a permutation code can be larger than the rate achievable by DPMs from q-ary Hamming space (unless q is proportional to N ). Sharply k-transitive groups, which have efﬁcient decoding, are known to achieve this upper bound (see [1], [2]). For such groups either d ≤ 3 or d ≥ N − 4. In the latter case, the size of the code is only polynomial in N . Thus it is of interest to consider other means of obtaining permutation codes, for instance from DPMs.\nIn the following sections we consider very speciﬁc DIMs and DPMs. All the DIMs and DPMs we use are non-length preserving, but ensure that efﬁcient estimation algorithms exist. Hence, the rate of the codes decreases by a factor of 1/ log 2 q , compared to the q-ary code in the Hamming space. We consider a channel, for instance the PLC channel, which introduces both errors and erasures. The simplest such algo- rithm, and DIM from the binary Hamming space, introduced in the next section has only linear complexity. This algorithm also guarantees that the estimation procedure does not introduce extra errors or erasures in the binary digits. The mappings in the subsequent sections are more complicated and require at least two symbols in the permutation space to estimate one q-ary digit. Hence, such guarantees can be provided if the channel introduces only erasures.\nIn this section we discuss a DIM from binary vectors to permutations. Lee [5] studied a DIM and its properties, which is similar to this DIM (also, [7, Eg. 1]). We give an efﬁcient algorithm in the permutation space which provides only an estimate of the bits. We ﬁrst describe the DIM used here.\nThe DIM maps a binary vector b = (b 0 , . . . , b n−1 ) of length n to a vector σ = (σ 0 , . . . , σ n ) of length n + 1 in S n+1 .\nWe start from the identity permutation σ (−1) = (0, . . . , n). The bit b 0 permutes the ﬁrst two coordinates, resulting in a vector σ (0) = (σ (0) 0 , . . . , σ (0) n ). For i = 1, . . . , n − 1 the bit b i permutes the coordinates σ (i−1) i \t and σ (i−1) i+1 of σ (i−1) . Let Π 0 denote this mapping. The example below illustrates the map of b = (1, 1, 0, 1) to the permutation vector (1, 2, 0, 4, 3). For brevity of exposition we write the vector σ in a compact form, σ = 12043. Underlined portions denote the affected symbols.\nOutput: σ = (σ 0 , . . . , σ n ) ∈ S n+1 σ (−1) ← (0, . . . , n)\nThe proposition below can be derived from the results in [5]. Proposition 2.3: (see [5]) The mapping Π 0 is a DIM with\nd(Π 0 (b), Π 0 (b )) ≥ d(b, b ) + n R , where n R is the number of runs of ones in supp b ∪ supp b , where supp b denotes the support of the vector b.\nA very simple estimation procedure gives the correct binary bit if the received symbol is correct in the corresponding coordinate. The algorithm is described below. We denote an erasure by the symbol ε. Let the vector received as the output of the channel be denoted by y. It lies in the space {Z n+1 ∪ ε} n+1 .\nInput: y = (y 0 , . . . , y n ) ∈ {Z n+1 ∪ ε} n+1 Output: ˆ b = (ˆ b 0 , . . . , ˆ b n−1 ) ∈ {Z 2 ∪ ε} n for i from 0 to n − 1\nelseif y i < i + 1 then ˆ b i ← 0 else ˆ b i ← ε.\nThe estimate ˆ b can be now provided to the decoder for the binary code for decoding. Clearly, the above algorithm never introduces any error if the coordinate y i is correct. Hence, this procedure can correctly decode with a bounded distance decoder if the number of errors n e and the number of erasures n ε satisfy the condition 2n e + n ε < d, where d is the minimum distance of the binary code. In practice the algorithm potentially corrects more errors. For example if the transmitted symbol corresponding to b i = 0 is different from the received symbol y i , but the received symbol satisﬁes y i < i + 1 then there is no error in estimating the bit ˆ b i . This algorithm performs at most 2n comparisons and has a memory requirement of exactly one symbol at each step. In comparison the decoding algorithm in Swart & Ferreira [7] performs decoding in the permutation space, under M - FSK signaling, and requires O(M 2 + nM ) computations and o(3 nM 2 ) memory.\nIf the rate of the binary code is R then the rate of transmission of information bits is Rn/(n+1). From the DIM and the estimation algorithm it can be inferred that only about \u201chalf\u201d the permutation space is used for communication over an M -FSK channel. At the i-th time instance, the symbols i + 2, . . . , n are used neither during transmission nor during the decoding procedure. If the DIM is from a linear binary code of dimension k = Rn, then one can achieve a rate of k/(n + 1) + (k − 3)/(n − 2) by utilizing the unused symbols to transmit a shortened codeword ˜ b of length n − 3, but in reverse order of the DIM. If ˜ σ (−1) = (3, . . . , n) then ˜ b 0 ﬂips ˜ σ (−1) n−3 and ˜ σ (−1) n−4 , ˜ b 1 ﬂips ˜ σ (0) n−4 , ˜ σ (0) n−5 , and so on.\nIn this section we describe a modiﬁcation to the mapping in Section II so that it can be used for q-ary vectors where q = 2 m . The primary aim is to provide a simple means of estimating the symbols used. The idea is to use a binary rep- resentation of each symbol and map that binary representation of length m to an m+1 length permutation vector. We give an example below and then we describe the algorithm formally. We denote this mapping by Π 1 . For brevity, we write the vectors in a compact form.\nE XAMPLE 3.1: Let q = 2 2 and let the symbols {0, 1, 2, 3} be mapped to their natural binary representation as 0 → 00, 1 → 01, 2 → 10, and 3 → 11. The vector s = 132 is mapped to the permutation vector 0234516 in the following sequence of steps: 0123456 01 −→ 0213456 11 −→ 0234156 10 −→ 0234516. The underlined portions denote the affected symbols.\nOutput: σ = (σ 0 , . . . , σ mn ) ∈ S mn+1 σ (−1) ← (0, 1, . . . , mn) for i from 0 to n − 1\nb i = (b i,0 , . . . , b i,m−1 ), binary representation of s i if b i,j = 1 then\nThe estimation procedure for the symbols is the same as described in Section II-A. We estimate the bits and then recombine the bits to form the symbols. This is an efﬁcient and reasonably effective method of estimating the symbols provided that the number of errors and erasures introduced by the channel is low. The number of comparisons required is at most 2mn. One drawback of this DIM is that the rate of transmission of information bits decreases by a factor of 1 m .\nIn this section we develop a new distance preserving map (DPM) from binary vectors to permutation vectors, which allows us to estimate the binary symbols efﬁciently. The mapping converts a length n binary vector to a length n + 1 permutation vector in S n+1 . This method is introduced so that\nit can be generalized to a new DPM from ternary vectors to permutations in the next section. The following lemma is essential to the constructions in the remaining sections.\nLemma 4.1: Let (σ 0 , . . . , σ l ) be a permutation of (0, 1, . . . , l). Then σ = (σ 0 +i, . . . , σ l +i, l+1+i, . . . , l+j +i) mod (l + j + 1) is a permutation of the vector (0, 1, . . . , l + j), and the modulo is performed on each coordinate of the vector.\nProof: Consider the vector Σ = (0, . . . , l, l + 1, . . . , l + j) in S l+j+1 . Adding i modulo l + j + 1 to each coordinate of Σ results in a vector Σ + i which is a cyclic shift of Σ to the left by i positions. Hence Σ + i is also in S l+j+1 . Considered as an unordered tuple, the elements of σ are the same as the elements of Σ + i and hence σ is also a vector in S l+j+1 .\nWe now describe the algorithm to map the binary vec- tors to the permutation vectors. For a binary vector b = (b 0 , . . . , b n−1 ) the algorithm proceeds recursively as follows. Consider the binary vector as a {0, 1}-vector in R. The algorithm is initialized by starting with the identity permu- tation represented as σ (−1) = (0, 1, . . . , n). For each i = 0, . . . , n − 1, the element b i is added to the ﬁrst i + 2 positions of the permutation vector σ (i−1) modulo (i + 2), where σ (i−1) is the vector resulting from the previous iteration. Denote the DPM by Π 2 . The example below illustrates the procedure.\nE XAMPLE 4.2: We map 1101 to 32140 as follows: 01234 b 0 =1 −−−→ 10234 b 1 =1 −−−→ 21034 b 2 =0 −−−→ 21034 b 3 =1 −−−→ 32140.\nOutput: σ = (σ 0 , . . . , σ n ) ∈ S n+1 σ (−1) ← (0, 1, . . . , n) for i from 0 to n − 1\nProposition 4.4: Π 2 is a DPM from Z n 2 to S n+1 , that is for b, b ∈ Z n 2 , d(Π 2 (b), Π 2 (b )) ≥ d(b, b ).\nBefore providing the proof of the proposition we determine the output of the mapping Π 2 as a nonrecursive function of the input bits b i , i = 0, . . . , n − 1. For brevity of the exposition, we introduce the notation [a] p to denote a mod p. Recall that the binary vector b is considered as a {0, 1}-vector over R.\nLemma 4.5: If Π 2 (b) = σ = (σ 0 , . . . , σ n ), then σ 0 = b 0 + · · · + b n−1 ,\nσ l = [l + b l−1 ] l+1 + b l + · · · + b n−1 , l = 1, . . . , n. Proof: The output of the mapping Π 2 is given by\nProof of Proposition 4.4: Let b = (b 0 , . . . , b n−1 ) and b = (b 0 , . . . , b n−1 ), be {0, 1}-vectors over R. Suppose b i−1 =\nLet ∆ i = n−1 l=i b l −b l . Note that if b 0 = b 0 then the vectors are clearly different in at least the ﬁrst 2 positions. So, let i ≥ 2. First, suppose that ∆ i = 0. Clearly, b i−1 = b i−1 implies σ i = σ i . Now, assume that ∆ i = 0. If σ i = σ i then without loss of generality assume that b i−1 = 0 and b i−1 = 1. Using Lemma 4.5 in the equation σ i = σ i leads to the condition i = −∆ i . We claim that σ i−1 = σ i−1 . Suppose not. We get\nWe consider the different possibilities of b i−2 and b i−2 . If b i−2 = b i−2 then (1) results in ∆ i = 1, a contradiction to i = −∆ i . Similarly, one obtains contradictions for other values of b i−2 and b i−2 . Finally, we show by induction that if b i+j = b i+j , j = 0, . . . , k − 1, then σ i+j = σ i+j for at least k terms of j ∈ {0, . . . , k}. The case k = 1 is proved above. Assume it is true for any k − 1 consecutive b i+j \u2019s. The only non- trivial case we need to consider is if σ i = σ i and σ i+k = σ i+k . We claim this is not possible. Suppose σ i+k = σ i+k . Then using b l−1 − b l−1 ∈ {−1, 0, 1}, for l = 1, . . . , n, we write σ l − σ l = −(b l−1 − b l−1 )l + ∆ l . Using σ i+k − σ i+k = −(b i+k−1 − b i+k−1 )(i + k) + ∆ i+k = 0, we get σ i − σ i = −(b i−1 −b i−1 )i+∆ i −∆ i+k−1 +(b i+k−1 −b i+k−1 )(i+k +1). Since | − (b i−1 − b i−1 )i + ∆ i − ∆ i+k−1 | ≤ i + k − 1 and the last term of σ i − σ i is ±(i + k + 1), we get σ i = σ i .\nIn this section we consider a method to estimate the bits from the permutation vectors, with low complexity. The estimated bits can then be provided to the decoder of the binary code for further processing. The main idea behind the estimation method is the following lemma.\nLemma 4.6: Let Π 2 (b) = σ. The difference between any two coordinates σ i , σ j for j > i satisﬁes\nσ i − σ j > 0, if b j−1 = 1, < 0, if b j−1 = 0.\nThe statements in the lemma follow from the observation that [i + b i−1 ] i+1 + j−2 l=i b l ≤ j − 1.\nLet the received vector from the channel be denoted by y ∈ {Z n+1 ∪ ε} n+1 . By Lemma 4.6, it is clear that the simplest estimation algorithm will consider a pair of distinct coordinates y i , y j and determine b j−1 from their difference. This can lead to erroneous estimation if either of the two coordinates are in error. However, correct estimation of b j−1 is guaranteed if both the coordinates are correct. If y j = ε, then b j−1 can not be determined from y j and we set ˆ b j−1 = ε. Algorithm 4.7 below describes the procedure.\nThe term t > 0 in the algorithm corresponds to performing a majority vote for the estimate ˆ b j for each j = 0, . . . , n − 1. Algorithm 4.7 requires at most n(n + 1) additions and sub- tractions, and 3n + n 2 (n + 1) comparisons. By restricting |L j |\nto at most a constant number, say , the number of additions and subtractions can be reduced to at most 2 n, at the cost of less reliable estimate of the bits in the higher indices. If the number of errors and erasures are small then one can expect the above algorithm to perform well even for small |L j |.\nA LGORITHM 4.7: Estimating the binary vector ˆ b from y Input: y = (y 0 , . . . , y n ) ∈ {Z n+1 ∪ ε} n+1 Output: ˆ b = (ˆ b 0 , . . . , ˆ b n−1 ) ∈ {Z 2 ∪ ε} n\nL 0 ← φ, the empty set for j from 1 to n\nL j ← L j−1 ∪ {j − 1 : y j−1 = ε} if y j = ε then ˆ b j−1 ← ε else t ← 0\nif y l − y j > 0 then t ← t + 1 else t ← t − 1\nelseif t < 0 then ˆ b j−1 ← 0 else ˆ b j−1 ← ε\nThe above algorithm simpliﬁes signiﬁcantly on an erasure channel. Using |L j | = 1 is sufﬁcient to guarantee that the number of erasures in the estimated bits ˆ b is at most the number of erasures in the received symbols y. In addition, if the symbol 0 of S n+1 is present in the received vector y, then one can immediately estimate all the succeeding bits correctly, irrespective of the received values from the channel. This observation is formalized in the following lemma.\nLemma 4.8: Let b ∈ Z n 2 and let σ = Π 2 (b). If σ j = 0, then b j−1 = 1 and b l = 0 for all l ≥ j.\nProof: If σ j = 0 then we have [j + b j−1 ] j+1 + b j + · · · + b n−1 = 0 over the reals. This can be achieved only when b j−1 = 1 and b j = · · · = b n−1 = 0.\nIn the following section we describe how to extend the algorithms in this section to a DPM from ternary vectors to permutations.\nConsider a DPM from ternary vectors in Z n 3 to permutation vectors in S 2n+1 . For a ternary vector s = (s 0 , . . . , s n−1 ), the element s i permutes the ﬁrst 2i + 3 coordinates of the permutation vector. As in the previous section, the construction is recursive and the ﬁnal permutation vector also affords a nonrecursive representation in terms of the ternary digits. We describe the algorithm below. Let the mapping be denoted by Π 3 and consider the ternary digits as elements of the real ﬁeld R for all the operations below. We ﬁrst illustrate this algorithm by an example below.\nE XAMPLE 5.1: We map 121 to 4531260 using Π 3 as follows. 0123456 s 0 =1 −−−→ 1203456 s 1 =2 −−−→ 3420156 s 2 =1 −−−→ 4531260.\nσ (−1) ← (0, 1, . . . , 2n) for i from 0 to n − 1\nTo prove that the mapping Π 3 is a DPM we use an analog of Lemma 4.5 to express the coordinates σ i in the output σ nonrecursively in terms of the input symbols s 0 , . . . , s n−1 .\nLemma 5.3: Let Π 3 (s) = σ. Then for all i = 0, . . . , n − 1, σ 0 = s 0 + · · · + s n−1 ,\nProposition 5.4: The mapping Π 3 from Z n 3 to S 2n+1 is a DPM, that is, d(Π 3 (s), Π 3 (s )) ≥ d(s, s ).\nIdea of Proof: We ﬁrst show that s i = s i implies that either at least one of σ 2i+j − σ 2i+j , j = 1, 2 is nonzero, or if both are zero then σ 2i = σ 2i . In the latter case, if we additionally have s i−1 = s i−1 then we show that σ 2i−1 = σ 2i−1 .\nA. Estimating the ternary symbols from the permutation vector The estimation of the ternary symbols from the received\nvector is, not surprisingly, more computationally intensive than the corresponding one in Section IV-A.\nLemma 5.5: Let Π 3 (s) = σ. The differences between the symbols {σ 2i+1 , σ 2(i+1) } and {σ 2j+1 , σ 2(j+1) } for j > i satisﬁes the following conditions. For l ∈ {2i + 1, 2(i + 1)},\n∈ {0, 1}, > 0, if s j = 2,\nProof: We show the proof for only the case σ 2i+1 −σ 2j+1 since the other cases are similar. Using Lemma 5.3 we get\nFor s j ∈ {0, 1}, we get [2j + 1 + s j ] 2j+3 = 2j + 1 + s j . Since [2i + 1 + s i ] 2i+3 + j−1 l=i+1 s l ≤ 2i + 2 + 2(j − 1 − i) = 2j, we get that the RHS of the above equation is strictly negative. For s j = 2, we get [2j + 1 + s j ] 2j+3 = 0 and hence the RHS is always strictly positive.\nThis lemma suggests the following algorithm to determine the ternary symbol s j . Let y = (y 0 , . . . , y 2n ) in {Z 2n+1 ∪ ε} 2n+1 be the received vector. For l < 2j + 1, if y l , y 2j+1 , y 2j+2 are not erasures then we take the differences y l − y 2j+1 and y l − y 2(j+1) and declare s j = 0 if both the differences are negative, s j = 2 if both the differences are positive, and s j = 1 otherwise. We formalize this procedure in the following algorithm. This algorithm corresponds to Algorithm 4.7 of Section IV-A.\nA LGORITHM 5.6: Estimate ternary symbols from y Input: y = (y 0 , . . . , y 2n ) ∈ {Z 2n+1 ∪ ε} 2n+1 Output: ˆ s = (ˆ s 0 , . . . , ˆ s n−1 ) ∈ {Z 3 ∪ ε} n\nL 0 ← φ, the empty set for j from 1 to n\nL j ← L j−1 ∪ l : y l = ε, l ∈ {2(j − 1), 2(j − 1) − 1} if y 2j = ε or y 2j−1 = ε then ˆ s j−1 ← ε else\nt = (t 0 , t 1 , t 2 ) ← (0, 0, 0) for each l in L j\nelseif p 0 < 0 and p 1 > 0 then t 1 ← t 1 + 1 elseif p 0 > 0 and p 1 > 0 then t 2 ← t 2 + 1\n|L j | ≤ 1 + 3 + · · · + 2n − 1 = n 2 . Hence the maximum number of comparisons required is 8n+6n 2 , and the maximum number of subtractions and additions required is 3n 2 . Using at most a constant size of |L j | ≤ leads to less computations, at the loss of reliability of the symbols in the higher indices. B. Estimating ternary symbols on an erasure channel\nAn analog of Lemma 4.8 allows us to adopt a simpler decoding procedure in an erasure channel.\nLemma 5.7: Let s ∈ Z n 3 , σ = Π 3 (s). If σ 2i+1 = 0 or σ 2(i+1) = 0 then s i = 2 or s i = 1, resp., and s j = 0, j > i.\nRemark: If the demodulator can provide soft information on the reliability of the symbols, then Algorithms 4.7 and 5.6 can be simpliﬁed by ﬁxing |L j | = 1 and retaining only the most reliable symbol from the received symbols at step j.\nWe consider the PLC channel with M -FSK modulation and with only background noise, for simplicity. The transmitted word is represented as an M × M {0, 1}-matrix, where M is the length of the permutation. A 1 in the i-th row and j- th column indicates that the permutation symbol i is sent at time j. Since we are considering hard decision decoding, we simulate background noise by ﬂipping the value of any entry of the matrix with a probability p. The codewords are chosen at random from BCH codes over the ﬁnite ﬁelds F q for q = 2, 3, 4. For the maps Π 0 , Π 1 , the permutation symbol at time i is taken to be i + 1 if the (i + 1, i)-th entry of the received matrix is 1; it is assumed ε if all entries (j, i), j ≤ i are 0; otherwise it is assumed j if any (j, i)-th entry is 1 for j ≤ i. For maps Π 2 , Π 3 we set the permutation symbol at time i to ε if the column i does not contain exactly one 1. Fig. 1 shows the symbol error and erasure rate of the different estimation algorithms, after decoding the estimated symbols with a bounded distance error and erasure decoder.\nWe provided several different mappings from q-ary vectors in Z n q to permutations in S N . The main focus of using such\nmappings was to implement simple estimation algorithms in the permutation space and provide the estimated digits to the q-ary code where efﬁcient decoding algorithms can be implemented. Since the length N = q + Q(n − 1), Q =\nlog 2 q , the information rate of the codes decreases by a factor of approximately 1/ log 2 q for all the algorithms. We believe that it should be possible to generalize the map Π 3 from ternary vectors to the permutation space to a DPM Π q : Z n q → S N , by using an additional Q symbols at every iteration of the DPM. Hence we have the following: Conjecture: Map (s 0 , . . . , s n−1 ) to (σ 0 , . . . , σ N −1 ) by Π q :\nσ (0) ← ([0+s 0 ] q , . . . , [q −1+s 0 ] q , q, . . . , q +Q(n−1)−1) for i from 0 to n − 2\nσ (i+1) j \t ← [σ (i) j + s i+1 ] Q(i+1)+q , j ≤ q + Q(i + 1) − 1. Then Π q is a DPM.\nWe thank the anonymous referees for their careful reading of the paper, and for their suggestions, which helped us improve the presentation of the paper."},"refs":[{"authors":[{"name":"R. F. Bailey"}],"title":{"text":"Error-correcting codes from permutation groups"}},{"authors":[{"name":"I. F. Blake"},{"name":"G. Cohen"},{"name":"M. Deza"}],"title":{"text":"Coding with permutations"}},{"authors":[{"name":"J. C. Chang"}],"title":{"text":"Distance-increasing mappings from binary vectors to permutations that increase hamming distances by at least two"}},{"authors":[{"name":"S. Huczynska"}],"title":{"text":"Powerline communication and the 36 ofﬁcers problem"}},{"authors":[{"name":"K. Lee"}],"title":{"text":"Distance-increasing maps of all lengths by simple mapping algorithms"}},{"authors":[{"name":"J. Lin"},{"name":"J. Chang"},{"name":"R. Chen"},{"name":"T. Kløve"}],"title":{"text":"Distance-preserving and distance- increasing mappings from ternary vectors to permutations"}},{"authors":[{"name":"T. G. Swart"},{"name":"H. C. Ferreira"}],"title":{"text":"Decoding distance-preserving permu- tation codes for power-line communications"}},{"authors":[{"name":"A. J. H. Vinck"}],"title":{"text":"Coded modulation for power line communications"}}]},"file":{"jsonClass":"File","file":"/home/arnfred/Code/trailhead/resources/isit2012/1569565565.pdf"},"links":[{"id":"1569566567","weight":6},{"id":"1569564843","weight":10},{"id":"1569566527","weight":5},{"id":"1569566485","weight":2},{"id":"1569565383","weight":6},{"id":"1569565883","weight":13},{"id":"1569564889","weight":6},{"id":"1569565223","weight":2},{"id":"1569566725","weight":6},{"id":"1569565663","weight":2},{"id":"1569565377","weight":3},{"id":"1569566385","weight":7},{"id":"1569564635","weight":4},{"id":"1569565867","weight":3},{"id":"1569566799","weight":5},{"id":"1569565067","weight":3},{"id":"1569559665","weight":5},{"id":"1569561021","weight":8},{"id":"1569565691","weight":5},{"id":"1569566815","weight":3},{"id":"1569566875","weight":6},{"id":"1569564605","weight":10},{"id":"1569559617","weight":3},{"id":"1569566981","weight":8},{"id":"1569566321","weight":6},{"id":"1569566605","weight":5},{"id":"1569565489","weight":2},{"id":"1569566683","weight":11},{"id":"1569566855","weight":4},{"id":"1569560629","weight":8},{"id":"1569566869","weight":8},{"id":"1569565097","weight":4},{"id":"1569566227","weight":4},{"id":"1569566091","weight":5},{"id":"1569559259","weight":4},{"id":"1569566697","weight":5},{"id":"1569566597","weight":4},{"id":"1569565551","weight":5},{"id":"1569565711","weight":4},{"id":"1569566761","weight":5},{"id":"1569566943","weight":5},{"id":"1569565091","weight":9},{"id":"1569566591","weight":3},{"id":"1569566571","weight":10},{"id":"1569552245","weight":5},{"id":"1569565495","weight":2},{"id":"1569559967","weight":10},{"id":"1569567045","weight":3},{"id":"1569565227","weight":3},{"id":"1569564481","weight":10},{"id":"1569560833","weight":10},{"id":"1569566415","weight":5},{"id":"1569564805","weight":12},{"id":"1569567005","weight":12},{"id":"1569566469","weight":2},{"id":"1569566081","weight":7},{"id":"1569565355","weight":6},{"id":"1569564469","weight":6},{"id":"1569565931","weight":4},{"id":"1569566373","weight":3},{"id":"1569566647","weight":4},{"id":"1569551535","weight":8},{"id":"1569566765","weight":4},{"id":"1569564897","weight":5},{"id":"1569565775","weight":23},{"id":"1569565547","weight":7},{"id":"1569566871","weight":10},{"id":"1569565461","weight":8},{"id":"1569564731","weight":5},{"id":"1569566207","weight":8},{"id":"1569564227","weight":5},{"id":"1569558325","weight":5},{"id":"1569565837","weight":2},{"id":"1569566671","weight":5},{"id":"1569566303","weight":5},{"id":"1569564233","weight":5},{"id":"1569566459","weight":3},{"id":"1569567535","weight":7},{"id":"1569563411","weight":6},{"id":"1569560427","weight":5},{"id":"1569564401","weight":3},{"id":"1569564849","weight":8},{"id":"1569559541","weight":3},{"id":"1569565317","weight":4},{"id":"1569566363","weight":7},{"id":"1569566319","weight":2},{"id":"1569565123","weight":3},{"id":"1569566941","weight":3},{"id":"1569566033","weight":3},{"id":"1569566739","weight":3},{"id":"1569555811","weight":5},{"id":"1569558459","weight":5},{"id":"1569565609","weight":3},{"id":"1569565291","weight":6},{"id":"1569564203","weight":10},{"id":"1569566821","weight":18},{"id":"1569556713","weight":7},{"id":"1569562685","weight":6},{"id":"1569566751","weight":2},{"id":"1569566467","weight":4},{"id":"1569565771","weight":3},{"id":"1569566157","weight":4},{"id":"1569560613","weight":2},{"id":"1569566903","weight":4},{"id":"1569566999","weight":6},{"id":"1569565859","weight":5},{"id":"1569565809","weight":3},{"id":"1569566843","weight":6},{"id":"1569566579","weight":4},{"id":"1569558483","weight":5},{"id":"1569566563","weight":15},{"id":"1569566089","weight":4},{"id":"1569566173","weight":2},{"id":"1569559221","weight":7},{"id":"1569556091","weight":4},{"id":"1569565347","weight":7},{"id":"1569566925","weight":6},{"id":"1569564387","weight":4},{"id":"1569565455","weight":3},{"id":"1569566497","weight":6},{"id":"1569566795","weight":2},{"id":"1569566963","weight":3},{"id":"1569561679","weight":7},{"id":"1569566709","weight":6},{"id":"1569564989","weight":4},{"id":"1569566787","weight":18},{"id":"1569566717","weight":3},{"id":"1569560721","weight":3},{"id":"1569566523","weight":2},{"id":"1569565897","weight":6},{"id":"1569551763","weight":7},{"id":"1569565953","weight":5},{"id":"1569566895","weight":6},{"id":"1569566889","weight":2},{"id":"1569565709","weight":5},{"id":"1569566749","weight":5},{"id":"1569566269","weight":10},{"id":"1569564189","weight":5},{"id":"1569564195","weight":3},{"id":"1569561513","weight":9},{"id":"1569566985","weight":5},{"id":"1569564613","weight":5},{"id":"1569565369","weight":3},{"id":"1569567009","weight":5},{"id":"1569566865","weight":4},{"id":"1569565321","weight":4},{"id":"1569558785","weight":4},{"id":"1569564647","weight":3},{"id":"1569566095","weight":3},{"id":"1569566193","weight":4},{"id":"1569564271","weight":3},{"id":"1569564337","weight":2},{"id":"1569565907","weight":4},{"id":"1569566343","weight":5},{"id":"1569564311","weight":3},{"id":"1569565803","weight":4},{"id":"1569565785","weight":6},{"id":"1569566239","weight":4},{"id":"1569566167","weight":2},{"id":"1569566679","weight":12},{"id":"1569565989","weight":6},{"id":"1569566575","weight":7},{"id":"1569563981","weight":10},{"id":"1569561085","weight":3},{"id":"1569566419","weight":4},{"id":"1569566617","weight":8},{"id":"1569559565","weight":7},{"id":"1569566905","weight":7},{"id":"1569566733","weight":2},{"id":"1569566311","weight":2},{"id":"1569563307","weight":16},{"id":"1569566063","weight":5},{"id":"1569558681","weight":9},{"id":"1569566759","weight":5},{"id":"1569565589","weight":2},{"id":"1569559195","weight":7},{"id":"1569566149","weight":8},{"id":"1569566217","weight":2},{"id":"1569566657","weight":13},{"id":"1569558859","weight":10},{"id":"1569565199","weight":3},{"id":"1569565213","weight":2},{"id":"1569565365","weight":2},{"id":"1569566643","weight":3},{"id":"1569566511","weight":6},{"id":"1569566719","weight":6},{"id":"1569566991","weight":2},{"id":"1569565841","weight":5},{"id":"1569566369","weight":8},{"id":"1569566531","weight":6},{"id":"1569567665","weight":7},{"id":"1569561143","weight":4},{"id":"1569566581","weight":9},{"id":"1569565833","weight":4},{"id":"1569566489","weight":4},{"id":"1569564611","weight":3},{"id":"1569565535","weight":3},{"id":"1569562867","weight":8},{"id":"1569566395","weight":7},{"id":"1569565667","weight":2},{"id":"1569561795","weight":2},{"id":"1569566845","weight":7},{"id":"1569566325","weight":3},{"id":"1569566423","weight":3},{"id":"1569565257","weight":4},{"id":"1569564795","weight":4},{"id":"1569567015","weight":6},{"id":"1569559805","weight":4},{"id":"1569566437","weight":5},{"id":"1569566811","weight":2},{"id":"1569558901","weight":14},{"id":"1569565735","weight":5},{"id":"1569553909","weight":5},{"id":"1569559111","weight":6},{"id":"1569566687","weight":4},{"id":"1569564881","weight":2},{"id":"1569566939","weight":6},{"id":"1569553537","weight":10},{"id":"1569565427","weight":5},{"id":"1569566403","weight":4},{"id":"1569565839","weight":4},{"id":"1569565915","weight":4},{"id":"1569552251","weight":5},{"id":"1569566139","weight":4},{"id":"1569553519","weight":3},{"id":"1569567051","weight":3},{"id":"1569566885","weight":5},{"id":"1569564441","weight":3},{"id":"1569566231","weight":2},{"id":"1569564209","weight":3},{"id":"1569554689","weight":2},{"id":"1569566513","weight":5},{"id":"1569566425","weight":11},{"id":"1569554881","weight":4},{"id":"1569554971","weight":9},{"id":"1569565501","weight":9},{"id":"1569566899","weight":3},{"id":"1569566445","weight":4},{"id":"1569566209","weight":5},{"id":"1569562821","weight":3},{"id":"1569566791","weight":6},{"id":"1569565559","weight":12},{"id":"1569566371","weight":4},{"id":"1569565655","weight":8},{"id":"1569566909","weight":3},{"id":"1569566127","weight":4},{"id":"1569565151","weight":2},{"id":"1569558985","weight":4},{"id":"1569563763","weight":14},{"id":"1569565087","weight":2},{"id":"1569566473","weight":8},{"id":"1569564857","weight":10},{"id":"1569564333","weight":6},{"id":"1569566913","weight":15},{"id":"1569566809","weight":4},{"id":"1569566629","weight":4},{"id":"1569566257","weight":3},{"id":"1569565033","weight":8},{"id":"1569566447","weight":4},{"id":"1569566357","weight":2},{"id":"1569565817","weight":8},{"id":"1569565847","weight":15},{"id":"1569564353","weight":5},{"id":"1569563897","weight":4},{"id":"1569557083","weight":4},{"id":"1569565887","weight":2},{"id":"1569565929","weight":5},{"id":"1569566141","weight":8},{"id":"1569553591","weight":2},{"id":"1569566721","weight":2},{"id":"1569564677","weight":4},{"id":"1569563231","weight":4},{"id":"1569565633","weight":6},{"id":"1569566661","weight":3},{"id":"1569565279","weight":4},{"id":"1569555879","weight":9},{"id":"1569565521","weight":2},{"id":"1569566115","weight":5},{"id":"1569565219","weight":5},{"id":"1569558509","weight":7},{"id":"1569554759","weight":3},{"id":"1569565595","weight":8},{"id":"1569565185","weight":5},{"id":"1569556671","weight":2},{"id":"1569566773","weight":6},{"id":"1569566037","weight":2},{"id":"1569564985","weight":3},{"id":"1569565095","weight":3},{"id":"1569566223","weight":8},{"id":"1569558401","weight":6},{"id":"1569566553","weight":4},{"id":"1569564973","weight":3},{"id":"1569564969","weight":5},{"id":"1569565029","weight":7},{"id":"1569565357","weight":3},{"id":"1569561245","weight":3},{"id":"1569566505","weight":3},{"id":"1569565393","weight":4},{"id":"1569565933","weight":15},{"id":"1569562207","weight":11},{"id":"1569565705","weight":6},{"id":"1569566191","weight":6},{"id":"1569567033","weight":8},{"id":"1569565527","weight":8},{"id":"1569566853","weight":2},{"id":"1569566603","weight":6},{"id":"1569567029","weight":4},{"id":"1569565363","weight":3},{"id":"1569566159","weight":17},{"id":"1569566695","weight":3},{"id":"1569566051","weight":5},{"id":"1569561379","weight":4},{"id":"1569565909","weight":2},{"id":"1569561123","weight":20},{"id":"1569565467","weight":3},{"id":"1569566655","weight":3},{"id":"1569566673","weight":3},{"id":"1569567235","weight":2},{"id":"1569565739","weight":3},{"id":"1569565311","weight":4},{"id":"1569566233","weight":7},{"id":"1569566667","weight":3},{"id":"1569566297","weight":2},{"id":"1569566893","weight":8},{"id":"1569566317","weight":3},{"id":"1569560997","weight":7},{"id":"1569563845","weight":3},{"id":"1569566407","weight":5},{"id":"1569560349","weight":3},{"id":"1569566501","weight":5},{"id":"1569565741","weight":10},{"id":"1569566275","weight":12},{"id":"1569566481","weight":3},{"id":"1569565545","weight":5},{"id":"1569566857","weight":3},{"id":"1569565961","weight":2},{"id":"1569566387","weight":3},{"id":"1569566245","weight":6},{"id":"1569560503","weight":5},{"id":"1569565463","weight":4},{"id":"1569564339","weight":4},{"id":"1569566219","weight":4},{"id":"1569565439","weight":5},{"id":"1569566229","weight":7},{"id":"1569566949","weight":4},{"id":"1569566133","weight":3},{"id":"1569562551","weight":3},{"id":"1569563395","weight":3},{"id":"1569566901","weight":3},{"id":"1569551347","weight":3},{"id":"1569565415","weight":3},{"id":"1569555367","weight":4},{"id":"1569561623","weight":13},{"id":"1569566383","weight":4},{"id":"1569564485","weight":10},{"id":"1569565155","weight":6},{"id":"1569566631","weight":7},{"id":"1569565571","weight":5},{"id":"1569565885","weight":4},{"id":"1569566177","weight":8},{"id":"1569565493","weight":7},{"id":"1569557633","weight":8},{"id":"1569564411","weight":4},{"id":"1569566805","weight":6},{"id":"1569559199","weight":2},{"id":"1569566293","weight":8},{"id":"1569565665","weight":5},{"id":"1569566831","weight":11},{"id":"1569565549","weight":3},{"id":"1569565523","weight":9},{"id":"1569565611","weight":4},{"id":"1569557715","weight":6},{"id":"1569564175","weight":5},{"id":"1569566983","weight":9},{"id":"1569566779","weight":3},{"id":"1569566097","weight":5},{"id":"1569566479","weight":3},{"id":"1569556361","weight":7},{"id":"1569566431","weight":5},{"id":"1569565397","weight":3},{"id":"1569566873","weight":5},{"id":"1569565765","weight":12},{"id":"1569565925","weight":11},{"id":"1569565435","weight":8},{"id":"1569557275","weight":4},{"id":"1569565263","weight":5},{"id":"1569566261","weight":2},{"id":"1569565215","weight":5},{"id":"1569565093","weight":2},{"id":"1569565385","weight":20},{"id":"1569565575","weight":3},{"id":"1569565919","weight":9},{"id":"1569565181","weight":4},{"id":"1569566711","weight":12},{"id":"1569565241","weight":12},{"id":"1569566927","weight":8},{"id":"1569565661","weight":4},{"id":"1569565865","weight":4},{"id":"1569566887","weight":5},{"id":"1569565273","weight":8},{"id":"1569566267","weight":3},{"id":"1569564131","weight":2},{"id":"1569552037","weight":3},{"id":"1569564919","weight":11},{"id":"1569565511","weight":2},{"id":"1569566737","weight":6},{"id":"1569566429","weight":6},{"id":"1569561221","weight":2},{"id":"1569564595","weight":2},{"id":"1569566917","weight":8},{"id":"1569566035","weight":2},{"id":"1569566253","weight":2},{"id":"1569565353","weight":4},{"id":"1569564683","weight":7},{"id":"1569564305","weight":10},{"id":"1569564283","weight":5},{"id":"1569564291","weight":4},{"id":"1569566691","weight":3},{"id":"1569565421","weight":11},{"id":"1569566547","weight":7},{"id":"1569566651","weight":4},{"id":"1569565177","weight":5},{"id":"1569566823","weight":4},{"id":"1569566595","weight":2},{"id":"1569566677","weight":2},{"id":"1569565349","weight":2},{"id":"1569552025","weight":3},{"id":"1569566137","weight":5},{"id":"1569565013","weight":3},{"id":"1569565829","weight":4},{"id":"1569566237","weight":2},{"id":"1569566283","weight":3},{"id":"1569566529","weight":5},{"id":"1569565375","weight":3},{"id":"1569566715","weight":4},{"id":"1569565237","weight":3},{"id":"1569566639","weight":3},{"id":"1569566819","weight":2},{"id":"1569565041","weight":5},{"id":"1569564703","weight":7},{"id":"1569566713","weight":2},{"id":"1569565541","weight":5},{"id":"1569565597","weight":2},{"id":"1569566813","weight":8},{"id":"1569565293","weight":2},{"id":"1569566771","weight":7},{"id":"1569564649","weight":8},{"id":"1569564201","weight":5},{"id":"1569562277","weight":23},{"id":"1569566641","weight":7},{"id":"1569565425","weight":7},{"id":"1569564247","weight":2},{"id":"1569564437","weight":8},{"id":"1569566533","weight":4},{"id":"1569563975","weight":2},{"id":"1569551905","weight":3},{"id":"1569564861","weight":7},{"id":"1569565457","weight":2},{"id":"1569564787","weight":6},{"id":"1569566487","weight":6},{"id":"1569565529","weight":11},{"id":"1569556759","weight":7},{"id":"1569566619","weight":8},{"id":"1569565271","weight":3},{"id":"1569561185","weight":9},{"id":"1569566075","weight":4},{"id":"1569566397","weight":7},{"id":"1569566301","weight":2},{"id":"1569558779","weight":6},{"id":"1569565233","weight":3},{"id":"1569563721","weight":3},{"id":"1569566001","weight":3},{"id":"1569565593","weight":6},{"id":"1569560235","weight":3},{"id":"1569566817","weight":5},{"id":"1569564157","weight":3},{"id":"1569565729","weight":5},{"id":"1569566389","weight":2},{"id":"1569566435","weight":5},{"id":"1569567483","weight":3},{"id":"1569566911","weight":2},{"id":"1569564923","weight":6},{"id":"1569565367","weight":3},{"id":"1569566299","weight":8},{"id":"1569564281","weight":3},{"id":"1569564769","weight":4},{"id":"1569565769","weight":7},{"id":"1569566171","weight":6},{"id":"1569566601","weight":2},{"id":"1569565805","weight":7},{"id":"1569561713","weight":8},{"id":"1569566933","weight":2},{"id":"1569563919","weight":8},{"id":"1569566577","weight":5},{"id":"1569557851","weight":5},{"id":"1569565389","weight":2},{"id":"1569559919","weight":4},{"id":"1569565861","weight":7},{"id":"1569566147","weight":7},{"id":"1569565537","weight":5},{"id":"1569559523","weight":4},{"id":"1569566057","weight":3},{"id":"1569562367","weight":4},{"id":"1569560785","weight":16},{"id":"1569565561","weight":6},{"id":"1569565631","weight":3},{"id":"1569560213","weight":9},{"id":"1569566457","weight":2},{"id":"1569555891","weight":2},{"id":"1569566847","weight":2},{"id":"1569565997","weight":6},{"id":"1569563425","weight":2},{"id":"1569565035","weight":17},{"id":"1569559597","weight":4},{"id":"1569564961","weight":8},{"id":"1569559251","weight":5},{"id":"1569567013","weight":3},{"id":"1569566583","weight":5},{"id":"1569561861","weight":8},{"id":"1569565337","weight":3},{"id":"1569564253","weight":2},{"id":"1569565737","weight":6},{"id":"1569560459","weight":4},{"id":"1569564463","weight":2},{"id":"1569565853","weight":5},{"id":"1569550425","weight":6},{"id":"1569566273","weight":3},{"id":"1569564123","weight":8},{"id":"1569566341","weight":3},{"id":"1569565889","weight":4},{"id":"1569566635","weight":3},{"id":"1569566611","weight":6},{"id":"1569551539","weight":7},{"id":"1569564505","weight":6},{"id":"1569565165","weight":3},{"id":"1569565635","weight":7},{"id":"1569561397","weight":5},{"id":"1569565731","weight":6},{"id":"1569566797","weight":11},{"id":"1569566125","weight":3},{"id":"1569566413","weight":6},{"id":"1569565707","weight":6},{"id":"1569565113","weight":4},{"id":"1569566375","weight":4},{"id":"1569565143","weight":2},{"id":"1569564257","weight":8},{"id":"1569565583","weight":9},{"id":"1569566555","weight":3},{"id":"1569564931","weight":2},{"id":"1569565373","weight":9},{"id":"1569566973","weight":6},{"id":"1569561579","weight":5},{"id":"1569566449","weight":2},{"id":"1569566987","weight":2},{"id":"1569565031","weight":4},{"id":"1569564755","weight":2},{"id":"1569551541","weight":4},{"id":"1569566839","weight":7},{"id":"1569551751","weight":3},{"id":"1569558697","weight":2},{"id":"1569565139","weight":5},{"id":"1569565895","weight":2},{"id":"1569566663","weight":4},{"id":"1569564419","weight":2},{"id":"1569565579","weight":3},{"id":"1569566067","weight":4},{"id":"1569566825","weight":8},{"id":"1569566615","weight":2},{"id":"1569566241","weight":2},{"id":"1569564807","weight":6},{"id":"1569566609","weight":4},{"id":"1569563007","weight":4},{"id":"1569566113","weight":8},{"id":"1569566443","weight":4},{"id":"1569565715","weight":3},{"id":"1569566727","weight":12},{"id":"1569565315","weight":5},{"id":"1569565515","weight":3},{"id":"1569566417","weight":3},{"id":"1569560581","weight":6},{"id":"1569559233","weight":8}],"meta":{"jsonClass":"HashMap$HashTrieMap","sessionid":"S4.T4.4","endtime":"18:00","authors":"Yeow Meng Chee, Punarbasu Purkayastha","date":"1341250800000","papertitle":"Efficient Decoding of Permutation Codes Obtained from Distance Preserving Maps","starttime":"17:40","session":"S4.T4: Structured Codes","room":"Stratton 20 Chimneys (306)","paperid":"1569565565"},"cluster":{"jsonClass":"HashMap$HashTrieMap","spectral6":"1","spectral43":"28","spectral28":"7","spectral32":"28","spectral14":"5","spectral20":"12","spectral9":"0","spectral25":"16","spectral42":"36","spectral3":"1","spectral47":"32","spectral17":"7","louvain":"254","spectral36":"31","spectral39":"3","spectral10":"5","spectral15":"4","spectral33":"13","spectral5":"2","spectral21":"17","spectral44":"23","spectral26":"0","spectral40":"37","spectral8":"7","spectral11":"2","spectral4":"3","spectral37":"34","spectral48":"9","spectral22":"1","spectral23":"17","spectral12":"10","spectral50":"42","spectral19":"16","spectral34":"28","spectral45":"4","spectral7":"3","spectral49":"48","spectral38":"28","spectral24":"23","spectral13":"0","spectral31":"25","spectral29":"27","spectral35":"3","spectral30":"1","spectral41":"19","spectral27":"10","spectral18":"3","spectral46":"27","spectral2":"0","spectral16":"7"}}
