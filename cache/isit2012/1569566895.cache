{"id":"1569566895","paper":{"title":{"text":"Regenerating Codes for Errors and Erasures in Distributed Storage"},"authors":[{"name":"K. V. Rashmi"},{"name":"Nihar B. Shah"},{"name":"Kannan Ramchandran"},{"name":"Fellow"},{"name":"IEEE"},{"name":"P. Vijay Kumar"},{"name":"Fellow"},{"name":"IEEE"}],"abstr":{"text":"Abstract\u2014Regenerating codes are a class of codes proposed for providing reliability of data and efﬁcient repair of failed nodes in distributed storage systems. In this paper, we address the fundamental problem of handling errors and erasures during the data-reconstruction and node-repair operations. We provide explicit regenerating codes that are resilient to errors and erasures, and show that these codes are optimal with respect to storage and bandwidth requirements. As a special case, we also establish the capacity of a class of distributed storage systems in the presence of malicious adversaries. While our code constructions are based on previously constructed Product- Matrix codes, we also provide necessary and sufﬁcient conditions for introducing resilience in any regenerating code."},"body":{"text":"Distributed storage systems play a vital role in today\u2019s age of big data. For cost considerations, these storage systems often employ commodity hardware, which makes failures a norm rather than an exception. In order to safeguard the precious data against such failures, the data is typically stored in a redundant manner. In this paper, we consider a distributed storage system consisting of n storage nodes in a network, each having a capacity to store α symbols over a ﬁnite ﬁeld F q . Data comprising B symbols (the message) is to be stored across these n nodes. An end-user (called a data collector) must be able to reconstruct the entire message by downloading the data stored in any k of these n nodes. It follows that such a system can tolerate failure of any (n − k) nodes, and under solely this requirement, can be realised using any [n, k] maximum distance separable (MDS) code.\nFrequent node failures also call for efﬁcient handling of the failure events. When a storage node fails, it is replaced by a new, empty node. This replacement node is required to obtain the data that was stored previously in the failed node, by downloading data from the remaining nodes in the network. We will term this process as repair or regeneration of a node. A typical means of accomplishing this is to download the entire message from the network, and extract the desired data from it. However, downloading the entire message, when it eventually stores only a fraction 1 k of it, is clearly wasteful of the network resources.\n\u2018Regenerating codes\u2019 [1] are a class of codes that aim to reduce the amount of download during repair, while retaining the storage efﬁciency of traditional MDS codes. Under the\nα α α α α\nα α α α α  \nβ   β  \nα   α  \nα α α α α\nα α α α α  \nβ   β  \nα   α  \nFig. 1: An example of the system parameters under a regen- erating code (in the absence of errors/erasures). The system comprises of n = 5 storage nodes: (a) reconstruction is accomplished from any k = 2 nodes, (b) repair from any d = 3 nodes.\noperation of a regenerating code, a replacement node connects to any d (≥ k) existing nodes (termed helper nodes), and downloads β symbols from each. This setting is illustrated in Fig. 1. With regenerating codes, the total amount of data dβ downloaded for repair is much smaller than the total size of the message B. It is shown in [1] that the parameters associated with a regenerating code must necessarily satisfy\nA regenerating code is said to be optimal if it satisﬁes this bound with equality. Since both storage and bandwidth come at a cost, it is naturally desirable to minimize both α as well as β. However, it can be deduced (see [1]) that achieving equality in (1), for ﬁxed values of B and [n, k, d], leads to a tradeoff between the storage space α and the amount of download for repair dβ. The two extreme points in this tradeoff are termed the minimum storage regenerating (MSR) and minimum bandwidth regenerating (MBR) points. These points have been well studied in the literature, and several explicit constructions of codes operating at these points are available [2]\u2013[8]. It has also been shown in [8] that essentially all other points on the tradeoff curve are not achievable.\nIn this paper, we address the problem of handling errors and erasures in distributed storage networks using regenerating codes. In particular, we are interested in codes that can perform reconstruction and efﬁcient repair in the presence of errors and erasures at the nodes or in the links. Such codes are clearly useful in handling errors and packet losses occurring in the network. In addition, such codes can also be used to provide security in distributed storage systems, where malicious adversaries may corrupt the data stored in some nodes in the system.\nThe aspect of security in distributed storage systems em- ploying regenerating codes is studied in [9], where an outer bound is provided for the total amount of data that can be stored securely in the presence of malicious adversaries. The model presented in [9] considers correction of a ﬁxed num- ber of errors, by designing encoding and storage algorithms speciﬁcally for this purpose. It is also shown that the code in [8] achieves this bound with an appropriate choice of the underlying MDS code, for the case d = n − 1 at the MBR point. However, apart from this case, no other constructions of secure regenerating codes are known in the literature.\nIn the present paper, we provide a new approach for handling errors and erasures in regenerating codes. Under our system model, the data is encoded and stored assuming no error/erasure-resiliency requirements. The task of correcting the errors or erasures is performed in the decoding stage by downloading a larger amount of data. In contrast to [9], our approach allows for choosing a different level of resiliency during each event of repair or reconstruction, depending on the prevalent network state. A second advantage of our approach is that it allows for introducing resilience in regenerating codes that were not designed for handling errors and erasures.\nWe present explicit code constructions for the parameters (i) MSR, all [n, k, d ≥ 2k − 2] and (ii) MBR, all [n, k, d]. In addition, we show the optimality of these codes through tight outer bounds on the storage and bandwidth requirements. This establishes the capacity of such systems for these parameters. Moreover, this also establishes the capacity of regenerating codes in the presence of malicious adversaries for these param- eters, which had remained open. The decoding algorithms have a (polynomial) complexity, identical to that of Reed-Solomon codes. The codes presented here are based on a \u2018Product- Matrix\u2019 construction introduced in [2], that also possess other appealing properties such as linearity, scalability, and ease of implementation. An example of an MSR error/erasure-resilient code is depicted in Fig. 2.\nA natural question that follows is whether any regenerating code can be made resilient to errors and erasures in this fash- ion. In this paper, we also answer this question by providing necessary and sufﬁcient conditions for a regenerating code to be resilient to errors and erasures. It turns out that, to date, the product-matrix codes are the only codes that satisfy these properties.\nWhile we were writing this paper, we came across a contemporaneous independent work [10] that is related to the present paper, and deals with byzantine fault tolerance using product-matrix codes of [2]. The authors use a CRC to check the integrity of data during repair and reconstruction, and a feedback scheme to iteratively correct them. However, CRC based schemes are not applicable in settings such as protection against malicious adversaries, since the CRC can also be corrupted by the adversary. The present paper takes a more fundamental look at the problem of handling errors and erasures in regenerating codes.\nThe rest of the paper is organized as follows. The system model is described in Section II, and outer bounds for this model are also provided in this section. Explicit constructions of error-resilient regenerating codes are provided in Section III. Necessary and sufﬁcient conditions for providing error and erasure resiliency in any regenerating code are presented in Section IV.\nWe consider a block-based model where the message is divided into blocks, and there is no coding across the blocks. All operations of encoding, decoding and repair are performed independently across the blocks. Thus the regenerating code parameters (for the error-free case) described in Section I can be considered as pertaining to a single block of data. More concretely, we consider a block to consist of B message symbols, and the storage capacity in each of the n nodes to be α symbols per block. One can reconstruct the B-message symbols by downloading the data pertaining to this block from any subset of k nodes, and regenerate the data stored in any node by downloading β symbols each (pertaining to this block) from any d nodes.\nWe assume that the granularity of any error or erasure is one block. In other words, we assume that during repair, all the β symbols passed by a helper node suffer the same fate: either all these β symbols are erased, or all are in error, or all are perfectly received. Similarly, during reconstruction, all the α symbols passed by a node are assumed to suffer the same fate.\nThe assumption of block errors/erasures can accurately model several scenarios of interest, two of which are described here. Consider handling of packet drops during transmission across a network. The size of a packet during reconstruction\nβ   β   β   β  \nα   α   α  \nα α α α α\nα α α α α  \nβ   β   β   β  \nα   α   α  \nα α α α α\nα α α α α  \nFig. 3: The system setting for an (s = 1, t = 0)-resilient regenerating code with k = 2 and d = 3. Here, connectivity during (a) reconstruction is κ = k + 1 = 3, and (b) repair is ∆ = d + 1 = 3.\nand repair can be assumed to be a multiple of α and β (since the packet size will usually be much larger than these parameters). Thus, when a packet is delayed or dropped, all the α or β symbols corresponding to a block are erased. In the security scenario, to account for compromise of any node or link to a malicious adversary, one needs to protect against corruption of the entire data on that node or link. Thus, we can model the security scenario in our framework by simply considering the entire data as a single block.\nWe note that the absence of this assumption will allow arbitrarily scattered errors and erasures in the model. It can be shown that codes attempting to guard against such scat- tered errors/erasures require signiﬁcantly larger overheads. As discussed above, many applications can be modelled as having block errors, thus avoiding these overheads.\nWe now deﬁne formally, the error/erasure handling capabil- ity of a regenerating code.\nDeﬁnition 1 (( s, t)-resilient code): A regenerating code is (s, t)-resilient if it can correct upto s erasures and t errors during repair as well as reconstruction.\nAs discussed previously, under our system model, errors and erasures are corrected by downloading additional data during reconstruction or repair. One way to obtain additional data is to connect to a larger number of nodes, and we choose this approach. More precisely, we allow a connectivity of ∆ (≥ d) nodes during repair and κ (≥ k) nodes during reconstruction. The parameters ∆ and κ depend on the error/erasure correcting capability expected out of the system. Fig. 3 depicts the (1, 0)- resilient version of the system in Fig. 1.\nWe now provide an outer bound on the capacity of resilient regenerating codes. The bound is obtained by adapting the outer bound of [9] (for the omniscient adversary case) to our system model, and extending it to handle erasures as well.\nTheorem 1: A (s, t)-resilient regenerating code, connecting to ∆ and κ nodes for repair and reconstruction respectively, must satisfy\nProof (sketch): The bound can be derived either using cut-set arguments in an information ﬂow graph as in [1], [9] or using information theoretic arguments as in [8]. The complete\nWe will call an (s, t)-resilient regenerating code as optimal if it meets the bound in Theorem 1. Clearly, for (s, t)- resilience, we need\nwhere (3a) represents the connectivity required during repair, and (3b) during reconstruction.\nIn many applications of interest, it may be desired to provide different levels of reliability during different instances of reconstruction and repair. For instance, under changing network states in the packet erasure setting, or varying threat levels under the security setting. We deﬁne codes that possess such a property as universally resilient codes.\nDeﬁnition 2 (Universally resilient code): A regenerating code is universally resilient if it is simultaneously (s, t)- resilient for all s and t satisfying (3).\nThus a universally resilient code can correct upto s erasures and t errors by downloading β (or α) symbols each from s+2t additional nodes during repair (or reconstruction), as long as d + s + 2t ≤ n − 1 (or k + s + 2t ≤ n).\nIn the next section, we present constructions of product- matrix codes that are universally resilient and optimal. Before moving on to the constructions, we brieﬂy digress to explore some connections with network coding.\nRelation to Network Coding: The regenerating codes prob- lem described above, if relaxed to the requirement of repair of only the systematic nodes, turns out to be a non-multicast network coding problem (see [12, Section I-C]). While the occurrence of errors and erasures in multicast network coding are well studied in the literature [13]\u2013[15], the results of the present paper lead to a class of non-multicast networks for which the error/erasure capacity of the network can be achieved by codes that are linear, deterministic and explicit.\nWe provide explicit constructions of universally resilient MSR and MBR codes for\nwhich meet the outer bound provided in Theorem 1. Thus, this also establishes the capacity of such a system for these parameter values. These codes are based on product-matrix (PM) codes that were introduced in [2].\nAs discussed in Section II, in our approach, the encoding algorithm is identical to the error/erasure free case. Hence, we ﬁrst brieﬂy describe the product-matrix code construction for the error/erasure free case [2], which meets the bound in (1). We then present the decoding algorithms (for both repair and reconstruction) that can handle s erasures and t errors for all values of s and t satisfying (3), with ∆ = (d + s + 2t) and κ = (k + s + 2t). These parameters satisfy the bound in Theorem 1 with equality, thereby establishing the optimality of these codes.\nWe begin with the minimum storage case, and subsequently present the minimum bandwidth case. The example depicted in Fig. 2 is an optimal, universally resilient MSR code.\nMSR codes use the minimum possible storage at each node. Since the data from any k nodes should sufﬁce to reconstruct all the B message symbols, each node must necessarily store at-least a fraction 1 k of the entire data. Hence for an MSR code we have α = B k . To meet the bound (1) with equality (in absence of errors/erasures), an MSR code must satisfy\nIn this section we present explicit constructions of optimal, universally resilient MSR codes for all parameter values [n, k, d ≥ 2k − 2]. The code is designed for the case d = 2k − 2, which can be extended to any d > 2k − 2 via the shortening technique for MSR codes provided in [2], [4]. When d = 2k − 2, from (4), we get\nSince both α and B are multiples of β, we obtain the optimal code for the desired parameters (B, α, β) by ﬁrst constructing an optimal code for\nThe PM-MSR code in [2] can be described in terms of an (n × α ) code matrix C = ΨM , with the i th row of C containing the α symbols stored in node i. The (n × d) encoding matrix Ψ is of the form Ψ = [Φ ΛΦ], where Φ is an (n × α ) matrix and Λ is an (n × n) diagonal matrix satisfying: (a) any α rows of Φ are linearly independent, (b) any d rows of Ψ are linearly independent, and (c) the diagonal elements of Λ are all distinct. The choice of the matrix Ψ governs the choice of the ﬁnite ﬁeld F q , e.g., choosing Ψ as Vandermonde (carefully chosen to satisfy condition (c)) permits any q ≥ 4n. The ((d = 2α ) × α ) message matrix M is of the form M = [S 1 S 2 ] t , where S 1 and S 2 are (α × α ) symmetric matrices. The superscript t is used to denote the transpose of a vector or matrix. The two symmetric matrices S 1 and S 2 together contain α (α +1) distinct elements, which are populated by the B = α (α + 1) message symbols. This completes the description of the encoding algorithm. 1\nThe following theorems show that this code is optimally universally resilient during repair and reconstruction.\nTheorem 1 (MSR Repair): In the MSR code presented, the α symbols stored in any node can be recovered by download- ing β symbols each from any ∆ = d + s + 2t nodes, in the presence of upto s (block) erasures and t (block) errors.\nProof: Since we consider only block errors and erasures, it sufﬁces to describe the repair algorithm for the code with β = 1, and the same algorithm is applied in parallel to obtain the repair algorithm for the desired code. Consider failure of node f in the system, and let φ t f λ f φ t f be the row of Ψ corresponding to the failed node. Thus the α symbols stored in node f are\nThe replacement for the failed node f connects to an arbitrary set {h j | j = 1, . . . , ∆} of ∆ nodes. To facilitate repair of node f , node h j computes the inner product ψ t h\nM φ f and passes on this value to the replacement node. Letting m f = M φ f , we can write the symbol passed by node h j as ψ t h\nm f . Thus the ∆ symbols obtained at the destination are Ψ rep m f , where\nSince any d rows of Ψ are linearly independent by construc- tion, and since Ψ rep comprises a subset of the rows of Ψ, Ψ rep m f is simply an MDS encoding of the d symbols in the vector m f . It follows that this code has a minimum distance of (∆ − d + 1) = (s + 2t + 1) which allows us to recover m f using standard decoding algorithms [16] in the presence of upto s erasures and t errors. Thus the replacement node now has access to\nSince S 1 and S 2 are symmetric matrices, the replacement node has access to φ t f S 1 and φ t f S 2 . Using this it can obtain φ t f S 1 + λ f φ t f S 2 , which is precisely the data previously stored in node f .\nTheorem 2 (MSR Reconstruction): In the MSR code pre- sented, a data-collector can reconstruct all the B message symbols by downloading data stored in any κ = k + s + 2t nodes in the presence of upto s (block) erasures and t (block) errors.\nProof (sketch): The data reconstruction property of the code in the error-free case, as shown in [2], implies that the data passed by the κ nodes are MDS over the ﬁnite ﬁeld F α q . Over this ﬁnite ﬁeld, the message is of size k, and the mini- mum distance of this MDS code is (κ − k + 1) = (s + 2t + 1). This guarantees reconstruction of the k source symbols over F α q , and equivalently the kα = B source symbols over F q , in the presence of upto s erasures and t errors.\nMBR codes achieve minimum possible download during repair: a replacement node downloads only what it stores, resulting in dβ = α. To meet the bound (1) with equality (in absence of errors/erasures) an MBR code must satisfy\nIn this section we present explicit constructions of optimal, universally resilient MBR codes for all parameter values [n, k, d]. As in the MSR case, B and α are multiples of β, and we ﬁrst construct codes for\nThe desired code can be obtained by concatenating β copies of this code.\nThe PM-MBR code in [2] has a similar form, C = Ψ M , as the PM-MSR code. The MBR code has the (n × d) encoding matrix Ψ of the form Ψ = [Φ Σ], where Φ is an (n × k) matrix satisfying: (a) any k rows of Φ are linearly independent, (b) any d rows of Ψ are linearly independent. For instance, one can choose Ψ to be a Vandermonde matrix. The (d × d) message matrix M is symmetric and consists of the B\nHere, the ((d − k) × k) matrix T and the (k × k) symmetric matrix S contain the B = kd − k 2 = k(d − k) + k(k+1) 2 message symbols as their elements.\nThe following theorems show that this code is optimally universally resilient during repair and reconstruction.\nTheorem 3 (MBR Repair): In the MBR code presented, the α symbols stored in any node can be recovered by download- ing β symbols each from any ∆ = (d + s + 2t) nodes, in the presence of upto s (block) erasures and t (block) errors.\nProof: As in the case of MSR, it is sufﬁcient to describe the repair algorithm for the code with β = 1. Consider failure of node f in the system, and let ψ t f be the row of Ψ corresponding to the failed node. Thus the α symbols stored in node f are ψ t f M . We will follow the notation as in Theorem 1. The helper node h j passes the symbol ψ t h\nM ψ f . Denoting m f = M ψ f , the ∆ symbols obtained at the destination can be written as Ψ rep m f where\nBy construction, Ψ rep m f corresponds to an MDS encoding of the vector m f . As in the case of MSR, this code has minimum distance of (∆−d+1) = (s+2t+1) which allows us to recover m f in the presence of upto s erasures and t errors. Since the message matrix M is symmetric, m t f = ψ t f M t = ψ t f M is precisely the set of α symbols required.\nTheorem 4 (MBR Reconstruction): In the MBR code pre- sented, a data-collector can reconstruct all the B message symbols by downloading data stored in any κ = (k + s + 2t) nodes in the presence of upto s (block) erasures and t (block) errors.\nProof (sketch): As in the MSR case, the proof exploits the reconstruction property of PM-MBR codes in the error-free case [2]. The reconstruction property implies that, over F α q , the minimum distance of the code is (κ − k + 1) = (s + 2t + 1). This guarantees reconstruction of the k symbols over F α q , and equivalently the B source symbols over F q , in the presence of upto s erasures and t errors.\nThe conversion of the product-matrix codes into universally resilient codes, as described in Section III, raises a natural question as to whether any regenerating code can be made universally resilient in a similar manner. We answer this question by providing a necessary and sufﬁcient condition for\nthe same. To the best of our knowledge, the only codes today that satisfy this condition are the product-matrix codes.\nTheorem 5: An [n, k, d] regenerating code can be made universally resilient if and only if the following condition holds: during any instance of repair, the data passed by a node h helping in the repair, to the failed node f , depends only on h and f , and not on the identities of the other nodes helping in this repair.\nRemark 1: Clearly, since the number of nodes contacted during repair must satisfy (d + s + 2t) ≤ (n − 1), the requirement of having either s > 0 or t > 0 requires that n > (d + 1). Thus the code should not restrict the number of nodes n to be (d − 1).\nThe only explicit regenerating codes that support n > (d+1) are the high-rate \u2018approximately-exact\u2019 MSR codes of [3] and the product-matrix codes [2]. However, the MSR codes of [3] do not satisfy the condition provided in Theorem 5. As shown in Section III, the product-matrix codes satisfy this condition.\nThe authors would like to thank Salim El Rouayheb and Sameer Pawar for fruitful discussions."},"refs":[{"authors":[{"name":"A. G. Dimakis"},{"name":"P. B. Godfrey"},{"name":"Y. Wu"},{"name":"M. Wainwright"},{"name":"K. Ramchan- dran"}],"title":{"text":"Network coding for distributed storage systems"}},{"authors":[{"name":"K. V. Rashmi"},{"name":"N. B. Shah"},{"name":"P. V. Kumar"}],"title":{"text":"Optimal exact-regenerating codes for the MSR and MBR points via a product-matrix construction"}},{"authors":[{"name":"K. V. Rashmi"},{"name":"N. B. Shah"},{"name":"P. V. Kumar"},{"name":"K. Ramchandran"}],"title":{"text":"Explicit construction of optimal exact regenerating codes for distributed storage"}},{"authors":[{"name":"N. B. Shah"},{"name":"K. V. Rashmi"},{"name":"P. V. Kumar"},{"name":"K. Ramchandran"}],"title":{"text":"Explicit codes minimizing repair bandwidth for distributed storage"}},{"authors":[{"name":"C. Suh"},{"name":"K. Ramchandran"}],"title":{"text":"Exact regeneration codes for distributed storage repair using interference alignment"}},{"authors":[{"name":"I. Tamo"},{"name":"Z. Wang"},{"name":"J. Bruck"}],"title":{"text":"MDS array codes with optimal rebuilding"}},{"authors":[{"name":"D. Papailiopoulos"},{"name":"A. Dimakis"},{"name":"V. Cadambe"}],"title":{"text":"Repair optimal erasure codes through hadamard designs"}},{"authors":[{"name":"N. B. Shah"},{"name":"K. V. Rashmi"},{"name":"P. V. Kumar"},{"name":"K. Ramchandran"}],"title":{"text":"Dis- tributed storage codes with repair-by-transfer and non-achievability of interior points on the storage-bandwidth tradeoff"}},{"authors":[{"name":"S. Pawar"},{"name":"S. El Rouayheb"},{"name":"K. Ramchandran"}],"title":{"text":"Securing dynamic dis- tributed storage systems against eavesdropping and adversarial attacks"}},{"authors":[{"name":"Y. Han"},{"name":"R. Zheng"},{"name":"W. Mow"}],"title":{"text":"Exact regenerating codes for byzantine fault tolerance in distributed storage"}},{"authors":[{"name":"K. V. Rashmi"},{"name":"N. B. Shah"},{"name":"K. Ramchandran"},{"name":"P. V. Kumar"}],"title":{"text":"Uncon- ditionally secure storage-bandwidth optimal distributed storage codes"}},{"authors":[{"name":"N. B. Shah"},{"name":"K. V. Rashmi"},{"name":"P. V. Kumar"},{"name":"K. Ramchandran"}],"title":{"text":"Interfer- ence alignment in regenerating codes for distributed storage: Necessity and code constructions"}},{"authors":[{"name":"N. Cai"},{"name":"R. Yeung"}],"title":{"text":"Network error correction, ii: Lower bounds"}},{"authors":[{"name":"S. Jaggi"},{"name":"M. Langberg"},{"name":"S. Katti"},{"name":"T. Ho"},{"name":"D. Katabi"},{"name":"M. M´edard"}],"title":{"text":"Resilient network coding in the presence of byzantine adversaries"}},{"authors":[{"name":"R. Koetter"},{"name":"F. Kschischang"}],"title":{"text":"Coding for errors and erasures in random network coding"}},{"authors":[{"name":"F. MacWilliam"},{"name":"N. Sloan"}],"title":{"text":"The Theory of Error-Correcting Codes, Part I "}}]},"file":{"jsonClass":"File","file":"/home/arnfred/Code/trailhead/resources/isit2012/1569566895.pdf"},"links":[{"id":"1569566567","weight":5},{"id":"1569564843","weight":7},{"id":"1569566527","weight":2},{"id":"1569566485","weight":2},{"id":"1569565383","weight":2},{"id":"1569565883","weight":9},{"id":"1569564889","weight":3},{"id":"1569565223","weight":2},{"id":"1569566725","weight":5},{"id":"1569565377","weight":2},{"id":"1569566385","weight":3},{"id":"1569565867","weight":4},{"id":"1569566799","weight":3},{"id":"1569565067","weight":2},{"id":"1569559665","weight":3},{"id":"1569561021","weight":2},{"id":"1569564669","weight":7},{"id":"1569565691","weight":6},{"id":"1569566875","weight":2},{"id":"1569564605","weight":3},{"id":"1569559617","weight":3},{"id":"1569566981","weight":3},{"id":"1569566321","weight":3},{"id":"1569566605","weight":5},{"id":"1569566683","weight":5},{"id":"1569566855","weight":3},{"id":"1569566869","weight":2},{"id":"1569565097","weight":3},{"id":"1569566227","weight":6},{"id":"1569566091","weight":4},{"id":"1569559259","weight":5},{"id":"1569566697","weight":3},{"id":"1569566597","weight":3},{"id":"1569565551","weight":3},{"id":"1569565711","weight":2},{"id":"1569566761","weight":3},{"id":"1569566943","weight":4},{"id":"1569565091","weight":13},{"id":"1569566591","weight":6},{"id":"1569566571","weight":6},{"id":"1569552245","weight":5},{"id":"1569565607","weight":3},{"id":"1569565495","weight":11},{"id":"1569559967","weight":3},{"id":"1569567045","weight":3},{"id":"1569565227","weight":2},{"id":"1569564481","weight":4},{"id":"1569560833","weight":3},{"id":"1569566415","weight":3},{"id":"1569564805","weight":10},{"id":"1569567005","weight":3},{"id":"1569566469","weight":2},{"id":"1569566081","weight":11},{"id":"1569565613","weight":4},{"id":"1569564469","weight":2},{"id":"1569565931","weight":3},{"id":"1569566373","weight":4},{"id":"1569566647","weight":2},{"id":"1569551535","weight":4},{"id":"1569566765","weight":2},{"id":"1569564897","weight":3},{"id":"1569565775","weight":4},{"id":"1569566871","weight":5},{"id":"1569566653","weight":2},{"id":"1569565461","weight":3},{"id":"1569564731","weight":2},{"id":"1569565171","weight":3},{"id":"1569566207","weight":8},{"id":"1569564227","weight":2},{"id":"1569558325","weight":6},{"id":"1569565837","weight":4},{"id":"1569566671","weight":3},{"id":"1569566303","weight":2},{"id":"1569564233","weight":4},{"id":"1569566459","weight":6},{"id":"1569567535","weight":2},{"id":"1569563411","weight":6},{"id":"1569560427","weight":3},{"id":"1569564849","weight":8},{"id":"1569559541","weight":5},{"id":"1569565317","weight":2},{"id":"1569566319","weight":2},{"id":"1569565123","weight":2},{"id":"1569566941","weight":3},{"id":"1569566033","weight":2},{"id":"1569558459","weight":4},{"id":"1569565609","weight":2},{"id":"1569565291","weight":5},{"id":"1569564203","weight":6},{"id":"1569566821","weight":6},{"id":"1569556713","weight":3},{"id":"1569562685","weight":2},{"id":"1569566467","weight":3},{"id":"1569566157","weight":2},{"id":"1569566903","weight":3},{"id":"1569566999","weight":2},{"id":"1569565859","weight":3},{"id":"1569564249","weight":3},{"id":"1569565809","weight":56},{"id":"1569566843","weight":3},{"id":"1569566579","weight":2},{"id":"1569558483","weight":2},{"id":"1569566563","weight":7},{"id":"1569566089","weight":2},{"id":"1569559221","weight":2},{"id":"1569556091","weight":2},{"id":"1569565347","weight":2},{"id":"1569566925","weight":4},{"id":"1569564387","weight":6},{"id":"1569565455","weight":4},{"id":"1569566497","weight":16},{"id":"1569566795","weight":5},{"id":"1569566963","weight":3},{"id":"1569561679","weight":6},{"id":"1569566709","weight":3},{"id":"1569564989","weight":4},{"id":"1569566787","weight":3},{"id":"1569566015","weight":10},{"id":"1569565897","weight":6},{"id":"1569551763","weight":3},{"id":"1569565953","weight":6},{"id":"1569566889","weight":2},{"id":"1569566749","weight":2},{"id":"1569566269","weight":4},{"id":"1569564189","weight":3},{"id":"1569564195","weight":2},{"id":"1569561513","weight":3},{"id":"1569566985","weight":2},{"id":"1569564613","weight":3},{"id":"1569567009","weight":5},{"id":"1569566865","weight":3},{"id":"1569565321","weight":7},{"id":"1569558785","weight":2},{"id":"1569564647","weight":3},{"id":"1569566095","weight":2},{"id":"1569566193","weight":8},{"id":"1569564337","weight":4},{"id":"1569565907","weight":2},{"id":"1569566343","weight":2},{"id":"1569564311","weight":2},{"id":"1569565803","weight":3},{"id":"1569565785","weight":4},{"id":"1569566239","weight":3},{"id":"1569566167","weight":2},{"id":"1569566679","weight":17},{"id":"1569565989","weight":7},{"id":"1569566575","weight":5},{"id":"1569563981","weight":3},{"id":"1569566617","weight":5},{"id":"1569559565","weight":4},{"id":"1569566905","weight":4},{"id":"1569563307","weight":4},{"id":"1569566063","weight":7},{"id":"1569558681","weight":4},{"id":"1569555999","weight":4},{"id":"1569566759","weight":2},{"id":"1569559195","weight":3},{"id":"1569566149","weight":4},{"id":"1569559995","weight":2},{"id":"1569566657","weight":4},{"id":"1569558859","weight":8},{"id":"1569565199","weight":9},{"id":"1569565365","weight":4},{"id":"1569566643","weight":5},{"id":"1569566511","weight":3},{"id":"1569566719","weight":2},{"id":"1569565841","weight":7},{"id":"1569566369","weight":3},{"id":"1569566531","weight":7},{"id":"1569567665","weight":8},{"id":"1569561143","weight":4},{"id":"1569566581","weight":2},{"id":"1569565833","weight":3},{"id":"1569566489","weight":2},{"id":"1569564611","weight":3},{"id":"1569565535","weight":6},{"id":"1569562867","weight":9},{"id":"1569566395","weight":5},{"id":"1569566845","weight":2},{"id":"1569566325","weight":13},{"id":"1569566423","weight":5},{"id":"1569564795","weight":7},{"id":"1569567015","weight":3},{"id":"1569559805","weight":4},{"id":"1569566437","weight":3},{"id":"1569558901","weight":3},{"id":"1569565735","weight":4},{"id":"1569553909","weight":4},{"id":"1569559111","weight":3},{"id":"1569553537","weight":4},{"id":"1569565427","weight":3},{"id":"1569566403","weight":3},{"id":"1569565915","weight":2},{"id":"1569552251","weight":3},{"id":"1569553519","weight":2},{"id":"1569567051","weight":2},{"id":"1569566885","weight":2},{"id":"1569564441","weight":2},{"id":"1569566231","weight":4},{"id":"1569566513","weight":2},{"id":"1569566425","weight":3},{"id":"1569554881","weight":2},{"id":"1569554971","weight":3},{"id":"1569565501","weight":4},{"id":"1569566445","weight":2},{"id":"1569566209","weight":3},{"id":"1569566649","weight":4},{"id":"1569565559","weight":2},{"id":"1569566371","weight":2},{"id":"1569565655","weight":4},{"id":"1569566909","weight":2},{"id":"1569566127","weight":2},{"id":"1569565151","weight":5},{"id":"1569558985","weight":2},{"id":"1569563763","weight":2},{"id":"1569565087","weight":52},{"id":"1569566473","weight":11},{"id":"1569564857","weight":37},{"id":"1569564333","weight":2},{"id":"1569566913","weight":4},{"id":"1569566809","weight":4},{"id":"1569566629","weight":2},{"id":"1569566257","weight":7},{"id":"1569565033","weight":4},{"id":"1569566447","weight":2},{"id":"1569566357","weight":2},{"id":"1569565817","weight":3},{"id":"1569565847","weight":19},{"id":"1569564353","weight":3},{"id":"1569563897","weight":2},{"id":"1569566141","weight":4},{"id":"1569565055","weight":2},{"id":"1569565633","weight":5},{"id":"1569566661","weight":2},{"id":"1569565279","weight":4},{"id":"1569555879","weight":4},{"id":"1569566115","weight":5},{"id":"1569565219","weight":4},{"id":"1569558509","weight":3},{"id":"1569565595","weight":2},{"id":"1569565185","weight":9},{"id":"1569566773","weight":5},{"id":"1569566037","weight":2},{"id":"1569566223","weight":5},{"id":"1569558401","weight":2},{"id":"1569566553","weight":6},{"id":"1569564973","weight":2},{"id":"1569564969","weight":2},{"id":"1569565029","weight":9},{"id":"1569565357","weight":2},{"id":"1569566505","weight":6},{"id":"1569565933","weight":3},{"id":"1569562207","weight":2},{"id":"1569566191","weight":2},{"id":"1569567033","weight":3},{"id":"1569565527","weight":3},{"id":"1569566853","weight":4},{"id":"1569566603","weight":5},{"id":"1569567029","weight":3},{"id":"1569565363","weight":2},{"id":"1569566159","weight":3},{"id":"1569566695","weight":4},{"id":"1569566051","weight":9},{"id":"1569561379","weight":2},{"id":"1569565909","weight":2},{"id":"1569561123","weight":11},{"id":"1569565467","weight":2},{"id":"1569566673","weight":2},{"id":"1569567235","weight":2},{"id":"1569565441","weight":4},{"id":"1569565311","weight":4},{"id":"1569566667","weight":2},{"id":"1569566893","weight":3},{"id":"1569566317","weight":8},{"id":"1569560997","weight":4},{"id":"1569563845","weight":3},{"id":"1569566407","weight":4},{"id":"1569560349","weight":3},{"id":"1569566501","weight":3},{"id":"1569565741","weight":3},{"id":"1569566275","weight":7},{"id":"1569566481","weight":13},{"id":"1569565545","weight":5},{"id":"1569566857","weight":11},{"id":"1569565961","weight":5},{"id":"1569566387","weight":2},{"id":"1569566245","weight":4},{"id":"1569560503","weight":3},{"id":"1569566219","weight":3},{"id":"1569565439","weight":2},{"id":"1569566229","weight":2},{"id":"1569566133","weight":2},{"id":"1569562551","weight":2},{"id":"1569563395","weight":2},{"id":"1569551347","weight":3},{"id":"1569565415","weight":6},{"id":"1569555367","weight":3},{"id":"1569561623","weight":3},{"id":"1569566383","weight":2},{"id":"1569564485","weight":2},{"id":"1569565155","weight":2},{"id":"1569566631","weight":4},{"id":"1569565571","weight":7},{"id":"1569565885","weight":2},{"id":"1569566177","weight":4},{"id":"1569565493","weight":6},{"id":"1569557633","weight":2},{"id":"1569564411","weight":6},{"id":"1569566805","weight":5},{"id":"1569559199","weight":3},{"id":"1569566293","weight":2},{"id":"1569565665","weight":3},{"id":"1569566831","weight":2},{"id":"1569565549","weight":2},{"id":"1569565523","weight":3},{"id":"1569565611","weight":2},{"id":"1569557715","weight":2},{"id":"1569564175","weight":2},{"id":"1569566983","weight":2},{"id":"1569566779","weight":4},{"id":"1569566097","weight":3},{"id":"1569566479","weight":12},{"id":"1569556361","weight":2},{"id":"1569566431","weight":2},{"id":"1569565397","weight":2},{"id":"1569566873","weight":5},{"id":"1569565765","weight":4},{"id":"1569565925","weight":9},{"id":"1569565435","weight":2},{"id":"1569565263","weight":2},{"id":"1569565215","weight":2},{"id":"1569565093","weight":3},{"id":"1569565385","weight":6},{"id":"1569565919","weight":3},{"id":"1569565181","weight":6},{"id":"1569566711","weight":8},{"id":"1569565241","weight":2},{"id":"1569566927","weight":14},{"id":"1569565661","weight":2},{"id":"1569565865","weight":4},{"id":"1569566887","weight":46},{"id":"1569565273","weight":2},{"id":"1569552037","weight":2},{"id":"1569564919","weight":6},{"id":"1569566737","weight":5},{"id":"1569566429","weight":2},{"id":"1569561221","weight":2},{"id":"1569564595","weight":3},{"id":"1569566917","weight":9},{"id":"1569566035","weight":7},{"id":"1569565353","weight":8},{"id":"1569564683","weight":2},{"id":"1569564305","weight":4},{"id":"1569564283","weight":3},{"id":"1569564291","weight":4},{"id":"1569566691","weight":4},{"id":"1569565421","weight":3},{"id":"1569566547","weight":8},{"id":"1569566651","weight":2},{"id":"1569566823","weight":4},{"id":"1569566677","weight":3},{"id":"1569565349","weight":8},{"id":"1569552025","weight":2},{"id":"1569566137","weight":4},{"id":"1569566283","weight":4},{"id":"1569566529","weight":6},{"id":"1569565375","weight":3},{"id":"1569566715","weight":2},{"id":"1569565237","weight":3},{"id":"1569566639","weight":2},{"id":"1569566819","weight":2},{"id":"1569565041","weight":3},{"id":"1569564703","weight":3},{"id":"1569565541","weight":2},{"id":"1569566813","weight":6},{"id":"1569566771","weight":5},{"id":"1569564201","weight":2},{"id":"1569562277","weight":2},{"id":"1569566641","weight":5},{"id":"1569565425","weight":4},{"id":"1569564247","weight":2},{"id":"1569564437","weight":3},{"id":"1569566533","weight":7},{"id":"1569551905","weight":2},{"id":"1569564861","weight":28},{"id":"1569565457","weight":3},{"id":"1569564787","weight":2},{"id":"1569566487","weight":5},{"id":"1569565529","weight":11},{"id":"1569556759","weight":3},{"id":"1569566619","weight":3},{"id":"1569561185","weight":2},{"id":"1569566075","weight":3},{"id":"1569566397","weight":5},{"id":"1569566301","weight":7},{"id":"1569558779","weight":2},{"id":"1569563721","weight":4},{"id":"1569565593","weight":3},{"id":"1569566817","weight":4},{"id":"1569564157","weight":2},{"id":"1569566389","weight":3},{"id":"1569567483","weight":2},{"id":"1569564923","weight":11},{"id":"1569565367","weight":2},{"id":"1569566299","weight":4},{"id":"1569564281","weight":2},{"id":"1569565039","weight":2},{"id":"1569564769","weight":5},{"id":"1569565769","weight":5},{"id":"1569566171","weight":2},{"id":"1569566601","weight":8},{"id":"1569565805","weight":3},{"id":"1569563919","weight":5},{"id":"1569566577","weight":4},{"id":"1569557851","weight":2},{"id":"1569559919","weight":4},{"id":"1569565861","weight":4},{"id":"1569566147","weight":6},{"id":"1569565537","weight":2},{"id":"1569566057","weight":5},{"id":"1569560785","weight":5},{"id":"1569565561","weight":7},{"id":"1569560213","weight":3},{"id":"1569566457","weight":4},{"id":"1569555891","weight":3},{"id":"1569565997","weight":5},{"id":"1569563425","weight":2},{"id":"1569565035","weight":11},{"id":"1569559597","weight":2},{"id":"1569564961","weight":8},{"id":"1569559251","weight":2},{"id":"1569567013","weight":5},{"id":"1569561861","weight":2},{"id":"1569565337","weight":3},{"id":"1569565737","weight":2},{"id":"1569560459","weight":6},{"id":"1569564463","weight":2},{"id":"1569565853","weight":8},{"id":"1569550425","weight":12},{"id":"1569566273","weight":6},{"id":"1569564123","weight":15},{"id":"1569566341","weight":2},{"id":"1569565889","weight":3},{"id":"1569566635","weight":8},{"id":"1569566611","weight":2},{"id":"1569551539","weight":2},{"id":"1569564505","weight":4},{"id":"1569565165","weight":5},{"id":"1569565565","weight":6},{"id":"1569565635","weight":3},{"id":"1569561397","weight":3},{"id":"1569565731","weight":2},{"id":"1569556327","weight":2},{"id":"1569566797","weight":7},{"id":"1569566413","weight":2},{"id":"1569565707","weight":6},{"id":"1569565113","weight":4},{"id":"1569566375","weight":3},{"id":"1569565143","weight":2},{"id":"1569564257","weight":3},{"id":"1569565583","weight":14},{"id":"1569566555","weight":6},{"id":"1569564931","weight":2},{"id":"1569565373","weight":5},{"id":"1569566973","weight":7},{"id":"1569561579","weight":2},{"id":"1569566449","weight":2},{"id":"1569566987","weight":2},{"id":"1569565031","weight":3},{"id":"1569551541","weight":3},{"id":"1569565619","weight":2},{"id":"1569566839","weight":3},{"id":"1569551751","weight":2},{"id":"1569565139","weight":11},{"id":"1569566663","weight":3},{"id":"1569565579","weight":6},{"id":"1569566067","weight":4},{"id":"1569566825","weight":6},{"id":"1569566241","weight":8},{"id":"1569564807","weight":2},{"id":"1569566609","weight":2},{"id":"1569563007","weight":2},{"id":"1569566113","weight":8},{"id":"1569566443","weight":4},{"id":"1569566727","weight":12},{"id":"1569565315","weight":5},{"id":"1569566417","weight":4},{"id":"1569560581","weight":4},{"id":"1569559233","weight":2}],"meta":{"jsonClass":"HashMap$HashTrieMap","sessionid":"S7.T5.5","endtime":"16:20","authors":"K. v. Rashmi, Nihar B Shah, Kannan Ramchandran, P Vijay Kumar","date":"1341331200000","papertitle":"Regenerating Codes for Errors and Erasures in Distributed Storage","starttime":"16:00","session":"S7.T5: Regenerating Codes","room":"Kresge Little Theatre (035)","paperid":"1569566895"},"cluster":{"jsonClass":"HashMap$HashTrieMap","spectral6":"3","spectral43":"17","spectral28":"23","spectral32":"19","spectral14":"8","spectral20":"7","spectral9":"8","spectral25":"22","spectral42":"23","spectral3":"1","spectral47":"40","spectral17":"4","louvain":"31","spectral36":"23","spectral39":"7","spectral10":"2","spectral15":"14","spectral33":"23","spectral5":"2","spectral21":"2","spectral44":"40","spectral26":"20","spectral40":"36","spectral8":"2","spectral11":"1","spectral4":"3","spectral37":"24","spectral48":"35","spectral22":"18","spectral23":"22","spectral12":"7","spectral50":"25","spectral19":"9","spectral34":"5","spectral45":"5","spectral7":"6","spectral49":"30","spectral38":"9","spectral24":"11","spectral13":"2","spectral31":"29","spectral29":"6","spectral35":"17","spectral30":"5","spectral41":"22","spectral27":"14","spectral18":"6","spectral46":"45","spectral2":"0","spectral16":"3"}}
