{"id":"1569565199","paper":{"title":{"text":"A Two Stage Selective Averaging LDPC Decoding"},"authors":[{"name":"Dinesh Kumar. A"},{"name":"Ambedkar Dukkipati"}],"abstr":{"text":"Abstract\u2014 Low density parity-check (LDPC) codes are a class of linear block codes that are decoded by running belief propa- gation (BP) algorithm or log-likelihood ratio belief propagation (LLR-BP) over the factor graph of the code. One of the disadvantages of LDPC codes is the onset of an error ﬂoor at high values of signal to noise ratio caused by trapping sets. In this paper, we propose a two stage decoder to deal with different types of trapping sets. Oscillating trapping sets are taken care by the ﬁrst stage of the decoder and the elementary trapping sets are handled by the second stage of the decoder. Simulation results on the regular PEG (504,252,3,6) code and the irregular PEG (1024,518,15,8) code shows that the proposed two stage decoder performs signiﬁcantly better than the standard decoder."},"body":{"text":"A Low Density Parity-Check (LDPC) code can be described by a parity-check matrix H that is represented using a special type of graph called factor graph. A factor graph is a bipartite graph composed of N variable nodes v j , for j ∈ {1, . . . , N } that represent the message bits in the codeword and M check nodes c i , for i ∈ {1, . . . , M } that represent the parity-check equations. We use the notation PEG (N, M, x, y) where N is the number of variable nodes, M is the number of check nodes, x and y represent the maximum degree of the variable nodes and maximum degree of the check nodes respectively. The channel considered here is an additive white Gaussian noise (AWGN) channel. We use the log likelihood ratio belief propagation (LLR-BP) algorithm for decoding. Let m (l) v i c j be the message passed from variable node v i to check node c j at iteration l of the algorithm. Similarly, one can deﬁne m (l) c j v i . The initial values of the message m (0) v i c j is equal to the channel information log likelihood ratio (LLR) C v i of the variable node v i and it is independent of c j .\nThe main problem with LDPC codes is the high error ﬂoor in high signal to noise ratio (SNR) which is caused by existence of trapping sets [1]. In this paper, we propose a two stage decoder that in the ﬁrst stage averages the messages from the selected variable nodes over two iterations. The nodes are selected if the belief in the node is decreasing below a certain threshold or if the belief is increasing rapidly. The decoded string is checked if it has converged to a valid code word in each iteration. If the decoded string has not converged to a valid code word even after maximum number of iterations and the number of check nodes that are not satisﬁed is below a certain threshold, we proceed to the second stage of the decoder where we ﬂip certain bits connected to the unsatisﬁed check nodes. Then the ﬁrst stage of the decoding process is repeated for the processed string.\nThe paper is organized as follows. § II provides the necessary background for understanding the error ﬂoor in LDPC codes and the recent literature on tackling this problem. § III proposes our two stage decoder and analyses how they improve the performance from the trapping set point of view. § IV gives the simulation results to prove that the proposed algorithm does better than averaging decoder and standard decoder. We provide the concluding remarks in § V.\nError ﬂoor was analyzed in the context of trapping sets by Mackay [2]. Later, Richardson [1] showed that trapping sets exhibit a strong inﬂuence on the slope of the error-ﬂoor of LDPC codes.\nTrapping set is deﬁned as follows. A Trapping set (x, y) is an induced subgraph of x variable nodes with y ≥ 0 odd degree check nodes [3].\nAn example of a trapping set is illustrated in Figure 1. In the above ﬁgure we can see six variable nodes and two unsatisﬁed check nodes.\nThere are three types of error events in the error ﬂoor region [3]. They are (i) unstable error events - dynamic errors which changes with iterations and have large x and y, (ii) stable or elementary trapping sets - main cause of error ﬂoor in high SNR values. It has small x and y values, and (iii) oscillating trapping sets - the number of trapping set error oscillate with iteration, some times subsets of stable trapping sets.\nThe error-ﬂoor can be explained due to the following phenomena [4], In the initial stages of the decoder, due to certain noise samples, variables nodes that belong to one particular trapping set (initial trapping set) increase their belief on wrong bit value rapidly. This affects the other variable nodes in the induced subgraph of the trapping set that already have a low belief value. As the decoder iterates, the variables\noutside of the trapping set starts to correct the affected variable nodes. But this is not enough as these nodes are signiﬁcantly biased towards the wrong bit values. Since the number of check nodes that can detect the trapping set error are small (small y value in elementary trapping set), the trapping set error persists till the end of decoding process.\nThe trapping sets are union of several cycles. One of the most prevalent types of error in the waterfall region are oscillating trapping sets that cause the LLR values of some nodes to oscillate. This could be due to two or more cycles passing through the same node. When the messages iterating in different cycles supporting different bit values arrive at the same variable node at distinct times, the LLR values seems to oscillate.\nA lot of research has gone into designing decoders to mitigate the errors caused by the trapping sets. The decoders are designed in such a way that the computational complexity of the modiﬁed decoder is not high compared to the standard decoder.\nIn [4], the problems caused by trapping sets and why the decoder fails in overcoming these problems are studied. Landner et al. [4], [5] propose an averaging decoder that averages the probability of a node over several iterations (averaging of LLR discussed in [5]).\nAveraging prevents the erroneous information from being trapped in the code graph by slowing down the convergence speed of the nodes. This modiﬁed decoder is tested on [2640,1320] Margulis code at 2.4 dB SNR. It is reported in previous studies [2], [1] that this SNR is the onset of the error ﬂoor for the Margulis code. This method though computationally less complex, it slows down the convergence of the reliable nodes. This affects the performance of the decoder in the waterfall region as oscillating trapping sets are prevalent in this region than the elementary trapping sets.\nIn [6], the BP algorithm is well studied in the point of view of the Bethe energy and how it fails in the presence of cycles. They propose a BP algorithm with a tunable parameter ∆ and a modiﬁcation to the outgoing message from the variable node.\nwhere K = |N (v i )|, is the degree of the node v i . On adjusting the parameter ∆ at different SNR points, they are able to achieve performance better than the standard BP decoder. This modiﬁcation also follows the same principle as the averaging decoder by slowing down the information ﬂow to prevent the trapping of the erroneous information.\nThe work put forward in [7] concentrates on short and middle length LDPC codes as they are largely affected by cycles in the graph. These cycles result in oscillation of the LLR values in the nodes. They propose to modify the outgoing messages from the variable nodes v i\nThis modiﬁcation helps in damping the oscillation, but their method does not handle the errors caused by elementary trapping sets.\nA two stage decoder was proposed in [8] [9], in which the conventional decoding process is performed as the ﬁrst stage. If the decoder fails after the maximum number of iterations, then it is concluded that the result of the failure is due to a trapping set. If the number of unsatisﬁed check nodes is below a certain threshold, then the decoder enters the second stage. In the second stage, using the fact that an unsatisﬁed check node will have odd number of variable nodes connected to it in the trapping set (one bit in most notorious case), a set of matching sets Ψ of variable nodes is constructed. All the variable nodes that belong to a matching set ψ ∈ Ψ are assigned inital log likelihood ratios (LLR\u2019s) to the maximum possible value with opposite signs, and the ﬁrst stage is repeated again. This process is repeated for all the members of the set Ψ or till the trapping set error is corrected. Since the trapping set is considered as an unstable equilibrium, ﬂipping one or two bits is enough for breaking the trapping set. But this decoder is a very complex decoder and in the worst case it may have to be repeated for all the member of the set Ψ. On setting the variable nodes initial LLR\u2019s to a maximum value we introduce external noise into the system which is not recommended. As this decoder only deals with trapping sets with very few unsatisﬁed check nodes, they do not solve the errors due to oscillating trapping sets.\nThere are also some modiﬁcation proposed to the schedule of the BP algorithm [10] [11]. In [10], they propose a sequential schedule based on a measure called as residual which is the difference between the message in the current and previous iteration. This acts as an indicator of the level of convergence in that part of the graph. They order the variable node messages in such a way that the the least converged part of the graph receives the new information ﬁrst. The check node messages are not altered.\nThe proposed decoding algorithm consists of two stages. In the ﬁrst stage of the decoder we handle the oscillating trapping sets using a selective decoding algorithm. If the decoder does not converge after a ﬁxed number of iterations and the number of unsatisﬁed check nodes is below a certain threshold, we assume that it is due to elementary trapping sets and identify the variable nodes that are connected to the unsatisﬁed check nodes and multiply the channel information LLR C v i with a constant and repeat the ﬁrst stage of the decoder.\nOur aim in the ﬁrst stage is to prevent the error due to oscillating trapping sets and initial trapping set. The algorithm must be designed such that it does not affect the convergence of reliable nodes. Faster convergence of the reliable nodes helps the convergence of the oscillating nodes as the messages\nfrom the converged reliable nodes are very strong compared to the belief in the oscillating nodes. As explained in § II-A, the nodes affected by the initial trapping set have a rapid increase in reliability value on the wrong bit and the errors caused by this can be prevented by slowing down the wrong information from ﬂowing out of these nodes.\nThe selective averaging algorithm modiﬁes the outgoing messages m (l) v i c j from the variable nodes as follows:\n \n, if Ω(v i ) > 0, m (l) v i c j , \t if Ω(v i ) = 0,\n| if Ω(v i )! = 2 then\nΩ(v i ) ← 0 end if\n) > β then Ω(v i ) ← 1\n) > ν then Ω(v i ) ← 1\nend if end if\nrepresents the LLR of the node v i at iteration l and L (l−1) (v\nrepresents the LLR of the node v i at iteration l − 1. We assign |L (l) (v\n. We then check if the belief in the node B (v i ) is decreasing or increasing in each iteration. If the belief is decreasing below a constant β, we assume this as an oscillating node and it is selected. If the belief is increasing rapidly at a rate above the constant ν, we consider this behavior as an initial trapping set [5] and the node is selected for averaging of the messages in the next iteration. This condition also helps prevent the oscillating nodes. All the nodes are unselected at the beginning of the node selection procedure at each iteration except the nodes that are modiﬁed in the second stage of the algorithm. Message from these nodes are always averaged. A more detailed explanation for this special treatment of the modiﬁed nodes will follow when we explain the second stage of the algorithm.\nThe ﬁrst stage of the decoder is not designed for dealing with the elementary trapping sets that are the most prevalent type of trapping sets in the error ﬂoor region. We will use a similar algorithm to the one proposed in [8]. The algorithm proposed in [8], [9], uses a backtracking approach and forms a\nset of matching sets of vertices that might belong to a trapping set. The initial LLR value of the variable nodes that belong to one of the members of the set of matching set are ﬂipped and the decoding process is repeated. If the trapping set error is not solved, then the decoder backtracks and repeats the process for the next member of the set of matching set. The second stage of our decoder also follows a similar approach but we avoid backtracking as it increases the complexity of the decoder.\nAlgorithm 2 Second Stage of the decoder 1: First stage decoder unsuccessful.\n(N (c j ) is the set of all variable nodes that are connected to the check node c j ).\n6: \t Remove all the variable nodes in V un that have common check nodes other than the unsatisﬁed check nodes. This set is V nc\n9: \t Ω(v k ) ← 2 10: \t end for 11: end if\nThe second stage of the proposed decoder is listed in algorithm 2. If the ﬁrst stage of the decoder has not converged even after the maximum number of iterations and the number of unsatisﬁed check nodes is below CN threshold , we conclude that the error occurred due to an elementary trapping set. As the trapping set is an unstable equilibrium condition, if we ﬂip even one or two variable nodes that belong to the check nodes, it is enough to break the trapping set. But we do not know the variables nodes that belong to the trapping sets. The only information available to us is that the unsatisﬁed check nodes are connected to odd number of variable nodes (one node in the worst case) in the trapping set as shown in Figure 1. We ﬁnd the set of variables nodes V un that is a union of all variable\nnodes connected to the unsatisﬁed check nodes. Remove all the variable nodes in V un that have common check nodes other than the unsatisﬁed check nodes. This set is V nc We will multiply the initial LLR value C v k with -η for all the variable nodes v k that belong to the set V nc . This ﬂips the bit value of the node and the decoding process is repeated. But some of the correctly decoded nodes that do not belong to the trapping set might also be ﬂipped. Since the variable nodes do not have any common check nodes, the wrongly ﬂipped nodes are easily corrected by other reliable nodes in the decoding process. If the re-decoding is not successful, then we report the string with the least number of unsatisﬁed check nodes. To be cautious we assign Ω(v k ) = 2 so that they remain always selected and the messages from these nodes are always averaged. This helps in preventing the wrong information from spreading initially before the reliable nodes converge. The nodes that we have ﬂipped in this stage that belong to trapping set will help in breaking the trapping set.\nNote that the computational cost of the proposed decoder not signiﬁcantly greater than the standard decoder. The se- lected averaging decoder runs at most twice (if second stage is triggered) and the cost of node selection algorithm is negligible compared to the overall cost of the algorithm.\nWe ran simulations of the proposed decoder for (1024,518,15,8) irregular PEG code and (504,252,3,6) regular PEG code. We compare the results of the proposed decoder with the averaging decoder [4] and the standard decoder. Without loss of generality, the codewords were all-zero.\nFor selecting the parameters β and ν we plotted iteration vs LLR value for each node. We observed the rate of fall of LLR in oscillating nodes and found a range of values for the parameter β. We ran the selective averaging algorithm for the values in the range and found the optimal value. The same procedure was repeated for the parameter ν, but here the rate of rise of LLR value in the nodes was observed instead of the rate of fall. We used the following value for our experiments. β = 3.2 and ν = 1. We observed in our experiments that β, ν values need not be adjusted for each SNR point. This is because the parameters act on the difference of LLR values in consecutive iterations. CN threshold decides if it is useful to execute the second stage of the algorithm. The second stage of the algorithm is used to handle the elementary trapping sets. Since elementary trapping sets are low weight errors [9], we assign a low value for CN threshold . The rule of thumb, we used, is to take a value roughly one percent of the total number of variable nodes N . We used CN threshold = 10 is our experiment. To reduce the initial belief of the ﬂipped bits we multiply the C (v k ) with a number slightly less than 1. We used η = 0.8 in our experiments(η > 1 is not advisable as it induces external noise in the system).\nIn Figure 2, 3, 4, 5 and Table I we can see that the proposed two stage decoder performs better than the other two decoders in both bit error rate (BER) and (BLER) for regular\n(504,252,3,6) PEG code and Irregular (1024, 518, 15, 8) PEG codes. This performance is expected because the proposed two stage decoder solves the trapping sets better than the averaging decoder [4] and the standard decoder.\nWe observed that the proposed decoder solved 1 out of every 4 solvable elementary trapping set errors (number of unsatisﬁed check nodes is less that CN threshold ) for regular PEG code and 5 out of 8 solvable elementary trapping set errors in irregular PEG code.\nIn Figure 6 we can see the number of bit errors in the re- decoding after processing in the second stage of the decoder and the number of bit errors in the averaging decoder [4]. It shows how the averaging decoder fails to solve certain elementary trapping sets but the proposed two stage decoder solves the error in about 60 iterations in the re-decoding after\nthe second stage. The second stage of the proposed decoder solves the elementary trapping sets by ﬂipping certain bits. This behaviour is observed only for some instances of the simulations.\nIn this paper, we proposed a two stage decoding algorithm for LDPC codes that reduces the error performance of the\ncode especially in the error ﬂoor region. In the ﬁrst stage we handle the oscillating trapping sets by selecting the nodes based on rate of increase or decrease of the belief. The messages from the selected nodes are averaged with message from the previous iteration to slow down the ﬂow of erroneous information in the system. The reliable nodes are allowed to converge faster and they help in solving the oscillating trapping sets. The ﬁrst stage decoder does not solve the errors due to elementary trapping set. To address this we proposed a second stage and our simulation results show that this helps in breaking the trapping sets.\nWe gratefully acknowledge that without late Prof. Priti Shankar\u2019s participation, this work would not have been possi- ble."},"refs":[{"authors":[{"name":"T. Richardson"}],"title":{"text":"Error-ﬂoors of LDPC codes"}},{"authors":[{"name":"C. MacKay"},{"name":"J. Postol"}],"title":{"text":"Weaknesses of margulis and ramanujan-margulis low-density parity-check codes"}},{"authors":[{"name":"Y. Han"},{"name":"W. Ryan"}],"title":{"text":"Low-ﬂoor decoders for LDPC codes"}},{"authors":[{"name":"S. Landner"},{"name":"O. Milenkovic"}],"title":{"text":"Algorithmic and combinatorial analysis of trapping sets in structured LDPC codes"}},{"authors":[],"title":{"text":"Two methods for reducing the error-ﬂoor of LDPC codes"}},{"authors":[{"name":"M. G. Stepanov"},{"name":"M. Chertkov"}],"title":{"text":"Improving convergence of belief propagation decoding"}},{"authors":[{"name":"S. Gounai"},{"name":"T. Ohtsuki"},{"name":"T. Kaneko"}],"title":{"text":"Modiﬁed belief propagation decoding algorithm for low-density parity check code based on oscilla- tion"}},{"authors":[],"title":{"text":"A two-stage iterative decoding of LDPC codes for lowering error ﬂoors"}},{"authors":[{"name":"K. Abdel-Ghaffar"}],"title":{"text":"An iterative decoding algorithm with backtracking to lower the error-ﬂoors of LDPC codes"}},{"authors":[{"name":"I. Vila Casado"},{"name":"M. Griot"},{"name":"D. Wesel"}],"title":{"text":"Informed dynamic scheduling for belief-propagation decoding of LDPC codes"}},{"authors":[{"name":"P. Radosavljevic"},{"name":"A. de Baynast"},{"name":"R. Cavallaro"}],"title":{"text":"Optimized message passing schedules for LDPC decoding"}}]},"file":{"jsonClass":"File","file":"/home/arnfred/Code/trailhead/resources/isit2012/1569565199.pdf"},"links":[{"id":"1569566567","weight":2},{"id":"1569564843","weight":3},{"id":"1569566485","weight":2},{"id":"1569565383","weight":2},{"id":"1569565883","weight":15},{"id":"1569564889","weight":3},{"id":"1569566725","weight":2},{"id":"1569565377","weight":2},{"id":"1569566385","weight":2},{"id":"1569566799","weight":3},{"id":"1569559665","weight":2},{"id":"1569561021","weight":3},{"id":"1569564669","weight":8},{"id":"1569565691","weight":7},{"id":"1569566875","weight":5},{"id":"1569564605","weight":8},{"id":"1569559617","weight":2},{"id":"1569566605","weight":10},{"id":"1569566683","weight":2},{"id":"1569566855","weight":7},{"id":"1569566869","weight":4},{"id":"1569565097","weight":3},{"id":"1569566227","weight":7},{"id":"1569566091","weight":2},{"id":"1569559259","weight":2},{"id":"1569566697","weight":4},{"id":"1569565551","weight":6},{"id":"1569565711","weight":2},{"id":"1569566761","weight":7},{"id":"1569566943","weight":2},{"id":"1569565091","weight":11},{"id":"1569566591","weight":3},{"id":"1569566571","weight":9},{"id":"1569567045","weight":2},{"id":"1569565227","weight":2},{"id":"1569564481","weight":2},{"id":"1569560833","weight":3},{"id":"1569566415","weight":3},{"id":"1569564805","weight":2},{"id":"1569567005","weight":2},{"id":"1569566081","weight":14},{"id":"1569565355","weight":2},{"id":"1569564469","weight":2},{"id":"1569565931","weight":2},{"id":"1569566373","weight":5},{"id":"1569551535","weight":2},{"id":"1569566765","weight":2},{"id":"1569564897","weight":3},{"id":"1569566871","weight":6},{"id":"1569565461","weight":3},{"id":"1569565171","weight":4},{"id":"1569566207","weight":2},{"id":"1569558325","weight":4},{"id":"1569565837","weight":3},{"id":"1569566671","weight":2},{"id":"1569566303","weight":2},{"id":"1569564233","weight":2},{"id":"1569566459","weight":7},{"id":"1569563411","weight":2},{"id":"1569560427","weight":2},{"id":"1569564401","weight":2},{"id":"1569564849","weight":4},{"id":"1569559541","weight":5},{"id":"1569565123","weight":2},{"id":"1569566941","weight":5},{"id":"1569566739","weight":2},{"id":"1569555811","weight":3},{"id":"1569565609","weight":2},{"id":"1569565291","weight":24},{"id":"1569564203","weight":9},{"id":"1569556713","weight":2},{"id":"1569562685","weight":2},{"id":"1569566467","weight":2},{"id":"1569566157","weight":2},{"id":"1569566903","weight":4},{"id":"1569566999","weight":2},{"id":"1569565859","weight":2},{"id":"1569565809","weight":20},{"id":"1569566843","weight":2},{"id":"1569566563","weight":12},{"id":"1569556091","weight":2},{"id":"1569565347","weight":2},{"id":"1569566925","weight":3},{"id":"1569564387","weight":5},{"id":"1569565455","weight":2},{"id":"1569566497","weight":28},{"id":"1569566795","weight":5},{"id":"1569566963","weight":2},{"id":"1569561679","weight":2},{"id":"1569566709","weight":4},{"id":"1569564989","weight":2},{"id":"1569566717","weight":2},{"id":"1569566015","weight":9},{"id":"1569565897","weight":2},{"id":"1569551763","weight":3},{"id":"1569565953","weight":8},{"id":"1569566895","weight":9},{"id":"1569566749","weight":5},{"id":"1569566269","weight":3},{"id":"1569564189","weight":2},{"id":"1569564195","weight":9},{"id":"1569561513","weight":6},{"id":"1569566985","weight":2},{"id":"1569564613","weight":8},{"id":"1569567009","weight":5},{"id":"1569566865","weight":4},{"id":"1569565321","weight":9},{"id":"1569566193","weight":4},{"id":"1569564337","weight":2},{"id":"1569566343","weight":3},{"id":"1569564311","weight":6},{"id":"1569565785","weight":7},{"id":"1569566239","weight":2},{"id":"1569566679","weight":8},{"id":"1569565989","weight":7},{"id":"1569566575","weight":2},{"id":"1569563981","weight":2},{"id":"1569561085","weight":2},{"id":"1569566617","weight":5},{"id":"1569559565","weight":2},{"id":"1569566905","weight":3},{"id":"1569563307","weight":4},{"id":"1569566063","weight":6},{"id":"1569558681","weight":2},{"id":"1569555999","weight":8},{"id":"1569566759","weight":2},{"id":"1569559195","weight":2},{"id":"1569566657","weight":3},{"id":"1569558859","weight":6},{"id":"1569565365","weight":9},{"id":"1569566643","weight":3},{"id":"1569566511","weight":2},{"id":"1569566531","weight":7},{"id":"1569567665","weight":4},{"id":"1569565833","weight":5},{"id":"1569566489","weight":2},{"id":"1569564611","weight":3},{"id":"1569565535","weight":8},{"id":"1569562867","weight":15},{"id":"1569566325","weight":17},{"id":"1569564795","weight":7},{"id":"1569567015","weight":2},{"id":"1569559805","weight":9},{"id":"1569566437","weight":2},{"id":"1569558901","weight":2},{"id":"1569565735","weight":7},{"id":"1569559111","weight":4},{"id":"1569566687","weight":2},{"id":"1569566939","weight":2},{"id":"1569553537","weight":2},{"id":"1569565427","weight":3},{"id":"1569566403","weight":2},{"id":"1569565915","weight":2},{"id":"1569552251","weight":2},{"id":"1569566139","weight":2},{"id":"1569567051","weight":3},{"id":"1569564441","weight":4},{"id":"1569566231","weight":5},{"id":"1569564209","weight":4},{"id":"1569566513","weight":2},{"id":"1569554971","weight":2},{"id":"1569565501","weight":3},{"id":"1569566899","weight":3},{"id":"1569566445","weight":2},{"id":"1569566209","weight":3},{"id":"1569566649","weight":2},{"id":"1569565655","weight":3},{"id":"1569566127","weight":2},{"id":"1569565151","weight":6},{"id":"1569563763","weight":5},{"id":"1569566473","weight":11},{"id":"1569564857","weight":11},{"id":"1569564333","weight":2},{"id":"1569566913","weight":2},{"id":"1569566809","weight":51},{"id":"1569566629","weight":2},{"id":"1569566257","weight":12},{"id":"1569565033","weight":3},{"id":"1569566447","weight":3},{"id":"1569565817","weight":2},{"id":"1569565847","weight":8},{"id":"1569564353","weight":3},{"id":"1569565887","weight":2},{"id":"1569566141","weight":2},{"id":"1569565633","weight":3},{"id":"1569566661","weight":4},{"id":"1569565279","weight":3},{"id":"1569555879","weight":4},{"id":"1569566115","weight":6},{"id":"1569565219","weight":4},{"id":"1569565185","weight":6},{"id":"1569566773","weight":9},{"id":"1569566223","weight":9},{"id":"1569566553","weight":8},{"id":"1569564973","weight":3},{"id":"1569565469","weight":2},{"id":"1569564969","weight":2},{"id":"1569565029","weight":13},{"id":"1569566505","weight":9},{"id":"1569562207","weight":2},{"id":"1569566191","weight":2},{"id":"1569567033","weight":3},{"id":"1569565527","weight":4},{"id":"1569566853","weight":7},{"id":"1569567029","weight":3},{"id":"1569566159","weight":3},{"id":"1569566695","weight":3},{"id":"1569566051","weight":10},{"id":"1569565909","weight":4},{"id":"1569561123","weight":4},{"id":"1569567235","weight":2},{"id":"1569565441","weight":4},{"id":"1569566667","weight":2},{"id":"1569566297","weight":2},{"id":"1569566893","weight":3},{"id":"1569566317","weight":11},{"id":"1569564097","weight":2},{"id":"1569563845","weight":2},{"id":"1569566407","weight":2},{"id":"1569560349","weight":5},{"id":"1569566501","weight":3},{"id":"1569565741","weight":2},{"id":"1569566275","weight":4},{"id":"1569566481","weight":15},{"id":"1569565545","weight":4},{"id":"1569566857","weight":7},{"id":"1569565961","weight":3},{"id":"1569566245","weight":3},{"id":"1569560503","weight":3},{"id":"1569566219","weight":2},{"id":"1569566229","weight":2},{"id":"1569562551","weight":4},{"id":"1569551347","weight":2},{"id":"1569565571","weight":2},{"id":"1569566177","weight":5},{"id":"1569565493","weight":15},{"id":"1569564411","weight":2},{"id":"1569566805","weight":10},{"id":"1569559199","weight":4},{"id":"1569566293","weight":2},{"id":"1569565665","weight":3},{"id":"1569565549","weight":4},{"id":"1569566983","weight":5},{"id":"1569566479","weight":19},{"id":"1569556361","weight":2},{"id":"1569566431","weight":4},{"id":"1569566873","weight":2},{"id":"1569565765","weight":3},{"id":"1569565263","weight":2},{"id":"1569565215","weight":2},{"id":"1569565093","weight":8},{"id":"1569565385","weight":2},{"id":"1569565575","weight":2},{"id":"1569565919","weight":4},{"id":"1569566711","weight":4},{"id":"1569565241","weight":3},{"id":"1569566927","weight":14},{"id":"1569565661","weight":9},{"id":"1569565865","weight":2},{"id":"1569566887","weight":8},{"id":"1569565273","weight":2},{"id":"1569565319","weight":2},{"id":"1569552037","weight":2},{"id":"1569564919","weight":4},{"id":"1569566737","weight":3},{"id":"1569561221","weight":2},{"id":"1569566917","weight":10},{"id":"1569566035","weight":7},{"id":"1569565353","weight":19},{"id":"1569564683","weight":2},{"id":"1569564305","weight":3},{"id":"1569564291","weight":3},{"id":"1569566691","weight":4},{"id":"1569565421","weight":2},{"id":"1569566547","weight":4},{"id":"1569566651","weight":2},{"id":"1569565177","weight":30},{"id":"1569566823","weight":3},{"id":"1569566595","weight":2},{"id":"1569566677","weight":2},{"id":"1569565349","weight":11},{"id":"1569566137","weight":6},{"id":"1569565013","weight":2},{"id":"1569566283","weight":5},{"id":"1569566529","weight":6},{"id":"1569565375","weight":3},{"id":"1569566715","weight":2},{"id":"1569565237","weight":7},{"id":"1569566639","weight":6},{"id":"1569566819","weight":5},{"id":"1569565041","weight":3},{"id":"1569565541","weight":11},{"id":"1569566813","weight":2},{"id":"1569562277","weight":2},{"id":"1569566641","weight":2},{"id":"1569566533","weight":15},{"id":"1569564861","weight":11},{"id":"1569564787","weight":2},{"id":"1569566487","weight":4},{"id":"1569565529","weight":7},{"id":"1569556759","weight":3},{"id":"1569565271","weight":2},{"id":"1569566075","weight":3},{"id":"1569566397","weight":8},{"id":"1569566301","weight":10},{"id":"1569565669","weight":2},{"id":"1569565233","weight":2},{"id":"1569566817","weight":2},{"id":"1569566389","weight":3},{"id":"1569564923","weight":6},{"id":"1569566299","weight":2},{"id":"1569564281","weight":2},{"id":"1569565039","weight":3},{"id":"1569564769","weight":5},{"id":"1569565769","weight":13},{"id":"1569566171","weight":3},{"id":"1569566601","weight":7},{"id":"1569565805","weight":3},{"id":"1569566577","weight":3},{"id":"1569557851","weight":2},{"id":"1569565389","weight":3},{"id":"1569559919","weight":2},{"id":"1569565861","weight":9},{"id":"1569566147","weight":4},{"id":"1569565537","weight":2},{"id":"1569560785","weight":2},{"id":"1569565561","weight":8},{"id":"1569565997","weight":12},{"id":"1569565035","weight":19},{"id":"1569564961","weight":69},{"id":"1569559251","weight":2},{"id":"1569567013","weight":4},{"id":"1569565737","weight":10},{"id":"1569560459","weight":8},{"id":"1569565853","weight":9},{"id":"1569550425","weight":14},{"id":"1569564123","weight":19},{"id":"1569566341","weight":2},{"id":"1569565889","weight":3},{"id":"1569566635","weight":5},{"id":"1569551539","weight":2},{"id":"1569565165","weight":2},{"id":"1569565565","weight":3},{"id":"1569565635","weight":2},{"id":"1569561397","weight":4},{"id":"1569566797","weight":3},{"id":"1569566413","weight":2},{"id":"1569565707","weight":8},{"id":"1569565113","weight":2},{"id":"1569566375","weight":3},{"id":"1569565143","weight":4},{"id":"1569565583","weight":2},{"id":"1569566973","weight":4},{"id":"1569561579","weight":2},{"id":"1569566987","weight":2},{"id":"1569565031","weight":2},{"id":"1569551541","weight":2},{"id":"1569566839","weight":2},{"id":"1569551751","weight":2},{"id":"1569565139","weight":12},{"id":"1569566663","weight":3},{"id":"1569565579","weight":3},{"id":"1569566067","weight":2},{"id":"1569566825","weight":3},{"id":"1569566241","weight":10},{"id":"1569564807","weight":4},{"id":"1569563007","weight":3},{"id":"1569566113","weight":4},{"id":"1569566443","weight":3},{"id":"1569566727","weight":15},{"id":"1569565315","weight":6},{"id":"1569566417","weight":4},{"id":"1569560581","weight":3},{"id":"1569559233","weight":2}],"meta":{"jsonClass":"HashMap$HashTrieMap","sessionid":"S16.T5.2","endtime":"12:10","authors":"Dinesh Kumar A., Ambedkar Dukkipati","date":"1341575400000","papertitle":"A Two Stage Selective Averaging LDPC Decoding","starttime":"11:50","session":"S16.T5: Decoding Techniques for LDPC Codes","room":"Kresge Little Theatre (035)","paperid":"1569565199"},"cluster":{"jsonClass":"HashMap$HashTrieMap","spectral6":"3","spectral43":"1","spectral28":"6","spectral32":"17","spectral14":"6","spectral20":"6","spectral9":"1","spectral25":"18","spectral42":"3","spectral3":"1","spectral47":"43","spectral17":"0","louvain":"626","spectral36":"28","spectral39":"1","spectral10":"6","spectral15":"6","spectral33":"4","spectral5":"2","spectral21":"6","spectral44":"26","spectral26":"14","spectral40":"38","spectral8":"2","spectral11":"1","spectral4":"3","spectral37":"21","spectral48":"40","spectral22":"3","spectral23":"0","spectral12":"5","spectral50":"24","spectral19":"7","spectral34":"23","spectral45":"10","spectral7":"6","spectral49":"19","spectral38":"2","spectral24":"5","spectral13":"4","spectral31":"3","spectral29":"19","spectral35":"0","spectral30":"6","spectral41":"27","spectral27":"18","spectral18":"0","spectral46":"4","spectral2":"0","spectral16":"5"}}
