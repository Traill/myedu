{"id":"1569564353","paper":{"title":{"text":"Efﬁcient Algorithms for Calculating Euclidean Distance Spectra of Muliti-User Continuous Phase Modulation Systems"},"authors":[{"name":"Li Bing"},{"name":"Tor Aulin"},{"name":"Baoming Bai"}],"abstr":{"text":"Abstract\u2014The performance of maximum likelihood detection of a coded modulation scheme over an additive white Gaussian noise channel can be predicted precisely by its Euclidean distance spectrum. In this paper, three algorithms are developed to generate the Euclidean distance spectra. The ﬁrst algorithm is an exhaustive tree-search algorithm which is simpliﬁed by exploiting the correspondence between a code tree and the trellis. This algorithm is then modiﬁed to incorporate the A* algorithm and results in two heuristic algorithms. Moreover, the technique of trellis minimization is further developed for the multi user case and employed to reduce the complexity and memory requirements. Numerical results conﬁrm that the proposed algorithms can generate the distance spectra of all systems with lower complexity relative to previous methods and are particularly suited for multi user CPM systems."},"body":{"text":"Continuous Phase Modulation (CPM) is a class of modula- tion schemes, which is widely used in wireless communication systems due to its good power-efﬁciency and bandwidth- efﬁciency [1].\nIt is generally recognized that the performance of max- imum likelihood (ML) detection of a modulation scheme over the additive white Gaussian noise (AWGN) channel can be predicted by its Euclidean distance spectrum (EDS) [6]. Existing algorithms mainly focus on deriving closed-form expression [5], [6], [7] of EDS using transfer matrix or transfer diagram. However, as the number of encoder states becomes high, the calculations quickly become cumbersome even using some newly developed techniques [10], [11]. On the other hand, instead of generating closed-form expression, numerical algorithms are designed to calculate the EDS using exhaustive search for a given length of observation. Unfortunately, a considerable amount of memory is required to enumerate and identify the error events being examined [8].\nIn this paper, three algorithms are proposed to calculate the EDS for multi-user CPM (MUCPM) systems. The ﬁrst algorithm is an exhaustive tree-search algorithm which is sim- pliﬁed by exploiting the correspondence between a code tree and the trellis. This algorithm is then modiﬁed to incorporate the A* algorithm [12] and results in two simpliﬁed heuristic\nalgorithms. Moreover, the concept of trellis minimization [11] is generalized to the MUCPM systems and employed by the proposed algorithms to reduce the search effort.\nThis paper is organized as follows. Section II presents the systems model. Section III describes the algorithms and the technique of trellis minimization. Numerical results and performance comparison are given in Section IV. Sections V concludes the paper.\nShown in Figure 1 is an MSK-based multiple-access type MUCPM system proposed in [9], which consists of K users\nsharing a common channel. The kth user maps independently its information sequence a k to a CPM signal waveform s k (t), which reads\nwhere T k = T , E k , q k (t) and h are the symbol duration, average signal energy, phase response and modulation index\nof the CPM employed by the kth user, respectively. Different users are distinguished by the frequency difference f k and phase difference ϕ k deﬁned as [9]\nwhere f and ϕ are the predetermined frequency spacing and phase spacing, respectively. The resulting superimposed signal is\nwith the deﬁnitions presented above, the normalized Euclidean distance (NED) [1], [2] reads\nwhere E b is the average energy possessed by a transmitted bit, and N is the length of observation. All deﬁnitions presented above degenerate to single-user CPM (SUCPM) when K = 1.\nProposed algorithms and the technique of generalized trellis minimization are presented in this section.\nDue to the nonlinearity of CPM, the reduced-pair trellis [9] is adopted in this paper. Assuming that all users employ the same CPM scheme of memory length L M , the state σ n during interval [nT, (n + 1)T ] is a [(2K − 1) + 2K(L M − 1)]−tuple vector deﬁned as\nσ n = [U n , V n ] \t (6) where\nV n = [v 1 , ˆ v 1 , v 2 , ˆ v 2 , . . . , v K , ˆ v K ] \t (8) and\nv k = a n −L+1 k \t , a n −L+2 2 \t , . . . , a n k , k ∈ {1, 2, . . . , K} (9) where θ 1k is the difference phase state [3] between user 1 and user k. U n and V n are deﬁned as phase state and correlative state , respectively. The branch connecting a pair of states (σ n i , σ n j ) is labeled by the branch gain\n[I 1 , I 2 , . . . , I K ] is a dummy vector indicating the occurrence of symbol errors, L indicates the length of the error event and D carries incremental distance d 2 in exponent.\nTTSA is a simpliﬁed tree search algorithm using forward and backward processes to enumerate and identify the ﬁrst error events [6]. The forward process traverses the code tree and ﬁnds the forward partial error path/event originating from a correct state and ending with a node corresponding to an incorrect state, while the backward process ﬁnds the backward partial error paths/events connecting incorrect states and correct states. The multiplicity, input weight and distance of forward and backward partial error event are denoted\nA f , I f , d 2 f and A b , I b , d 2 b , respectively. Since each node in the code tree corresponds uniquely to a state, a complete error event of distance d 2 f + d 2 b is identiﬁed and formed by merging the forward and backward partial events.\nWe emphasize that TTSA is not a bi-directional algo- rithm [8] in the sense that the backward process is terminated as soon as it ﬁnds the merging path(s) for each incorrect state. The merging path of an incorrect state is deﬁned as the path connecting the incorrect state and a correct state when backward traverse visits the incorrect state the ﬁrst time. Since the branch gain depends on time index n due to the nonzero\nfrequency spacing (see (4)), TTSA restarts an iteration from step 2. Otherwise, the labels are constant and the backward process is performed only once and the algorithm restarts from step 3. TTSA is designed to deal with the ﬁrst error events, but can be modiﬁed to handle multiple error events if required.\nOn the other hand, we noticed that in most cases, including uncoded and coded systems [2], [3], [4], the truncated distance spectrum (TDS) are proven to be sufﬁcient to evaluate the error performance. This implies that instead of an exhaustive search, it is sufﬁcient to enumerate those error events which contribute to the pre-required TDS. Based on this idea the following two algorithms are proposed.\nParallel updated TTSA (PTTSA) and serially updated TTSA (STTSA) are two simpliﬁed algorithms combing TTSA and the well known A* algorithm [12]. Similar to TTSA, both PTTSA and STTSA utilize forward and backward processes to complete the error events. The backward distance d 2 b is used as the admissible heuristic [12] to ﬁnd the eligible error events. A list is used to enumerate the candidate paths and updated each time the forward process is ﬁnished. The main difference lies in the method upon which the list is updated. PTTSA ﬁrst extends all paths on the list, then replaces the list by a new one with newly generated eligible paths. Thus the paths on this list have the same length. While STTSA ﬁrst extends the ﬁrst path on the list whose distance is the smallest, then inserts all the newly generated paths to the list and removes the ﬁrst path from the list. Consequently, STTSA needs to compare paths of different lengths. This trivial difference incurs two consequences. First, STTSA performs the sorting more frequently than PTTSA does. Second, STTSA needs to store and identify the paths being examined to prevent recalculations of the same error event. It should be noted that the algorithms impose no constraint on the size of the list such that all eligible error events are enumerated.\nObviously, PTTSA is a preferable option provided they gen- erate the same results. The details of these two algorithms are presented in the Appendix. We will compare their performance in Section IV.\nThe concept of trellis minimization based on equivalent states was thoroughly explained in [11]. In this paper, this idea is further developed to handle the parallel transitions by deﬁning the equivalent branches and equivalent nodes.\nDeﬁnition 1. Two states connecting a pair of equivalent states are considered equivalent if the ingoing and outgoing branches are labeled with the same parameter {r, I, D}\nDeﬁnition 2. Two branches connecting a pair of states are considered equivalent if they are labeled with the same pa- rameter {r, I, D}\nDeﬁnition 3. Two nodes in a code tree are equivalent if they labeled with the same parameter and correspond to the same state.\nThe deﬁnitions of equivalent branches and equivalent states are illustrated by (a) MSK and (b) binary CPFSK with h= 2/3, respectively. Apparently, the technique of trellis and tree minimization is actually another description of Mason\u2019s rule [5]. By using this technique, an equivalent trellis/tree is formed in the sense that it generates the same DS as the original one, but the number of transitions is reduced to a great extent. Trellis and tree minimization are incorporated into the proposed algorithms and performed iteratively each step forward such that the complexity and memory requirements are reduced as much as possible.\nThe operations of the proposed algorithms include add, multiply and sort. The complexity and memory requirements of the proposed algorithm are mainly determined by the sorting algorithm. Assuming the maximum size of the list is N max and the sorting is performed m times, then the complexity and memory requirements of the sorting algorithm, i.e. quick sort , are approximately O (m · N max log N max ) and O(N 2 max ) [13], respectively. Obviously, the computational complexity and memory requirements of the proposed algorithms are lower than the algorithm in [8]. Unfortunately, it is impos- sible to make analytical comparison with existing simpliﬁed algorithms [8], [10], [11] due to the unpredictable size of the list. For a trellis whose labels are independent of the time index n, PTTSA, STTSA and existing algorithms are able to generate the required DS. However, if the labels are dependent on n, which is usually the case for MUCPM, the algorithms based on state reduction [10], [11] may not be applicable.\nIn this section we calculate the DS of some CPM systems, including SUCPMs and MUCPMs, shown in Table I. The resolution of the numerical results produced by these algo- rithms is restricted to 10 −3 . The analytical results are given by transfer functions. The maximum used Euclidean distance is d 2 min = 40 in SUCPM systems, and the maximum number of spectral lines for MUCPM is N T = 50. For MUCPM systems, it is assumed that the average signal energy is the same for different users.\nIt can be observed that for both SUCPMs, all three algo- rithms generate the same result as the transfer function does. However, PTTSA has the lowest complexity among them as we pointed out before. We use PTTSA and TTSA to generate\nobserved that the size of the list for TTSA approaches inﬁnity with increasing N , while the size of the list for PTTSA and STTSA is a fraction of TTSA.\nThis paper has presented three algorithms and a technique of generalized trellis minimization to facilitate the calculation of the distance spectra of CPM systems. Analysis and numerical results conﬁrm that all algorithms can generate the pre- required spectrum as the transfer function does, while the computational effort is reduced signiﬁcantly.\nThis work was supported in part by the 973 Program of China under Grant 2012CB316100, the NSFC under Grant 60972046, and the National S &T Major Special Projects (No.2010ZX03003-003-03)."},"refs":[{"authors":[{"name":"T. Aulin"},{"name":"N. Rydbeck"},{"name":"C. E. Sundberg"}],"title":{"text":"Continuous Phase Modula- tion I, II"}},{"authors":[{"name":"P. Moqvist"},{"name":"T. M. Aulin"}],"title":{"text":"Serially concatenated continuous phase modulation with iterative decoding"}},{"authors":[],"title":{"text":"Symbol error probability bounds for coherently Viterbi detected continuous phase modulation"}},{"authors":[{"name":"M. Xiao"},{"name":"T. M. Aulin"}],"title":{"text":"Serially concatenated continuous phase modulation with convolutional codes over rings"}},{"authors":[{"name":"S. Li"},{"name":"D. J. Costello Jr"}],"title":{"text":"Error Control Coding: Fundamentals and Applications "}},{"authors":[{"name":"A. J. Viterb"},{"name":"J. K. Omur"}],"title":{"text":"Principles of Digital Communication and Coding "}},{"authors":[{"name":"R. McEliece"}],"title":{"text":"How to Compute Weight Enumerators for Convolutional Codes"}},{"authors":[{"name":"M. Rouanne"},{"name":"D. J. Costello"}],"title":{"text":"An algorithm for computing the distance spectrum of trellis codes"}},{"authors":[{"name":"P. Moqvist"}],"title":{"text":"Multiuser serially concatenated continuous phase mod- ulation"}},{"authors":[{"name":"C. Pimentel"}],"title":{"text":"On the computation of weight enumerators for convolu- tional codes"}},{"authors":[],"title":{"text":"Efﬁcient Computation of Trellis Code Generating Functions"}},{"authors":[{"name":"N. J. Principles of Artiﬁcial Intelligence"}],"title":{"text":"Nilsson,  Palo Alto, California: Tioga Publishing Company"}},{"authors":[{"name":"T. H. Corme"},{"name":"C. E. Leiserso"},{"name":"R. L. Rives"},{"name":"C. Stein: Introduction to Algorithms "}],"title":{"text":"Edition, The MIT Press"}}]},"file":{"jsonClass":"File","file":"/home/arnfred/Code/trailhead/resources/isit2012/1569564353.pdf"},"links":[{"id":"1569564843","weight":2},{"id":"1569566381","weight":2},{"id":"1569566527","weight":7},{"id":"1569566485","weight":4},{"id":"1569565383","weight":2},{"id":"1569565883","weight":3},{"id":"1569564889","weight":4},{"id":"1569565223","weight":3},{"id":"1569566725","weight":3},{"id":"1569565663","weight":2},{"id":"1569565377","weight":4},{"id":"1569566385","weight":5},{"id":"1569567049","weight":2},{"id":"1569565867","weight":3},{"id":"1569566799","weight":4},{"id":"1569565067","weight":5},{"id":"1569559665","weight":2},{"id":"1569561021","weight":13},{"id":"1569564669","weight":5},{"id":"1569565691","weight":4},{"id":"1569566875","weight":4},{"id":"1569559617","weight":2},{"id":"1569566981","weight":5},{"id":"1569566433","weight":2},{"id":"1569566321","weight":2},{"id":"1569566605","weight":2},{"id":"1569566683","weight":4},{"id":"1569566855","weight":3},{"id":"1569566869","weight":4},{"id":"1569565097","weight":3},{"id":"1569566227","weight":2},{"id":"1569566091","weight":3},{"id":"1569559259","weight":4},{"id":"1569566697","weight":9},{"id":"1569566597","weight":2},{"id":"1569565551","weight":2},{"id":"1569565711","weight":2},{"id":"1569566761","weight":3},{"id":"1569566943","weight":2},{"id":"1569565091","weight":3},{"id":"1569566591","weight":3},{"id":"1569556029","weight":3},{"id":"1569566571","weight":4},{"id":"1569552245","weight":2},{"id":"1569565607","weight":4},{"id":"1569565495","weight":7},{"id":"1569567045","weight":2},{"id":"1569565227","weight":4},{"id":"1569564481","weight":3},{"id":"1569560833","weight":8},{"id":"1569566415","weight":4},{"id":"1569564805","weight":8},{"id":"1569567005","weight":4},{"id":"1569566469","weight":2},{"id":"1569566081","weight":5},{"id":"1569565613","weight":2},{"id":"1569565355","weight":2},{"id":"1569564469","weight":3},{"id":"1569565931","weight":2},{"id":"1569566373","weight":3},{"id":"1569566647","weight":3},{"id":"1569551535","weight":3},{"id":"1569566765","weight":2},{"id":"1569564897","weight":7},{"id":"1569565775","weight":3},{"id":"1569566871","weight":6},{"id":"1569565461","weight":3},{"id":"1569565171","weight":4},{"id":"1569566207","weight":3},{"id":"1569558325","weight":2},{"id":"1569565837","weight":3},{"id":"1569566671","weight":4},{"id":"1569566303","weight":5},{"id":"1569566119","weight":2},{"id":"1569564233","weight":3},{"id":"1569566459","weight":4},{"id":"1569567535","weight":2},{"id":"1569563411","weight":3},{"id":"1569560427","weight":5},{"id":"1569564849","weight":11},{"id":"1569559541","weight":2},{"id":"1569566363","weight":4},{"id":"1569566319","weight":2},{"id":"1569566941","weight":15},{"id":"1569566033","weight":2},{"id":"1569566739","weight":2},{"id":"1569555811","weight":2},{"id":"1569558459","weight":5},{"id":"1569565609","weight":4},{"id":"1569565291","weight":3},{"id":"1569564203","weight":7},{"id":"1569566821","weight":3},{"id":"1569556713","weight":2},{"id":"1569562685","weight":3},{"id":"1569566467","weight":3},{"id":"1569566157","weight":2},{"id":"1569566903","weight":5},{"id":"1569566999","weight":3},{"id":"1569565859","weight":2},{"id":"1569565809","weight":3},{"id":"1569566843","weight":5},{"id":"1569566563","weight":4},{"id":"1569566089","weight":7},{"id":"1569566173","weight":3},{"id":"1569559221","weight":5},{"id":"1569556091","weight":3},{"id":"1569565347","weight":3},{"id":"1569566925","weight":3},{"id":"1569564387","weight":7},{"id":"1569565455","weight":4},{"id":"1569566497","weight":7},{"id":"1569566795","weight":2},{"id":"1569566963","weight":3},{"id":"1569561679","weight":2},{"id":"1569566709","weight":2},{"id":"1569564989","weight":2},{"id":"1569566787","weight":2},{"id":"1569566717","weight":3},{"id":"1569566015","weight":7},{"id":"1569565897","weight":4},{"id":"1569551763","weight":4},{"id":"1569565953","weight":4},{"id":"1569566895","weight":3},{"id":"1569566889","weight":3},{"id":"1569566749","weight":12},{"id":"1569566269","weight":7},{"id":"1569564189","weight":3},{"id":"1569564195","weight":3},{"id":"1569561513","weight":5},{"id":"1569566985","weight":3},{"id":"1569567009","weight":5},{"id":"1569566865","weight":3},{"id":"1569565321","weight":3},{"id":"1569566095","weight":2},{"id":"1569566193","weight":2},{"id":"1569564271","weight":2},{"id":"1569564337","weight":4},{"id":"1569565907","weight":2},{"id":"1569566343","weight":2},{"id":"1569564311","weight":2},{"id":"1569565803","weight":2},{"id":"1569565785","weight":6},{"id":"1569566239","weight":2},{"id":"1569566679","weight":3},{"id":"1569565989","weight":3},{"id":"1569566575","weight":3},{"id":"1569563981","weight":3},{"id":"1569561085","weight":2},{"id":"1569566419","weight":2},{"id":"1569566617","weight":2},{"id":"1569559565","weight":3},{"id":"1569566905","weight":4},{"id":"1569566311","weight":3},{"id":"1569563307","weight":4},{"id":"1569566063","weight":2},{"id":"1569558681","weight":2},{"id":"1569566759","weight":5},{"id":"1569559195","weight":2},{"id":"1569566149","weight":5},{"id":"1569559995","weight":2},{"id":"1569566657","weight":5},{"id":"1569558859","weight":4},{"id":"1569565199","weight":3},{"id":"1569565365","weight":2},{"id":"1569566643","weight":2},{"id":"1569566511","weight":4},{"id":"1569565841","weight":2},{"id":"1569566369","weight":2},{"id":"1569566531","weight":3},{"id":"1569567665","weight":4},{"id":"1569561143","weight":2},{"id":"1569566581","weight":2},{"id":"1569565833","weight":3},{"id":"1569566489","weight":3},{"id":"1569564611","weight":4},{"id":"1569565535","weight":3},{"id":"1569562867","weight":10},{"id":"1569565667","weight":2},{"id":"1569566325","weight":3},{"id":"1569566423","weight":2},{"id":"1569565257","weight":18},{"id":"1569564795","weight":6},{"id":"1569567015","weight":3},{"id":"1569559805","weight":12},{"id":"1569566437","weight":7},{"id":"1569566811","weight":4},{"id":"1569566851","weight":3},{"id":"1569558901","weight":3},{"id":"1569565735","weight":3},{"id":"1569559111","weight":9},{"id":"1569566687","weight":3},{"id":"1569566939","weight":3},{"id":"1569553537","weight":3},{"id":"1569565427","weight":5},{"id":"1569566403","weight":5},{"id":"1569565915","weight":2},{"id":"1569552251","weight":2},{"id":"1569566139","weight":2},{"id":"1569553519","weight":2},{"id":"1569564441","weight":7},{"id":"1569566231","weight":4},{"id":"1569566513","weight":2},{"id":"1569554971","weight":4},{"id":"1569565501","weight":2},{"id":"1569566899","weight":2},{"id":"1569566445","weight":3},{"id":"1569566209","weight":2},{"id":"1569562821","weight":2},{"id":"1569566649","weight":3},{"id":"1569566371","weight":6},{"id":"1569566909","weight":4},{"id":"1569566127","weight":3},{"id":"1569565151","weight":2},{"id":"1569558985","weight":2},{"id":"1569563763","weight":2},{"id":"1569566473","weight":5},{"id":"1569564857","weight":3},{"id":"1569564333","weight":3},{"id":"1569566913","weight":3},{"id":"1569566809","weight":5},{"id":"1569566629","weight":3},{"id":"1569566257","weight":6},{"id":"1569565033","weight":4},{"id":"1569566447","weight":4},{"id":"1569566357","weight":2},{"id":"1569565817","weight":2},{"id":"1569565847","weight":4},{"id":"1569563897","weight":2},{"id":"1569566141","weight":3},{"id":"1569553591","weight":2},{"id":"1569565633","weight":3},{"id":"1569566661","weight":3},{"id":"1569565279","weight":3},{"id":"1569555879","weight":5},{"id":"1569565521","weight":2},{"id":"1569566115","weight":2},{"id":"1569565219","weight":2},{"id":"1569558509","weight":3},{"id":"1569554759","weight":3},{"id":"1569564851","weight":4},{"id":"1569565185","weight":2},{"id":"1569566773","weight":4},{"id":"1569565095","weight":3},{"id":"1569566223","weight":3},{"id":"1569566553","weight":4},{"id":"1569565469","weight":3},{"id":"1569564969","weight":2},{"id":"1569565029","weight":3},{"id":"1569561245","weight":2},{"id":"1569566505","weight":12},{"id":"1569565393","weight":2},{"id":"1569565933","weight":3},{"id":"1569562207","weight":3},{"id":"1569566191","weight":4},{"id":"1569567033","weight":2},{"id":"1569565527","weight":5},{"id":"1569566853","weight":5},{"id":"1569566603","weight":2},{"id":"1569567029","weight":4},{"id":"1569565363","weight":2},{"id":"1569566159","weight":3},{"id":"1569566695","weight":3},{"id":"1569566051","weight":2},{"id":"1569561379","weight":4},{"id":"1569565909","weight":5},{"id":"1569561123","weight":7},{"id":"1569565467","weight":2},{"id":"1569566655","weight":2},{"id":"1569565441","weight":6},{"id":"1569565311","weight":2},{"id":"1569566233","weight":2},{"id":"1569566667","weight":4},{"id":"1569566893","weight":4},{"id":"1569566317","weight":5},{"id":"1569564097","weight":3},{"id":"1569560997","weight":4},{"id":"1569566407","weight":3},{"id":"1569560349","weight":5},{"id":"1569566501","weight":4},{"id":"1569565741","weight":4},{"id":"1569566275","weight":7},{"id":"1569566481","weight":6},{"id":"1569565545","weight":5},{"id":"1569566857","weight":3},{"id":"1569566387","weight":2},{"id":"1569566245","weight":8},{"id":"1569560503","weight":6},{"id":"1569564339","weight":2},{"id":"1569566219","weight":2},{"id":"1569565439","weight":2},{"id":"1569566133","weight":3},{"id":"1569563395","weight":15},{"id":"1569566901","weight":3},{"id":"1569551347","weight":2},{"id":"1569565415","weight":3},{"id":"1569566383","weight":3},{"id":"1569566631","weight":2},{"id":"1569565571","weight":2},{"id":"1569565885","weight":2},{"id":"1569566177","weight":3},{"id":"1569565493","weight":6},{"id":"1569557633","weight":2},{"id":"1569566805","weight":2},{"id":"1569559199","weight":2},{"id":"1569566293","weight":5},{"id":"1569565665","weight":2},{"id":"1569566831","weight":2},{"id":"1569565549","weight":2},{"id":"1569565523","weight":2},{"id":"1569565611","weight":2},{"id":"1569557715","weight":3},{"id":"1569564175","weight":7},{"id":"1569566983","weight":5},{"id":"1569566097","weight":3},{"id":"1569566479","weight":4},{"id":"1569556361","weight":4},{"id":"1569566431","weight":2},{"id":"1569565397","weight":3},{"id":"1569566873","weight":5},{"id":"1569565765","weight":3},{"id":"1569565925","weight":2},{"id":"1569565435","weight":2},{"id":"1569565263","weight":2},{"id":"1569565215","weight":2},{"id":"1569565385","weight":5},{"id":"1569565575","weight":2},{"id":"1569565919","weight":4},{"id":"1569565181","weight":3},{"id":"1569566711","weight":6},{"id":"1569565241","weight":9},{"id":"1569566927","weight":9},{"id":"1569565661","weight":2},{"id":"1569565865","weight":3},{"id":"1569566887","weight":3},{"id":"1569565273","weight":2},{"id":"1569564131","weight":2},{"id":"1569552037","weight":2},{"id":"1569564919","weight":8},{"id":"1569565511","weight":2},{"id":"1569566737","weight":3},{"id":"1569566429","weight":2},{"id":"1569561221","weight":4},{"id":"1569564595","weight":2},{"id":"1569566917","weight":6},{"id":"1569566035","weight":2},{"id":"1569565353","weight":6},{"id":"1569564683","weight":6},{"id":"1569564305","weight":3},{"id":"1569564283","weight":5},{"id":"1569564291","weight":3},{"id":"1569566691","weight":2},{"id":"1569565421","weight":6},{"id":"1569566547","weight":6},{"id":"1569566651","weight":3},{"id":"1569566823","weight":3},{"id":"1569566595","weight":3},{"id":"1569566677","weight":3},{"id":"1569565349","weight":2},{"id":"1569566137","weight":3},{"id":"1569565829","weight":4},{"id":"1569566283","weight":5},{"id":"1569565645","weight":2},{"id":"1569566529","weight":7},{"id":"1569565375","weight":5},{"id":"1569566715","weight":3},{"id":"1569565237","weight":9},{"id":"1569566639","weight":3},{"id":"1569566819","weight":3},{"id":"1569565041","weight":3},{"id":"1569564703","weight":2},{"id":"1569565541","weight":2},{"id":"1569565597","weight":3},{"id":"1569566813","weight":2},{"id":"1569566771","weight":11},{"id":"1569562277","weight":3},{"id":"1569566641","weight":2},{"id":"1569565425","weight":2},{"id":"1569564247","weight":2},{"id":"1569564437","weight":2},{"id":"1569566533","weight":3},{"id":"1569551905","weight":2},{"id":"1569564861","weight":4},{"id":"1569565457","weight":2},{"id":"1569564787","weight":4},{"id":"1569566487","weight":3},{"id":"1569565529","weight":5},{"id":"1569556759","weight":3},{"id":"1569566619","weight":2},{"id":"1569561185","weight":3},{"id":"1569566075","weight":2},{"id":"1569566397","weight":2},{"id":"1569566301","weight":2},{"id":"1569565233","weight":4},{"id":"1569566001","weight":9},{"id":"1569565593","weight":2},{"id":"1569560235","weight":2},{"id":"1569566817","weight":2},{"id":"1569564157","weight":2},{"id":"1569566389","weight":2},{"id":"1569566435","weight":3},{"id":"1569567483","weight":4},{"id":"1569564923","weight":2},{"id":"1569565367","weight":5},{"id":"1569566299","weight":3},{"id":"1569564281","weight":3},{"id":"1569565039","weight":3},{"id":"1569564769","weight":2},{"id":"1569565769","weight":5},{"id":"1569566171","weight":5},{"id":"1569565805","weight":3},{"id":"1569561713","weight":2},{"id":"1569566933","weight":2},{"id":"1569563919","weight":3},{"id":"1569566577","weight":2},{"id":"1569557851","weight":2},{"id":"1569559919","weight":5},{"id":"1569565861","weight":3},{"id":"1569566147","weight":4},{"id":"1569565537","weight":2},{"id":"1569566057","weight":2},{"id":"1569562367","weight":2},{"id":"1569560785","weight":3},{"id":"1569565561","weight":5},{"id":"1569566457","weight":2},{"id":"1569555891","weight":3},{"id":"1569566847","weight":2},{"id":"1569565997","weight":3},{"id":"1569565035","weight":4},{"id":"1569564961","weight":8},{"id":"1569559251","weight":2},{"id":"1569565089","weight":2},{"id":"1569567013","weight":2},{"id":"1569566583","weight":2},{"id":"1569561861","weight":2},{"id":"1569565337","weight":4},{"id":"1569565737","weight":11},{"id":"1569560459","weight":3},{"id":"1569564463","weight":4},{"id":"1569565853","weight":3},{"id":"1569550425","weight":2},{"id":"1569566273","weight":3},{"id":"1569564123","weight":7},{"id":"1569566341","weight":3},{"id":"1569565889","weight":3},{"id":"1569566635","weight":4},{"id":"1569566611","weight":2},{"id":"1569551539","weight":2},{"id":"1569564505","weight":2},{"id":"1569565165","weight":2},{"id":"1569565565","weight":5},{"id":"1569565635","weight":2},{"id":"1569561397","weight":3},{"id":"1569565731","weight":3},{"id":"1569556327","weight":3},{"id":"1569566797","weight":9},{"id":"1569566125","weight":2},{"id":"1569566413","weight":2},{"id":"1569565707","weight":3},{"id":"1569565113","weight":2},{"id":"1569566375","weight":3},{"id":"1569565143","weight":13},{"id":"1569564257","weight":2},{"id":"1569565583","weight":2},{"id":"1569566555","weight":2},{"id":"1569565373","weight":4},{"id":"1569566973","weight":7},{"id":"1569561579","weight":5},{"id":"1569566449","weight":2},{"id":"1569566987","weight":2},{"id":"1569565031","weight":2},{"id":"1569564755","weight":2},{"id":"1569551541","weight":3},{"id":"1569566839","weight":5},{"id":"1569551751","weight":2},{"id":"1569558697","weight":5},{"id":"1569565139","weight":6},{"id":"1569566663","weight":4},{"id":"1569566067","weight":4},{"id":"1569566825","weight":4},{"id":"1569566241","weight":4},{"id":"1569564807","weight":9},{"id":"1569566609","weight":3},{"id":"1569563007","weight":2},{"id":"1569566113","weight":9},{"id":"1569566443","weight":5},{"id":"1569566727","weight":11},{"id":"1569565315","weight":3},{"id":"1569566417","weight":2},{"id":"1569560581","weight":2},{"id":"1569559233","weight":20}],"meta":{"jsonClass":"HashMap$HashTrieMap","sessionid":"S13.T7.4","endtime":"16:00","authors":"Li Bing, Tor M. Aulin, Bao-Ming Bai","date":"1341502800000","papertitle":"Efficient Algorithms for Calculating Euclidean Distance Spectra of Muliti-User Continuous Phase Modulation Systems","starttime":"15:40","session":"S13.T7: Communication Systems","room":"Stratton (407)","paperid":"1569564353"},"cluster":{"jsonClass":"HashMap$HashTrieMap","spectral6":"3","spectral43":"12","spectral28":"18","spectral32":"3","spectral14":"5","spectral20":"2","spectral9":"1","spectral25":"16","spectral42":"17","spectral3":"1","spectral47":"39","spectral17":"3","louvain":"272","spectral36":"31","spectral39":"19","spectral10":"6","spectral15":"8","spectral33":"29","spectral5":"2","spectral21":"20","spectral44":"43","spectral26":"3","spectral40":"8","spectral8":"2","spectral11":"1","spectral4":"3","spectral37":"5","spectral48":"0","spectral22":"13","spectral23":"11","spectral12":"5","spectral50":"32","spectral19":"8","spectral34":"24","spectral45":"18","spectral7":"6","spectral49":"46","spectral38":"37","spectral24":"10","spectral13":"1","spectral31":"10","spectral29":"26","spectral35":"4","spectral30":"3","spectral41":"12","spectral27":"19","spectral18":"5","spectral46":"18","spectral2":"0","spectral16":"14"}}
