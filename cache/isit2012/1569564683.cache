{"id":"1569564683","paper":{"title":{"text":"On Fast and Memory-Efﬁcient Construction of an Antidictionary Array"},"authors":[{"name":"Hirotada Fukae"},{"name":"Takahiro Ota"},{"name":"Hiroyoshi Morita"}],"abstr":{"text":"Abstract\u2014 An antidictionary, a set of words that never appear in a given string, is a useful data structure for source coding as well as other ﬁelds of computer sciences. A fast and memory- efﬁcient algorithm for constructing antidictionaries by means of sufﬁx array is presented. We prove that the proposed algorithm constructs an antidictionary array with linear time and space."},"body":{"text":"Crochemore et al. [1] originally introduced an antidic- tionary, which is a set of minimal forbidden words, for a lossless data compression in 2000. A minimal forbidden word is a string of minimal length which never appears on a given input string. Various antidictionary codes have been proposed so far [2]\u2013[4]. Experimental results show that a version of antidictionary codes by Ota and Morita [4] performs as well as an efﬁcient off-line data compression algorithm using the Burrows-Wheeler transformation [5]. Up to the present, there have been proposed three efﬁcient algorithms [6]\u2013[8] for constructing antidictionaries as far as the authors know. For their construction, a sufﬁx automaton and a sufﬁx tree are utilized by Crochemore et al. [6] and Ota and Morita [7], [8], respectively. Although their algorithms are guaranteed to construct an antidictionary with time and space proportional to length of a given string, their complexity often exceed the machine power for 10 ∼100M byte data.\nTo resolve the issues on the complexities, Fiala and Holub [3] proposed a new construction algorithm of anti- dictionary by means of a sufﬁx array in 2008 since it is known that a sufﬁx array can be constructed with linear time and space complexity [9] as well and it has a much smaller proportional coefﬁcient of the time and space complexities compared with a sufﬁx automaton and a sufﬁx tree. However, their algorithm requires O(n log n) time and O(n) space with respect to input string length n.\nIn this paper, we propose a variation of a construction algorithm of antidictionary by means of a sufﬁx array. In addition to the sufﬁx array, we also introduce a new data structure, called L-array [10], which represents the length of the longest common preﬁx between two consecutive sufﬁxes in the sufﬁx array. Moreover, we show that the proposed algorithm works in O(n) time and space.\nLet X be a ﬁnite source alphabet {ξ 1 , ξ 2 , . . . , ξ m }. Let X ∗ be the set of all ﬁnite strings over X , including the empty string of length zero, denoted by λ. The length of a string x\nis denoted by |x|, and note that we also use | · | to represent a cardinality of a set and array. For a given string x, by letting n = |x|, a substring x j i is deﬁned as\nλ \t (i > j). \t (1) Hereafter, without any notice, we assume that the length of x is always given by n. Hence, the substring x n 1 of x equals x.\nLet P(x) and S(x) be the set of all preﬁxes and sufﬁxes of x, respectively.\nP(x) = {x i 1 |1 ≤ i ≤ n} ∪ {λ}, \t (2) S(x) = {x n j |1 ≤ j ≤ n} ∪ {λ}. \t (3)\nFor a given x n 1 , let π(x n 1 ) and σ(x n 1 ) be x n −1 1 ∈ P(x n 1 ) and x n 2 ∈ S(x n 1 ) For convenience, we deﬁne π(λ) = λ and σ(λ) = λ. For a non-negative integer k, let π k (x n 1 ) and σ k (x n 1 ) be the functions π( ·) and σ(·) applied k times to a string x n 1 , respectively, where π 0 (x n 1 ) = x n 1 and σ 0 (x n 1 ) = x n 1 .\nA dictionary D(x) is deﬁned as the set of all substrings of x, that is,\nv k 1 / ∈ D(x) \t (5) v k −1 1 ∈ D(x) \t (6)\nis called a Minimal Forbidden Word (MFW) of x. An antidic- tionary A(x) is the set of all MFWs of x. For convenience, we deﬁne D(λ) = {λ} and A(λ) = X . For example, A(x) for x = 122132 and X = {1, 2, 3, 4} is given by {4, 11, 23, 31, 33, 121, 212, 222, 321, 322}.\nLet lcp(v, w) be the length of the longest common preﬁx between v and w in X ∗ , that is,\nA sufﬁx x n j of x can be represented by its starting index j. A sufﬁx array S is an array consisting of n + 1 integers that represents the starting indexes of all the sufﬁxes of x in the following lexicographical order:\nFirstly, we introduce the total order into X , that is, ξ i < ξ j for 1 ≤ i < j ≤ m. For convenience, λ < ξ 1 . Secondly, for\nstrings v and w ∈ X ∗ \\{λ}, v is said to be smaller than w in the lexicographical order, denoted by v ≺ w, if and only if\nThen, S(x) can be written as S(x) = {s 0 , . . . , s n } (s i ≺ s j , 0 ≤ i < j ≤ n) where s 0 = λ. For convenience, we deﬁne s −1 = s n+1 = ⊥ where ⊥ represents the sentinel such that ⊥/∈ X ∗ . And set lcp( ⊥, v) = lcp(v, ⊥) = −1 for v ∈ X ∗ . Let the kth component of S, denoted by S[k], be deﬁned as\nIn other words, σ S[k] −1 (x) = s k . For x = 22212, S is represented as an array ⟨6, 4, 5, 3, 2, 1⟩ since S(x) = {λ, 12, 2, 212,2212, 22212}.\nLet L be an array of integers, called L-array, in which the ith component is given by lcp(s i , s i+1 ) for two adjacent sufﬁxes s i and s i+1 where the index i runs from −1 to n. The array L is also called hight array [10]. Note that L[ −1] = L[n] = −1 and |L| = n + 2. For example, L is ⟨ − 1, 0, 0, 1, 1, 2, −1⟩ for x = 22212.\nFor u ∈ D(x) and a ∈ X , the set of head symbols X H (u) of u is deﬁned as\nwhere a is called head symbol. Note that X H (λ) is a set of all symbols which appear in x, and X H (u) is the empty set ϕ iff u appears in x only once and u ∈P(x). For u∈D(x), a difference set between X H (π(u)) and X H (u), denoted by H(u), is deﬁned as\nFor u ∈D(x), there exists v ∈S(x) having u as its preﬁx, that is, v = uz for z ∈ X ∗ . A cover set C(u) is a set of successive indexes i of s i \u2019s such that u is a preﬁx of s i ;\nwhere C(λ) = {0, 1, . . . , n}. Moreover, let C(u). min and C(u). max be C(u). min = min{i | i ∈ C(u)} and C(u). max = max{i | i ∈ C(u)}, respectively. For example, for x = 22212 and u = 22, C(u) = {4, 5}. By using C(u), X H (u) can be written by\nAn antidictionary A(x) can be represented by a ∈ H(u) and u ∈ D(x) from Theorem 1.\nProof: We ﬁrst assume that au ∈A(x). From (7), a∈X and u ∈ D(x). In case of u = λ, a /∈ D(x). Since X H (λ) is the set of all symbols which appear in x, a ∈ X \\X H (λ). In\ncase of u ̸= λ, a ∈ X H (π(u)) \\X H (u) since au / ∈ D(x) and aπ(u) ∈ D(x). Hence, A(x)⊂{au | a∈H(u), u∈D(x)}.\nNext, we assume a ∈ H(u) and u ∈ D(x). In case of u = λ, X \\X H (λ) is the set of all symbols which never appear in x. Hence, if a ∈ X \\X H (λ), then a ∈ A(x). In case of u ̸= λ, au ∈ A(x) since aπ(u) ∈ D(x) and au /∈ D(x) from (12). Hence, {au | a ∈ H(u), u ∈ D(x)} ⊂ A(x).\nIf H(u) ̸= ϕ for u ∈ D(x), we call u MFW candidate. Let G T (x) be a set of all MFW candidates of x, that is,\nAs described in the next section, we use G T (x) and H(u) for u ∈G T (x) to construct A(x). B. Properties of Cover Set\nProposition 1. If C(u)⊂C(v) and |v|≤|u| for u, v ∈D(x), then v ∈P(u) and vice versa.\nProof: We ﬁrst assume that C(u) ⊂ C(v) and |v| ≤ |u|. Then, there exists i ∈ C(u) such that u ∈ P(s i ) and v ∈ P(s i ), which implies that v ∈ P(u).\nNext, we assume that v ∈ P(u). Clearly, |v| ≤ |u| holds. Since u is written as u = vw where w ∈ D(x), there exists a sufﬁx s i such that vw ∈ P(s i ). Moreover, since v ∈ P(s i ), i ∈ C(v). Therefore, C(u) ⊂ C(v).\nwhere p and q are C(u). min and C(u). max, respectively. Moreover, if p < q, then |u|≤min{L[i] | p≤i≤q−1}.\nProof: From (13), 0 ≤ p ≤ q ≤ n. In case of p = 0, L[p − 1]=L[−1]=−1. Since |u|≥0, we have |u|>L[p − 1]. In case of 1 ≤ p ≤ n, u /∈ P(s p −1 ) from (13). Therefore, |u| > lcp(s p −1 , u). Moreover, since s p = uv for v ∈ X ∗ , lcp(s p −1 , u) = lcp(s p −1 , s p ) = L[p − 1]<|u|.\nIn case of q = n, L[q] = L[n] = −1 holds. Since |u| ≥ 0, |u| > L[q]. In case of 0 ≤ q ≤ n−1, u /∈ P(s q+1 ) from (13). Therefore, |u| > lcp(u, s q+1 ). Moreover, since s q = uw for w ∈X ∗ , lcp(u, s q+1 ) = lcp(s q , s q+1 ) = L[q] < |u|. Thus, (17) holds.\nNext, if p < q, then u ∈ P(s k ) for p ≤ k ≤ q. Therefore, |u| ≤ min{L[i] | p ≤ i ≤ q − 1} since |u| ≤ L[j] for p ≤ j ≤ q − 1.\nSince |D(x)| in (15) is proportional to n 2 in the worst case, a na¨ıve construction of A(x) requires O(n 2 ) time. The next theorem gives a ground to construct an antidictionary with O(n) computational time.\nTheorem 2. For x ∈ X ∗ , G T (x) ⊂G(x) and |G(x)|≤2n+1. To prove Theorem 2, we ﬁrst give Lemmas 1 and 2\ndescribed below. Before showing the lemmas, we prepare a few more notations. For i (0 ≤ i ≤ n), partition P(s i ) into two disjoint subsets F(i) and E(i) deﬁned by\nF(i)={v∈P(s i ) ||v|̸=lcp(s i , s k )+1, −1≤k ≤n+1}, (18) E(i)={v∈P(s i ) ||v|=lcp(s i , s k )+1, −1≤k ≤n+1}. (19)\nMoreover, for s i (0 ≤ i ≤ n), let ¯u i ∈ P(s i ) and ¯ d i ∈ P(s i ) be the strings such that\n|¯u i | = L[i − 1] + 1, \t (20) |¯d i | = L[i] + 1≤|s i |. \t (21)\nNote that, for ¯ u i and ¯ d i , both C(¯u i ). min and C(¯d i ). max equal i and in case of L[i] = |s i |, ¯d i does not exist.\nProof: We assume that H(v) ̸= ϕ. Since λ ∈ E(i), we consider the case that v ∈ P(s i ) \\{λ}. From the assumption, there exists a ∈ X H (π(v)) \\X H (v) = H(v). Therefore, aπ(v) ∈ D(x) and av = aπ(v)b /∈ D(x) hold. Moreover, there exists w ∈ X ∗ such that aπ(v)w ∈ D(x) and b /∈ P(w). Since lcp(π(v)b, π(v)w) = |π(v)| and π(v)b is a preﬁx of s i , lcp(s i , π(v)w) = |π(v)|.\nOn the other hand, since π(v)w ∈ D(x), there exists k such that s k has π(v)w as its preﬁx. Therefore, lcp(s i , s k ) = |π(v)|. However, since |v| = |π(v)| + 1, it contradicts the assumption |v| ̸= lcp(s i , s k ) + 1. Therefore, H(v) = ϕ.\nLemma 2. If z ∈ E(i), then there exists k such that z = ¯u k or z = ¯ d k .\nProof: Let l and m be C(z). min and C(z). max, respec- tively. From (19) and since S(x) is an array of all sorted sufﬁxes, |z| = lcp(s l −1 , s i ) + 1 or |z| = lcp(s i , s m+1 ) + 1. Moreover, from (13), lcp(s l −1 , s i ) = lcp(s l −1 , s l ) and lcp(s i , s m+1 ) = lcp(s m , s m+1 ). Since lcp(s l −1 , s l ) + 1 = L[l −1]+1 and lcp(s m , s m+1 )+1 = L[m]+1, |z| = L[l−1]+1 or |z| = L[m] + 1. Therefore, k is given by m or l − 1. It completes the proof.\nFrom Lemmas 1 and 2, a set of MFW candidates, denoted by G(x), is given by\n(Proof of Theorem 2): For u ∈ D(x)\\G(x), there exists k such that u ∈ F(k) since D(x) can be written by {v | v ∈ P(s i ), 0 ≤ i ≤ n}. Therefore, from Lemma 1, |H(u)| = 0. On the other hand, u ∈ D(x) and |H(u)| ≥ 0 for u ∈ G(x). Therefore, from (16), G T (x) ⊂ G(x) holds. From (20) and (21), {¯u i } is a singleton set and {¯d i } is a singleton set or ϕ. Since L[ −1] = L[n] = −1, {¯u 0 } = {¯d n } = {λ}. If n ≥ 1, then {¯d 0 } = ϕ for s 0 = λ and L[0] = 0. Therefore, | ∪ n i=0 ( {¯u i } ∪ {¯d i })| ≤ 2n + 1. Hence, |G(x)| ≤ 2n + 1.\nFrom Theorem 2, the upper bound of the total number of MFW candidates is at most 2n+1. From (20) and (21), ¯ u i and ¯ d i can be obtained in a constant time by means of S and L.\nOn the other hand, we need to sort all elements of G(x) to calculate both X H (v) and X H (π(v)) for a given v ∈ G(x) in a constant time. Here, G(x) can be written as\nwhere m = |G(x)|−1 and g 0 = λ. Moreover, from (14), both C(v). min and C(v). max are required to calculate X H (v). Therefore, g i is represented by a triplet\n{¯u i } and ∪ n i=0 {¯d i }. We construct G(x) from G U (x) and G D (x) by mean of the Merge Sort [11] in linear time. Then, G U (x) and G D (x) can be written as\nG U (x) = {u 0 , . . . , u n } (u i ≺u j , 0 ≤i<j ≤n), \t (25) G D (x) = {d 0 , . . . , d k } (d i ≺d j , 0 ≤i<j ≤k, k =|G D (x) |).\nSince ¯ u i and ¯ d i are also represented by (24), we will give Propositions 3 and 4 to construct G U (x), G D (x), and G(x).\nProposition 3. For u, v ∈ D(x), if C(u). min < C(v). min, then u ≺ v.\nProof: Let C(u). min and C(v). min be i and j, respec- tively. From (13), u ∈ P(s i ), and v ∈ P(s j ). From (13) and i < j, i / ∈ C(v). Therefore, from (13), u /∈ P(s j ). Moreover, since s i ≺ s j , u ≺ v holds.\nSince C(¯u i ). min = i, C(¯u i ). min < C(¯u j ). min holds for j such that 0 ≤ i < j ≤ n. Therefore, Corollary 1 holds.\nCorollary 1. For ¯ u i and ¯ u j such that 0 ≤i<j ≤n, ¯u i ≺ ¯u j . From Corollary 1, G U (x) can be written as ⟨¯u 0 , . . . , ¯ u n ⟩.\nIn other words, ¯ u i = u i (0 ≤ i ≤ n). To construct G D (x) and G(x) in O(n) time, we give Proposition 4.\nProposition 4. For u, v ∈ D(x), if C(u). min = C(v). min and C(u). max > C(v). max, then u ≺ v.\nProof: From (13), C(v)⊊C(u). We assume that |u|≥|v|. For p ∈ C(u)∩C(v), u ∈ P(s p ) and v ∈ P(s p ). Therefore, from the assumption |u| ≥ |v|, C(u) ⊂ C(v). It contradicts the assumption C(v) ⊊ C(u). Hence, |u| < |v| holds. Since |u| < |v| and C(v) ⊂ C(u), from Proposition 1, u ≺ v.\nIn a na¨ıve construction of ¯ u i , we do obtain |¯u i | and C(¯u i ). min in (24) in a constant time while we may not do C(¯u i ). max so. On the other hand, from Proposition 2, C(¯u i ). max = min {j | |¯u i | > L[j], i ≤ j ≤ n}. In other words, for a given i, C(¯u i ). max is the nearest small right neighborhood. Similarly, in a na¨ıve construction of ¯ d i , we obtain |¯d i | and C(¯d i ). max in (24) in a constant time while we may not C(¯d i ). max. On the other hand, from Proposition 2, C(¯d i ). max = max {k | |¯d i | > L[k − 1], 0 ≤ k ≤ i}. Thus, C(¯d i ). max is the nearest small left neighborhood. The total time of the nearest right and left small neighborhood is O(n) and the details are described in this section. Note that a ﬁnding nearest large (small) neighborhood algorithm in linear complexity has been proposed [12].\nWe now present the algorithm to construct G(x) in linear time. We will use a stack s to store integers as its elements. Let s.push ( ·) and s.pop () be the functions to store and retrieve elements from the stack, respectively, and let s.is empty () be the function to check whether the stack is empty. If d i does not exists for i, we denote ¯ d i by ε. Moreover, for g ∈ G(x), let g.len, g.min, and g.max be |g|, C(g). min, and C(g). max, respectively. The algorithm uses the procedure merge sort ( G U (x), G D (x)) to construct G(x) using the Merge Sort algorithm by means of Propositions 3 and 4. In the Merge Sort, notice that if a string is already stored in G(x), then its\nduplicate is never added to G(x). The outline of the algorithm is as follows.\nIn Step 2 and Step 3, ﬁnding the nearest right (resp. left) small neighborhoods for u i . len and d i . len are imple- mented, respectively. Moreover, in Step 3, G D (x) is built from {¯d i | ¯d i ̸= ε, 0 ≤ i ≤ n}. For ¯d i and ¯ d j (i < j), since C(¯d i ). max < C(¯d j ). max, {¯d i | ¯d i ̸= ε, 0 ≤ i ≤ n} is a set of sorted strings with respect to the maximum value of their cover sets. From Propositions 3 and 4, G D (x) can be built from {¯d i |¯d i ̸= ε, 0 ≤ i ≤ n} by means of the nearest small left neighborhood searching algorithm. Step 4 uses Propositions 3 and 4 to sort strings in G U (x) and G D (x) by the Merge Sort. B. Construction of Sets of Head Symbols\nFor g i ( ̸= λ), let l(i) be an integer such that l(i) = max {j | j < i, |g j | < |g i |}. For a given g i , to calculate X H (π(g i )) in a constant time, we ﬁrst show Proposition 5.\nProposition 5. For a given g i ( ̸=λ), X H (π(g i )) = X H (g l(i) ). Proof: Since G(x) is an array of sorted strings, g l(i) is\nthe longest string in P(g i ) ∩ {g 0 , . . . , g i −1 }. Moreover, since |g l(i) | < |g i |, g l(i) ∈ P(π(g i )). Hence, from Proposition 1,\nC(π(g i )) ⊂C(g l(i) ). In case of |π(g i ) | = |g l(i) |, since π(g i ) = g l(i) , X H (π(g i )) = X H (g l(i) ) holds.\nNext, we consider the case that |g l(i) | < |π(g i ) |. We assume that C(g l(i) ) \\C(π(g i )) ̸= ϕ. For j ∈ C(g l(i) ) ∩ C(π(g i )) and k ∈ C(g l(i) ) \\C(π(g i )), lcp(s j , s k ) = |g l(i) | since g l(i) ∈ P(π(g i )). Hence, from (19), there exists w ∈ X ∗ such that w ∈ E(j) and |w| = |g l(i) | + 1 so that w ∈ G(x) from Lemma 2. On the other hand, since g l(i) , w ∈ P(g i ) and |g l(i) | < |w| < |g i |, g l(i) ≺ w ≺ g i . However, it contradicts the maximality of g l(i) since g l(i) ≺ w ≺ g i and |g l(i) | < |w| < |g i |. Hence, C(g l(i) ) \\C(π(g i )) = ϕ. Therefore, from (14), X H (π(g i )) = X H (g l(i) ).\nFrom Corollary 2, to obtain X H (π(g i )), we can utilize g l(i) instead of π(g i ).\nWe now present the algorithm to construct H(g i ) in linear time. Let X H (i) and H be X H (g i ) and an array of H(g i ), re- spectively. For a given a ∈X , X H (i). add(a) and H(u).add(a) add a symbol a to X H (i) and H(u), respectively.\nFor a given a and u, if Λ(a) ∈ C(u), then a ∈ X H (u). Thus, Step 2 uses the fact whether g k . min ≤ Λ(a) ≤ g k . max is satisﬁed or not. Step 3-1 calculates l(i) , and g l(i) is the nearest left small neighborhood for g i with respect to string length. Step3-2 utilizes Proposition 5.\nFrom Theorem 1, A(x) can be constructed from G(x) and H. We now present the algorithm to construct A(x) in linear time. In the proposed algorithm, an MFW u (= av) is represented by a triplet (a, i, l) where a ∈ H(u), i is the start index of v in x, and l = |v|. In case of u = λ, l = 0. The algorithm uses the procedure construct sufﬁx array (x) and construct L array (x, S) to construct S and L using the algorithm presented in [9] and [10], respectively. The outline of the algorithm is as follows.\nTheorem 3. For a given string x of length n, T (n) = O(n). We ﬁrst prove Theorems 4 and 5 to prove Theorem 3.\nFor a given string x of length n, let T G (n) and T H (n) be time complexity of the construct G and construct H algorithm, respectively.\nTheorem 4. For a given string x of length n, T G (n) = O(n). Sketch of Proof: Let T 1 , T 2 , T 3 , and T 4 be the execution\ntime of Step 1, Step 2, Step 3 and Step 4, respectively. The time complexity T G (n) of the proposed algorithm can thus be expressed by T G (n) = T 1 + T 2 + T 3 + T 4 . From Theorem 2, both T 1 and T 4 are O(n). In Step 2 and Step 3, the upper bound on the number of times of s.push ( ·) is 2n+2. The number of times of s.pop () is also upper bounded by 2n+2. Therefore, T 2 and T 3 are O(n). Hence, T G (n) = O(n).\nTheorem 5. For a given string x of length n, T H (n) = O(n). Sketch of Proof: Let T 1 , T 2 , T 3 , T 31 , and T 32 be the\nexecution time of Step 1, Step 2, Step 3, Step 3-1, and Step 3- 2, respectively. The time complexity T H (n) of the proposed algorithm can thus be expressed by T H (n) = T 1 + T 2 + T 3 .\nAs for T 1 , T 1 = O(1). In Step 2, since 0 ≤ i ≤ n and from Theorem 2, the total number of times of operations in lines 10-16 is upper bounded by 3n+1. Hence, T 2 = O(n). For T 3 , T 3 = T 31 + T 32 + c where c is a positive constant. In Step 3-1, the number of times of s.push ( ·) and s.pop () is upper bounded by 2n since g 0 has the strictly smallest length 0 among all the elements of the stack. Hence, T 31 = O(n). Since T 32 = O(n), T 3 = O(n). Therefore, T H (n) = O(n).\n(Sketch of Proof of Theorem 3): Let T 1 , T 2 , T 3 , T 4 , and T 5 be the execution time of Step 1, Step 2, Step 3, Step 4, and Step 5, respectively. The time complexity T (n) of the proposed algorithm can thus be expressed by T (n) = T 1 + T 2 + T 3 + T 4 + T 5 .\nFrom [9], T 1 = O(n), and from [10], T 2 = O(n). Moreover, from Theorem 4, T 3 = O(n), and from Theorem 5, T 4 = O(n). From Theorem 2, since |G(x)| ≤ 2n + 1, T 5 = O(n). It follows that T (n) = O(n).\nFrom Theorem 3, the proposed algorithm SA2AD works in linear time. Moreover, the proposed algorithm works in linear space. The proof with respect to computational space is omitted here.\nWe presented a fast and memory-efﬁcient algorithm for the construction of the antidictionary of a given string, and we showed that the time and space complexity is linear with the string length. This allows antidictionary codes to use extremely longer string lengths and thus yield better compression."},"refs":[{"authors":[{"name":"M. Crochemore"},{"name":"F. Mignosi"},{"name":"A. Restivo"},{"name":"S. Salemi"}],"title":{"text":"Data Compres- sion Using Antidictionaries"}},{"authors":[{"name":"M. Crochemore"},{"name":"C. Epifanio"},{"name":"R. Grossi"},{"name":"F. Mignosi"}],"title":{"text":"A Trie-Based Approach for Compacting Automata"}},{"authors":[{"name":"M. Fiala"},{"name":"J. Holub"}],"title":{"text":"DCA Using Sufﬁx Arrays"}},{"authors":[{"name":"T. Ota"},{"name":"H. Morita"}],"title":{"text":"On the Adaptive Antidictionary Code Using Minimal Forbidden Words with Constant Lengths"}},{"authors":[{"name":"M. Burrows"},{"name":"J. Wheeler"}],"title":{"text":"A Block-Sorting Lossless Data Compres- sion Algorithm"}},{"authors":[{"name":"M. Crochemore"},{"name":"F. Mignosi"},{"name":"A. Restivo"}],"title":{"text":"Automata and Forbidden Words"}},{"authors":[{"name":"T. Ota"},{"name":"H. Morita"}],"title":{"text":"On the Construction of an Antidictionary with Linear Complexity Using the Sufﬁx Tree"}},{"authors":[{"name":"T. Ota"},{"name":"H. Morita"},{"name":"H. Fukae"}],"title":{"text":"On the Dynamic Construction of an Antidictionary with Linear Complexity"}},{"authors":[{"name":"J. K¨arkk¨ainen"},{"name":"P. Sanders"}],"title":{"text":"Simple Linear Work Sufﬁx Array Con- struction"}},{"authors":[{"name":"T. Kasai"},{"name":"G. Lee"},{"name":"H. Arimura"},{"name":"S. Arikawa"},{"name":"K. Park"}],"title":{"text":"Linear- Time Longest-Common-Preﬁx Computation in Sufﬁx Arrays and Its Applications"}},{"authors":[],"title":{"text":"R"}},{"authors":[{"name":"T. Asano"},{"name":"S. Bereg"},{"name":"D. Kirkpatrick"}],"title":{"text":"Finding Nearest Larger Neighbors -A Case Study in Algorithm Design and Analysis-"}}]},"file":{"jsonClass":"File","file":"/home/arnfred/Code/trailhead/resources/isit2012/1569564683.pdf"},"links":[{"id":"1569566567","weight":2},{"id":"1569564843","weight":8},{"id":"1569566381","weight":2},{"id":"1569566527","weight":8},{"id":"1569566485","weight":8},{"id":"1569565383","weight":2},{"id":"1569565883","weight":5},{"id":"1569564889","weight":6},{"id":"1569565223","weight":2},{"id":"1569566725","weight":15},{"id":"1569565377","weight":3},{"id":"1569566385","weight":8},{"id":"1569564635","weight":5},{"id":"1569565867","weight":3},{"id":"1569566799","weight":5},{"id":"1569565067","weight":3},{"id":"1569559665","weight":4},{"id":"1569561021","weight":12},{"id":"1569565691","weight":2},{"id":"1569566875","weight":7},{"id":"1569564605","weight":4},{"id":"1569566981","weight":3},{"id":"1569566433","weight":3},{"id":"1569566321","weight":7},{"id":"1569566605","weight":3},{"id":"1569565489","weight":4},{"id":"1569566683","weight":6},{"id":"1569566855","weight":4},{"id":"1569560629","weight":2},{"id":"1569566869","weight":4},{"id":"1569565097","weight":3},{"id":"1569566227","weight":2},{"id":"1569566091","weight":5},{"id":"1569559259","weight":9},{"id":"1569566697","weight":6},{"id":"1569566597","weight":11},{"id":"1569565551","weight":5},{"id":"1569565711","weight":11},{"id":"1569566761","weight":4},{"id":"1569566943","weight":11},{"id":"1569565091","weight":6},{"id":"1569566591","weight":7},{"id":"1569556029","weight":2},{"id":"1569566571","weight":4},{"id":"1569552245","weight":5},{"id":"1569565495","weight":2},{"id":"1569559967","weight":5},{"id":"1569567045","weight":23},{"id":"1569565227","weight":3},{"id":"1569564481","weight":10},{"id":"1569560833","weight":9},{"id":"1569566415","weight":12},{"id":"1569564805","weight":5},{"id":"1569567005","weight":9},{"id":"1569566469","weight":2},{"id":"1569566081","weight":8},{"id":"1569565355","weight":5},{"id":"1569564469","weight":2},{"id":"1569565931","weight":7},{"id":"1569566373","weight":3},{"id":"1569566647","weight":4},{"id":"1569551535","weight":11},{"id":"1569564897","weight":7},{"id":"1569565775","weight":3},{"id":"1569565547","weight":2},{"id":"1569566871","weight":5},{"id":"1569565461","weight":8},{"id":"1569564245","weight":2},{"id":"1569564731","weight":5},{"id":"1569565171","weight":2},{"id":"1569566207","weight":10},{"id":"1569564227","weight":4},{"id":"1569558325","weight":5},{"id":"1569565837","weight":2},{"id":"1569566671","weight":3},{"id":"1569566303","weight":3},{"id":"1569566119","weight":2},{"id":"1569564233","weight":5},{"id":"1569566459","weight":2},{"id":"1569567535","weight":3},{"id":"1569563411","weight":7},{"id":"1569560427","weight":5},{"id":"1569564401","weight":7},{"id":"1569564849","weight":4},{"id":"1569559541","weight":3},{"id":"1569565317","weight":2},{"id":"1569566363","weight":4},{"id":"1569566319","weight":2},{"id":"1569565123","weight":3},{"id":"1569566941","weight":2},{"id":"1569566033","weight":9},{"id":"1569566739","weight":3},{"id":"1569555811","weight":2},{"id":"1569558459","weight":4},{"id":"1569565609","weight":8},{"id":"1569565291","weight":4},{"id":"1569564203","weight":6},{"id":"1569566821","weight":5},{"id":"1569556713","weight":13},{"id":"1569566467","weight":6},{"id":"1569565771","weight":2},{"id":"1569566157","weight":5},{"id":"1569560613","weight":2},{"id":"1569566903","weight":4},{"id":"1569566999","weight":3},{"id":"1569565859","weight":9},{"id":"1569565809","weight":3},{"id":"1569566843","weight":3},{"id":"1569566579","weight":3},{"id":"1569558483","weight":5},{"id":"1569566563","weight":4},{"id":"1569566089","weight":3},{"id":"1569559221","weight":6},{"id":"1569556091","weight":2},{"id":"1569565347","weight":11},{"id":"1569566925","weight":7},{"id":"1569564387","weight":5},{"id":"1569565455","weight":2},{"id":"1569566497","weight":4},{"id":"1569566795","weight":5},{"id":"1569566963","weight":19},{"id":"1569561679","weight":2},{"id":"1569566709","weight":5},{"id":"1569564989","weight":2},{"id":"1569566787","weight":2},{"id":"1569566717","weight":2},{"id":"1569560721","weight":3},{"id":"1569566015","weight":3},{"id":"1569566523","weight":4},{"id":"1569565897","weight":3},{"id":"1569551763","weight":5},{"id":"1569565953","weight":3},{"id":"1569566895","weight":2},{"id":"1569566889","weight":3},{"id":"1569565709","weight":3},{"id":"1569566269","weight":9},{"id":"1569564189","weight":8},{"id":"1569564195","weight":2},{"id":"1569561513","weight":5},{"id":"1569566985","weight":5},{"id":"1569564613","weight":2},{"id":"1569565369","weight":3},{"id":"1569567009","weight":4},{"id":"1569566865","weight":2},{"id":"1569565321","weight":5},{"id":"1569558785","weight":5},{"id":"1569564647","weight":3},{"id":"1569566095","weight":3},{"id":"1569566193","weight":4},{"id":"1569564271","weight":2},{"id":"1569564337","weight":3},{"id":"1569565907","weight":6},{"id":"1569566343","weight":9},{"id":"1569564311","weight":3},{"id":"1569565803","weight":2},{"id":"1569565785","weight":4},{"id":"1569566239","weight":5},{"id":"1569566167","weight":3},{"id":"1569566679","weight":10},{"id":"1569565989","weight":5},{"id":"1569566575","weight":9},{"id":"1569563981","weight":22},{"id":"1569561085","weight":4},{"id":"1569566419","weight":2},{"id":"1569566617","weight":2},{"id":"1569559565","weight":5},{"id":"1569566905","weight":11},{"id":"1569566733","weight":2},{"id":"1569563307","weight":13},{"id":"1569566063","weight":8},{"id":"1569558681","weight":3},{"id":"1569566759","weight":7},{"id":"1569565589","weight":2},{"id":"1569559195","weight":4},{"id":"1569566149","weight":5},{"id":"1569566657","weight":10},{"id":"1569558859","weight":3},{"id":"1569565199","weight":2},{"id":"1569565213","weight":3},{"id":"1569566643","weight":3},{"id":"1569566511","weight":5},{"id":"1569566719","weight":5},{"id":"1569566991","weight":2},{"id":"1569565841","weight":2},{"id":"1569566369","weight":8},{"id":"1569566531","weight":6},{"id":"1569567665","weight":3},{"id":"1569561143","weight":13},{"id":"1569566581","weight":7},{"id":"1569565833","weight":6},{"id":"1569566489","weight":3},{"id":"1569565535","weight":4},{"id":"1569562867","weight":7},{"id":"1569566395","weight":4},{"id":"1569565667","weight":11},{"id":"1569561795","weight":4},{"id":"1569566845","weight":2},{"id":"1569566325","weight":13},{"id":"1569566423","weight":3},{"id":"1569565257","weight":2},{"id":"1569564795","weight":2},{"id":"1569567015","weight":8},{"id":"1569559805","weight":7},{"id":"1569566437","weight":4},{"id":"1569566851","weight":2},{"id":"1569558901","weight":3},{"id":"1569565735","weight":6},{"id":"1569553909","weight":3},{"id":"1569559111","weight":12},{"id":"1569566687","weight":3},{"id":"1569564881","weight":2},{"id":"1569566939","weight":3},{"id":"1569553537","weight":6},{"id":"1569565427","weight":6},{"id":"1569566403","weight":2},{"id":"1569565839","weight":3},{"id":"1569565915","weight":4},{"id":"1569552251","weight":7},{"id":"1569566139","weight":3},{"id":"1569553519","weight":6},{"id":"1569567051","weight":2},{"id":"1569566885","weight":6},{"id":"1569564441","weight":3},{"id":"1569566231","weight":2},{"id":"1569564209","weight":27},{"id":"1569566513","weight":2},{"id":"1569566425","weight":2},{"id":"1569554881","weight":9},{"id":"1569554971","weight":9},{"id":"1569565501","weight":6},{"id":"1569566899","weight":3},{"id":"1569566445","weight":5},{"id":"1569566209","weight":6},{"id":"1569566649","weight":3},{"id":"1569566791","weight":4},{"id":"1569565559","weight":4},{"id":"1569566371","weight":4},{"id":"1569565655","weight":12},{"id":"1569566909","weight":2},{"id":"1569566127","weight":4},{"id":"1569565151","weight":3},{"id":"1569558985","weight":6},{"id":"1569563763","weight":15},{"id":"1569566473","weight":9},{"id":"1569564857","weight":8},{"id":"1569564333","weight":2},{"id":"1569566913","weight":9},{"id":"1569566809","weight":3},{"id":"1569566629","weight":4},{"id":"1569566257","weight":3},{"id":"1569565033","weight":11},{"id":"1569566447","weight":7},{"id":"1569566357","weight":2},{"id":"1569565817","weight":3},{"id":"1569565847","weight":5},{"id":"1569564353","weight":6},{"id":"1569563897","weight":3},{"id":"1569557083","weight":3},{"id":"1569565887","weight":16},{"id":"1569565929","weight":4},{"id":"1569566141","weight":5},{"id":"1569553591","weight":2},{"id":"1569564677","weight":3},{"id":"1569563231","weight":9},{"id":"1569565633","weight":4},{"id":"1569566661","weight":2},{"id":"1569565279","weight":3},{"id":"1569555879","weight":11},{"id":"1569566115","weight":3},{"id":"1569565219","weight":5},{"id":"1569558509","weight":6},{"id":"1569554759","weight":4},{"id":"1569565595","weight":4},{"id":"1569565185","weight":4},{"id":"1569566773","weight":3},{"id":"1569564985","weight":3},{"id":"1569565095","weight":2},{"id":"1569566223","weight":4},{"id":"1569558401","weight":3},{"id":"1569566553","weight":2},{"id":"1569564973","weight":2},{"id":"1569564969","weight":16},{"id":"1569565029","weight":10},{"id":"1569565357","weight":4},{"id":"1569561245","weight":4},{"id":"1569566505","weight":5},{"id":"1569565393","weight":6},{"id":"1569565933","weight":9},{"id":"1569562207","weight":8},{"id":"1569565705","weight":6},{"id":"1569566191","weight":4},{"id":"1569567033","weight":12},{"id":"1569565527","weight":9},{"id":"1569566853","weight":2},{"id":"1569566603","weight":3},{"id":"1569567029","weight":5},{"id":"1569565363","weight":4},{"id":"1569566159","weight":7},{"id":"1569566695","weight":6},{"id":"1569566051","weight":6},{"id":"1569561379","weight":3},{"id":"1569561123","weight":7},{"id":"1569565467","weight":2},{"id":"1569566655","weight":3},{"id":"1569566673","weight":8},{"id":"1569567235","weight":3},{"id":"1569565739","weight":4},{"id":"1569565311","weight":3},{"id":"1569566233","weight":4},{"id":"1569566667","weight":3},{"id":"1569566297","weight":3},{"id":"1569566893","weight":12},{"id":"1569566317","weight":2},{"id":"1569564097","weight":2},{"id":"1569560997","weight":11},{"id":"1569563845","weight":5},{"id":"1569560349","weight":4},{"id":"1569566501","weight":11},{"id":"1569565741","weight":20},{"id":"1569566275","weight":7},{"id":"1569566481","weight":12},{"id":"1569565545","weight":4},{"id":"1569566857","weight":6},{"id":"1569566387","weight":2},{"id":"1569566245","weight":8},{"id":"1569560503","weight":3},{"id":"1569565463","weight":4},{"id":"1569566219","weight":3},{"id":"1569565439","weight":5},{"id":"1569566229","weight":9},{"id":"1569566133","weight":2},{"id":"1569562551","weight":7},{"id":"1569563395","weight":4},{"id":"1569566901","weight":2},{"id":"1569551347","weight":3},{"id":"1569565415","weight":3},{"id":"1569555367","weight":3},{"id":"1569561623","weight":2},{"id":"1569564485","weight":6},{"id":"1569565155","weight":3},{"id":"1569566631","weight":6},{"id":"1569565571","weight":4},{"id":"1569565885","weight":7},{"id":"1569566177","weight":6},{"id":"1569565493","weight":3},{"id":"1569557633","weight":6},{"id":"1569564411","weight":5},{"id":"1569566805","weight":3},{"id":"1569559199","weight":2},{"id":"1569566929","weight":3},{"id":"1569566293","weight":12},{"id":"1569565665","weight":9},{"id":"1569566831","weight":4},{"id":"1569565549","weight":5},{"id":"1569565523","weight":5},{"id":"1569565611","weight":12},{"id":"1569557715","weight":11},{"id":"1569564175","weight":2},{"id":"1569566983","weight":21},{"id":"1569566097","weight":7},{"id":"1569566479","weight":8},{"id":"1569556361","weight":4},{"id":"1569566431","weight":2},{"id":"1569565397","weight":6},{"id":"1569566873","weight":10},{"id":"1569565765","weight":12},{"id":"1569565925","weight":9},{"id":"1569565435","weight":3},{"id":"1569557275","weight":4},{"id":"1569565263","weight":2},{"id":"1569566129","weight":2},{"id":"1569566261","weight":3},{"id":"1569565215","weight":3},{"id":"1569565385","weight":4},{"id":"1569565575","weight":3},{"id":"1569565919","weight":22},{"id":"1569565181","weight":3},{"id":"1569566711","weight":10},{"id":"1569565241","weight":3},{"id":"1569566927","weight":3},{"id":"1569565661","weight":2},{"id":"1569565865","weight":2},{"id":"1569566887","weight":2},{"id":"1569565273","weight":6},{"id":"1569565319","weight":11},{"id":"1569566267","weight":3},{"id":"1569564131","weight":4},{"id":"1569552037","weight":4},{"id":"1569564919","weight":8},{"id":"1569565511","weight":9},{"id":"1569566737","weight":7},{"id":"1569566429","weight":3},{"id":"1569566917","weight":7},{"id":"1569566253","weight":2},{"id":"1569565353","weight":4},{"id":"1569564305","weight":18},{"id":"1569564283","weight":3},{"id":"1569564291","weight":2},{"id":"1569566691","weight":5},{"id":"1569565421","weight":11},{"id":"1569566547","weight":2},{"id":"1569566651","weight":4},{"id":"1569565177","weight":2},{"id":"1569566823","weight":4},{"id":"1569566677","weight":2},{"id":"1569565349","weight":2},{"id":"1569552025","weight":2},{"id":"1569566137","weight":13},{"id":"1569565829","weight":3},{"id":"1569566237","weight":8},{"id":"1569566283","weight":6},{"id":"1569566529","weight":5},{"id":"1569565375","weight":5},{"id":"1569566715","weight":8},{"id":"1569565237","weight":6},{"id":"1569566819","weight":5},{"id":"1569565041","weight":4},{"id":"1569564703","weight":4},{"id":"1569566713","weight":3},{"id":"1569565541","weight":2},{"id":"1569565597","weight":2},{"id":"1569566813","weight":3},{"id":"1569565293","weight":3},{"id":"1569566771","weight":2},{"id":"1569564649","weight":6},{"id":"1569564201","weight":4},{"id":"1569562277","weight":8},{"id":"1569566641","weight":3},{"id":"1569565425","weight":4},{"id":"1569564247","weight":4},{"id":"1569564437","weight":10},{"id":"1569566533","weight":3},{"id":"1569563975","weight":4},{"id":"1569551905","weight":6},{"id":"1569564861","weight":5},{"id":"1569565457","weight":3},{"id":"1569564787","weight":5},{"id":"1569566487","weight":12},{"id":"1569565529","weight":9},{"id":"1569556759","weight":13},{"id":"1569566619","weight":3},{"id":"1569565271","weight":2},{"id":"1569561185","weight":12},{"id":"1569566075","weight":2},{"id":"1569566397","weight":2},{"id":"1569558779","weight":11},{"id":"1569563721","weight":3},{"id":"1569566001","weight":2},{"id":"1569565593","weight":3},{"id":"1569560235","weight":4},{"id":"1569566817","weight":4},{"id":"1569564157","weight":2},{"id":"1569565729","weight":2},{"id":"1569566389","weight":2},{"id":"1569566435","weight":5},{"id":"1569567483","weight":3},{"id":"1569566911","weight":2},{"id":"1569564923","weight":5},{"id":"1569565367","weight":2},{"id":"1569566299","weight":16},{"id":"1569564281","weight":2},{"id":"1569564769","weight":10},{"id":"1569565769","weight":2},{"id":"1569566171","weight":4},{"id":"1569566601","weight":2},{"id":"1569565805","weight":4},{"id":"1569561713","weight":4},{"id":"1569566933","weight":4},{"id":"1569563919","weight":21},{"id":"1569566577","weight":3},{"id":"1569557851","weight":5},{"id":"1569565389","weight":4},{"id":"1569559919","weight":8},{"id":"1569565861","weight":2},{"id":"1569566147","weight":3},{"id":"1569565537","weight":19},{"id":"1569559523","weight":4},{"id":"1569566057","weight":4},{"id":"1569562367","weight":3},{"id":"1569560785","weight":8},{"id":"1569565561","weight":2},{"id":"1569565631","weight":3},{"id":"1569560213","weight":3},{"id":"1569555891","weight":3},{"id":"1569566847","weight":2},{"id":"1569565997","weight":6},{"id":"1569563425","weight":7},{"id":"1569565035","weight":8},{"id":"1569559597","weight":2},{"id":"1569564961","weight":7},{"id":"1569559251","weight":5},{"id":"1569567013","weight":4},{"id":"1569566583","weight":4},{"id":"1569561861","weight":7},{"id":"1569565337","weight":3},{"id":"1569564253","weight":4},{"id":"1569565737","weight":3},{"id":"1569560459","weight":2},{"id":"1569564463","weight":5},{"id":"1569565853","weight":17},{"id":"1569550425","weight":6},{"id":"1569566273","weight":5},{"id":"1569564123","weight":10},{"id":"1569565889","weight":5},{"id":"1569566635","weight":2},{"id":"1569566611","weight":9},{"id":"1569551539","weight":4},{"id":"1569564505","weight":9},{"id":"1569565165","weight":8},{"id":"1569565565","weight":7},{"id":"1569565635","weight":3},{"id":"1569565731","weight":9},{"id":"1569566797","weight":10},{"id":"1569566125","weight":2},{"id":"1569566413","weight":4},{"id":"1569565707","weight":7},{"id":"1569565113","weight":3},{"id":"1569566375","weight":6},{"id":"1569565143","weight":2},{"id":"1569564257","weight":4},{"id":"1569565583","weight":4},{"id":"1569566555","weight":5},{"id":"1569564931","weight":2},{"id":"1569565373","weight":3},{"id":"1569566973","weight":4},{"id":"1569561579","weight":7},{"id":"1569566449","weight":2},{"id":"1569565031","weight":4},{"id":"1569564755","weight":2},{"id":"1569551541","weight":11},{"id":"1569566839","weight":4},{"id":"1569551751","weight":6},{"id":"1569558697","weight":5},{"id":"1569565139","weight":5},{"id":"1569565895","weight":2},{"id":"1569566663","weight":3},{"id":"1569564419","weight":5},{"id":"1569566067","weight":3},{"id":"1569566825","weight":6},{"id":"1569566615","weight":8},{"id":"1569564807","weight":3},{"id":"1569566609","weight":2},{"id":"1569563007","weight":4},{"id":"1569566113","weight":6},{"id":"1569566443","weight":3},{"id":"1569566727","weight":12},{"id":"1569565515","weight":2},{"id":"1569560581","weight":5},{"id":"1569559233","weight":3}],"meta":{"jsonClass":"HashMap$HashTrieMap","sessionid":"S7.T1.2","endtime":"15:20","authors":"Hirotada Fukae, Takahiro Ota, Hiroyoshi Morita","date":"1341327600000","papertitle":"On Fast and Memory-Efficient Construction of an Antidictionary Array","starttime":"15:00","session":"S7.T1: Lossless and Universal Source Coding","room":"Kresge Rehearsal B (030)","paperid":"1569564683"},"cluster":{"jsonClass":"HashMap$HashTrieMap","spectral6":"3","spectral43":"8","spectral28":"27","spectral32":"18","spectral14":"13","spectral20":"2","spectral9":"8","spectral25":"19","spectral42":"4","spectral3":"1","spectral47":"34","spectral17":"2","louvain":"232","spectral36":"6","spectral39":"23","spectral10":"2","spectral15":"8","spectral33":"8","spectral5":"4","spectral21":"10","spectral44":"21","spectral26":"3","spectral40":"12","spectral8":"2","spectral11":"10","spectral4":"2","spectral37":"31","spectral48":"6","spectral22":"4","spectral23":"19","spectral12":"7","spectral50":"49","spectral19":"8","spectral34":"30","spectral45":"29","spectral7":"4","spectral49":"9","spectral38":"20","spectral24":"22","spectral13":"1","spectral31":"0","spectral29":"17","spectral35":"32","spectral30":"1","spectral41":"28","spectral27":"5","spectral18":"14","spectral46":"24","spectral2":"0","spectral16":"14"}}
