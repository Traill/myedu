{"id":"1569565279","paper":{"title":{"text":"Private Stream Search at the Same Communication Cost as a Regular Search: Role of LDPC Codes"},"authors":[{"name":"Matthieu Finiasz"},{"name":"Kannan Ramchandran"}],"abstr":{"text":"Abstract\u2014Private Stream Search allows users to perform keyword-based queries to a database without revealing any information about the keywords they are searching. Using homomorphic encryption, Ostrovsky and Skeith proposed a computationally secure solution to this problem in 2005. However, their solution requires the server to send an answer of size O(mS log m) bits when m documents of S bits match the query, while a non-private query only requires mS bits. In this work we propose two new communication optimal constructions, both allowing a communication expansion factor (compared to a non-private query) asymptotically equal to 1 when m and S increase. More precisely, our ﬁrst scheme requires m(S + O(log t)) bits (where t is the size of the database) and our second scheme m(S + C) where C is a constant depending on the chosen computational security level."},"body":{"text":"The goal of Private Stream Search (PSS) is to be able to perform keyword-based search queries to a server, without disclosing any information about the keywords in the queries. For the moment, PSS is not widely used in practice, but it could play a key role in privacy protection. Compared to a standard non-private search, there is no fundamental reason for PSS to have a much higher latency (response time), bandwidth usage (response size) or to be less reliable (miss some matching documents). The main focus of this article is to show that, apart from the cost of the required cryptographic operations, PSS can indeed be as efﬁcient as a normal search.\nPrevious Works: The ﬁrst private stream search algorithm was introduced in 2005 by Ostrovsky and Skeith [1] and makes clever use of homomorphic encryption to hide the content of the query. This scheme requires the use of a public dictionary of possible keywords and is restricted to OR queries. We do not address these restrictions here, but any improvement to the original Ostrovsky-Skeith scheme in these domains will almost certainly also apply to the new schemes presented here. Following Ostrovsky and Skeith\u2019s work, some improvements have been proposed independently by Bethencourt, Song and Waters [2] and by Danezis and D´ıaz [3]. These improved schemes have the same structure as the original scheme and are focused mainly on improving the size of the response from the server (one of the main issues in the original proposal) and the reliability of the scheme. However, they are suboptimal in some aspects.\nOur Work: The main contribution of this paper is the proposal of two new private stream search algorithms that are centered on the Ostrovsky and Skeith construction. Both\nconstructions are founded on coding theory, resulting in a fundamental decomposition of the communication component of the PSS problem, thus allowing for state of the art results that improve signiﬁcantly on current schemes. Our ﬁrst scheme uses Reed-Solomon codes [4] and allows for a zero-error guarantee, while offering optimal communication rates. It can however be computationally heavy at the server. Our second scheme is based on irregular LDPC codes [5], [6] and is asymptotically optimal, thus interesting when a large number of documents (in practice, a few hundreds) match the query. We also propose an ofﬂine-online scheme, with a higher ofﬂine computational cost, but which allows the online step to be as efﬁcient as a standard non-private search: the response suffers no latency and the communication overhead remains minimal.\nAll known PSS schemes require the use of homomorphic encryption, that is, encryption schemes for which some com- putations can be performed on ciphertexts and have a meaning for the corresponding plaintext. The most famous example of homomorphic encryption is the Paillier cryptosystem [7] which allows to compute linear combinations of plaintexts by multiplying the associated ciphertexts. More precisely, if we denote by E and D the encryption and decryption functions, the Paillier cryptosystem has the following properties:\n\u2022 D(E(M 1 ) × E(M 2 )) = M 1 + M 2 , \u2022 D(E(M 1 ) c ) = c × M 1 .\nThis scheme is a public key encryption scheme (anyone can encrypt data, but only the legitimate key owner can decrypt it) and offers semantic security (it is computationally infeasible to distinguish between E(0) and E(1)). Semantic security is a necessary property for PSS, but it also implies that encryption should be randomized and, as such, induce a message expan- sion. In the case of Paillier\u2019s cryptosystem, documents are elements of Z N (integers modulo a large composite number N ) and ciphertexts belong in Z N 2 , inducing an expansion factor of 2. For larger documents, the Damg˚ard-Jurik exten- sion [8] allows documents in Z N s with ciphertexts in Z N s+1 (for any integer s), meaning the document is expanded by a constant number of bits log N , depending only on the security parameter N (typically of 1024 bits).\nA PSS scheme works in three steps: ﬁrst the user builds a query and sends it to the server, then the server executes the\nquery which outputs a result that it sends back to the user, ﬁnally the user extracts the queried documents from the result he received. Here is the description of these three algorithms for the original Ostrovsky-Skeith scheme.\n1) Query Construction: Let Ω = {w 1 , . . . , w |Ω| } be the dictionary of possible keywords and K ⊆ Ω the set of keywords the user wants to query. The query is Q = {q 1 , . . . , q |Ω| }, where q j = E(1 w j ∈K ) and E denotes a Paillier encryption and 1 denotes the indicator function. The user thus sends an encrypted bit for each element in the dictionary: this bit is 1 if the keyword is part of the user\u2019s search, 0 otherwise. As each encryption is independently randomized and due to the semantic security of Paillier\u2019s cryptosystem, the server cannot tell which encrypted bits are 1 and 0.\nAs part of the query, the user also sends m, the expected number of matching documents, and γ, a reliability parameter (a larger γ gives a better probability of recovering all matching documents, but increases the communication cost).\n2) Query Execution: When receiving the query (Q, m, γ), the server ﬁrst creates a buffer B of size ℓ = γm and initializes each of its positions to the value E(0).\nLet us assume the database contains t documents. Then, for each document f i ∈ Z N in the database, the server computes the set W i ⊆ Ω of keywords in the dictionary that match document f i . It then computes F i =\n) f i = ∏\nE(1 w j ∈K ) f i . Thanks to the homomorphic property of E, we also have: F i = E\n1 w j ∈K , the number of key- words of K that match f i . We thus have F i = E(c i f i ). The server then select γ random positions b i = {b i,1 , . . . , b i,γ } ⊂ [1, mγ] of the buffer B and updates each of these γ positions by multiplying its current value by F i .\nAfter processing all the documents in the database, the j-th buffer position will be equal to B j =\nE ( ∑ i 1 j ∈b i c i f i ) , that is, the encryption of a linear combi- nation of documents in the database. This linear combination is sparse if only few documents match the query K, meaning most of the c i are equal to 0. The server then sends the buffer B back to the user.\nIn practice, everything happens as if the server had a random binary matrix H of size γm × t with γ ones in each column and it was computing B = E(H × (c i f i ) i ∈[1,t] ).\n3) Document Extraction: When receiving the encrypted buffer B, the user starts by decrypting each buffer position to get D(B j ) =\n1 j ∈b i c i f i . He then scans the γm de- crypted buffer positions for what we call singletons: buffer positions that contain only one ﬁle, that is, positions such that\n1 j ∈b i c i = 0 for all but one value of i. The user discards all buffer positions that are not singletons and extracts the value f i of one document from each singleton.\nOf course, this operation is only possible if it is possible to detect singletons and if extracting the value of f i from a singleton is easy. This is possible by embedding a small checksum in each document.\n4) Asymptotic Cost: The encrypted buffer that is sent back by the server to the user has size γm. In order for\nthe user to be able to recover the m matching documents with a high probability of success, γ must be of the order of O(log m). If documents are S bits long, the answer is thus of order O(2mS log m) using Paillier\u2019s cryptosystem, or O(m(S + 1024) log m) using the Damg˚ard-Jurik extension (with a 1024-bits modulus N ). For a large number of matching documents, this construction is thus not very practical and some improvements are needed to keep the buffer size linear in the number of matching documents.\nLooking at the Ostrovsky-Skeith construction from an in- formation theory point of view, it appears that the server starts by computing an encrypted sparse 1 vector\nand optimizing communications consists in \u201ccompressing\u201d this vector before sending it to the user. As this vector is encrypted, standard compression techniques cannot be applied. However, the homomorphic property of E makes it possible to homomorphically multiply it by a matrix: if we consider this vector as an error pattern, we can compute its syndrome with respect to any parity check matrix. This is what we propose to do (with a few additional tweaks) in our new constructions.\nOur ﬁrst construction uses Reed-Solomon codes [4] and exploits their MDS property in the following way:\n\u2022 Reed-Solomon codes can correct up to m errors using 2m syndromes,\n\u2022 they can also correct m erasures (errors at a known position) using only m syndromes.\nA direct application of this would consist in multiplying the E(c i f i ) vector by the parity check matrix of a Reed- Solomon code over Z N . Then, recovering the value of any m documents would be equivalent to correcting m errors with the code and would only require ℓ = 2m buffer positions. This gives a PSS scheme with communications linear in the number of matching documents: 4mS bits have to be sent using the standard Paillier cryptosystem. However, it is possible to do better than a factor 4 expansion.\nIndeed, this straightforward application allows documents of log N bits, but also allows a database of up to N elements. In practice the database is much smaller than N (remember that for security reasons N will be at least of order 2 1024 ), and using a Reed-Solomon code over Z N is a waste. The server can encode the values of the c i (and their positions) as errors in a (smaller) Reed-Solomon code, and then encode the documents as erasures, which can be efﬁciently recovered once the c i are known. Here is how our algorithm works.\n1) Query Construction: This step is identical to the original Ostrovsky-Skeith algorithm, but without a parameter γ.\n2) Query Execution: As in the previous construction, for each document f i , the server computes the encryption E(c i ) of the number of keywords matching f i . Then, instead of simply computing E(c i ) f i , the server will embed several values in an integer f \u2032 j,i ∈ Z N as shown in Fig. 1. This requires two different Reed-Solomon codes RS and RS \u2032 . The code RS will be used to recover the c i and is deﬁned on Z p t where p t is the smallest prime greater than the database size t (it should also be greater than the dictionary size |Ω|) and the coefﬁcients of its parity check matrix are thus deﬁned as RS j,i = i j mod p t . Similarly, RS \u2032 will be used to recover the values of f i and is deﬁned over Z p f where p f is the largest prime that can ﬁt in the remaining bits of one Paillier plaintext. We have RS \u2032 j,i = i j mod p f . Thus, for each of the m positions of buffer B, the server multiplies B j by E(c i ) f \u2032 j,i .\n3) Document Extraction: The user starts by decrypting the buffer B. He then splits each plaintext he obtains in 3 parts: the ﬁrst part corresponding to\nc i RS 2j+1,i . Reducing the last two elements modulo p t for each j ∈ [1, m], the user gets 2m syndrome positions in RS of the sparse vector (c i ). This is enough to recover the values and positions of the m non-zero c i elements using the Reed-Solomon error correcting algorithm.\nThen, the user reduces the ﬁrst part of each plaintext modulo p f to obtain m syndrome positions in RS \u2032 of the sparse vector (c i f i ). As the non-zero c i elements are known, the positions of the non-zero c i f i are also known, and the user has to solve an erasure problem. The m syndrome positions are enough to recover the values of c i f i , and thus also of f i .\n4) Computational Cost: Compared to the Ostrovsky-Skeith construction, the use of Reed-Solomon codes has an heavy impact on the server side computations. As all the lines of a Reed-Solomon parity check matrix are different, the server has to compute a modular exponentiation E(c i ) f \u2032 j,i for every coefﬁcient in the matrix, that is mt exponentiations instead of t as in the other algorithm.\nHowever, on the user side, the computational cost remains identical and will be dominated by the buffer decryption step. Reed-Solomon decoding costs O(m 2 ) multiplications in Z p t and Z p f , which can be upper bounded by O(m 2 (log N ) 2 ). Decryption costs O(m(log N ) 3 ), which will dominate as long as m is smaller than a few thousands.\n5) Asymptotic Cost: With this scheme, a buffer of size m is enough to recover m matching documents, which is optimal. However, part of each buffer position is reserved for the recovery of the c i and for zero-padding to avoid overﬂows. For\neach document, an overhead of 5 log t+3 log |Ω| bits has to be transmitted. The 3 log t+3 log |Ω| padding bits 2 are wasted bits that are due to the structure of the Paillier encryption scheme: using a different homomorphic encryption scheme could im- prove this. The remaining 2 log t bits are however necessary to get a deterministic zero-error algorithm: the user has to solve an error correction problem, meaning he will have to learn both the value and the position of the errors, leading to an overhead of O(log t) bits per document. Overall, for documents of S bits, this scheme requires 2m(S + O(log t)) bits using the original Paillier cryptosystem or m(S +1024+O(log t)) using the Damg˚ard-Jurik extension.\nB. An Asymptotically Optimal Construction Using Irregular LDPC Codes\nIn order to improve the asymptotic communication cost and remove any dependency on the database size t, it is necessary to use a randomized scheme (thus with a non-zero probability of failure): in that case, it is well known that (irregular) LDPC codes can offer much better performance than Reed- Solomon codes. However, the error correction problem also has to be transformed into an erasure correction problem. This is possible by combining the following ideas:\n\u2022 instead of using a ﬁx LDPC matrix, pseudo-randomly generate its columns from the documents f i ,\n\u2022 use a decoding algorithm similar to the erasure correc- tion algorithm proposed by Luby and Mitzenmacher for veriﬁcation codes [9].\n1) Query Construction: This step is the same as for the Ostrovsky-Skeith construction, but instead of m and γ, the user sends the desired buffer length ℓ to the server.\n2) Query Execution: The server ﬁrst initializes a buffer B of size ℓ to E(0) in every position. Then, for each document f i it proceeds as follows:\n\u2022 using a pseudo-random number generator seeded by f i , it generates a column weight d following a given distri- bution (the best choice for this distribution is discussed in Section III-B4) and generates a random binary vector H i of length ℓ and Hamming weight d,\n\u2022 for every non-zero position in H i , it multiplies the corresponding positions in buffer B by E(c i f i ).\nIn the end, B contains the encrypted syndrome of the (c i f i ) vector with respect to an irregular LDPC code (with a chosen column weight distribution), which the server sends to the user.\n3) Document Extraction: As in the original scheme, when receiving buffer B, the user starts by decrypting it and looks for singletons. The difference here is that, for every singleton, the user gets the value of one document f i and can regenerate (using the same PRNG as the server) the corresponding column H i . Knowing H i it is possible to remove document f i from the other syndrome positions where it has been added,\nthus uncovering new singletons, which in turn can reveal new documents f i . This gives an iterative algorithm which can be analyzed in the same way as in [6]: knowing the column and row weight distributions of the parity check matrix it is possible to analyze the asymptotic behavior of the algorithm and compute the probability of recovering all documents.\n4) Choosing an Optimal Column Weight Distribution: In order to analyze the decoding algorithm, the matrix H must be transformed into a bipartite graph. On the left of the graph are m information nodes and on the right are ℓ parity nodes. These nodes are connected by edges: each 1 in H is an edge in the graph, linking an information node to a parity node. For each edge in the graph, its left degree is the number of edges connected to its information node and its right degree the number of edges connected to its parity node. Then the decoding algorithm consists in repeating the following steps:\n\u2022 select all edges with right degree 1 (edges connected to singletons),\n\u2022 remove these edges from the graph as well as the asso- ciated left and right nodes,\n\u2022 remove all other edges that were connected to the left nodes (no other edges were connected to the right nodes).\nDecoding is successful if, at the end, all the edges have been removed.\nStudying the probability of success of this algorithm for given parameters m and ℓ is difﬁcult, however, as proven in [10], if the left and right degree distribution of edges remains constant and m and ℓ tend to inﬁnity, the asymptotic proportion of edges removed at each step can be computed quite easily. Let λ(x) =\nwhere λ i (resp. ρ i ) denote the probability that an edge of the graph has left (resp. right) degree i. Also, let b j denote the pro- portion of edges of the graph that are still present after step j of the algorithm. Then b 0 = 1 (all the edges are present before the algorithm starts) and b j+1 = λ(1 −ρ(1−b j )). Asymptotically, the decoding algorithm is successful if b j j →∞ −→ 0, which will be the case if:\na) Constant Column Weight: Danezis and D´ıaz [3] im- proved the original Ostrovsky-Skeith scheme by using a sim- ilar iterative decoding algorithm with constant column weight d. They do not provide any asymptotic analysis, but their construction is equivalent to choosing λ(x) = x d −1 and ρ(x) = exp\none can achieve with constant column weight d (and an asymptotic probability of recovering all documents of 1) are reported in Table I. The best choice is d = 3 leading to an expansion of\nat least 22% and an asymptotic communication amount of at least 1.22m(S + 1024) bits for m documents of S bits.\nb) Harmonic Distribution: The harmonic distribution of order D consists in a normalized truncated (at order D) Taylor series expansion of − ln(1 − x). It is given by:\nThese λ D (x) distributions will satisfy inequality (1) if the expansion factor ℓ m is greater than 1 + 1 D . Any expansion ratio ℓ m = 1 + ϵ can thus be chosen by the user, and using the harmonic distribution of order 1 ϵ will asymptotically allow to recover most documents.\nc) Enhanced Harmonic Distribution: A problem of the plain harmonic distribution is that it contains columns of weight 2 which have a high probability of producing collisions: two identical columns H i leading to a deadlock in the iterative decoding algorithm. To avoid this, the best solution is to combine the harmonic and constant weight distributions into what we call the enhanced harmonic distribution. Each column of length ℓ is split into a weight 3 column of length ℓ 3 and a harmonic column of length ℓ − ℓ 3 . Choosing ℓ 3 = O(\nis enough to ensure that (asymptotically) no collisions take place and the probability of recovering all documents tends to 1, while not modifying the expansion factor ℓ m . Fig. 2 shows how the 3 distributions compare for various values of ℓ.\nUsing the enhanced harmonic distribution, the asymptotic communication cost of PSS with m matching documents of S bits becomes 2mS using the standard Paillier cryptosystem or m(S + 1024) using the Damg˚ard-Jurik extension.\nUsing any of our two new schemes, it is possible to reduce the size of the reply from the server almost to the size of a non- private search result. However, the size of the query the user sends remains large compared to a non-private query. The size of a private query is linear in |Ω| whereas it is logarithmic for a non-private query. To improve this, we propose an ofﬂine- online scheme, where the linear query is sent ofﬂine and a logarithmic query is sent online.\nWe ﬁrst focus on queries containing a single keyword. In this case, any query can be obtained as a \u201ccyclic shift\u201d of any other query. Our ofﬂine-online scheme works as follows:\n\u2022 ofﬂine, the user generates a query Q j = {q 1 , . . . , q |Ω| } where q j = E(1) and q i = E(0) otherwise (with j picked uniformly at random), and sends it to the server,\n\u2022 ofﬂine, the server computes all possible cyclic shifts of Q j by i ∈ [0, [Ω| − 1] positions and executes the corresponding queries. It stores each result in a separate buffer B i .\n\u2022 online, the user wants to query the server for the j \u2032 -th keywords and sends j \u2032 − j mod |Ω| to the server,\n\u2022 online, the server sends B j \u2032 −j to the user and discards the other B i ,\nWith this scheme, the online work on the server side is a simple table lookup and the amount of online communication is very close to the non-private case: the query is only log |Ω| bits long, and with the PSS schemes we have presented B j \u2032 −j can also be small.\nThe ofﬂine amount of communication is still the same as for the standard scheme, but the amount of computation on the server side is multiplied by |Ω|. However, as this is ofﬂine work, it can easily be outsourced to distant server farm and does not have to be run on the \u201conline\u201d low-latency servers. Of course, if the amount of ofﬂine work is too high, it is also possible to treat the shifted query online as in the standard scheme: the amount of work the server has to do will then be the same as in the normal scheme, but most of the communication will be done ofﬂine.\nOne constraint with the previous scheme is that the ofﬂine query the user sends has to be completely random and, at the same time, it should be possible to modify it into any other query the user might later want to ask. For a single keyword, cyclic shifts work well whatever the dictionary size. However, for several keywords (say k), the user should be able to transform any random query Q j 1 ,...,j k into any chosen query Q j \u2032\n,...,j \u2032 k , by simply giving the index of a permutation. When k = 2, a solution is to transform each index j into\nAj + B mod |Ω|, where A ∈ [1, |Ω|−1] and B ∈ [0, |Ω|−1] are the \u201cpermutation index\u201d that the user will send to the server in the online phase. If |Ω| is prime, then any pair j 1 , j 2 can be transformed into any pairs j \u2032 1 , j \u2032 2 by choosing A = j 2 −j 1 j \u2032\nBuilding such families of permutations for larger values of k is not always simple, and the number of permutations in the family will always have to be at least\nthan in the standard online scheme. Values of k larger than 1 or 2 are therefore not very realistic, and for these values the solutions we presented work ﬁne.\nWe presented two new constructions for private stream search that allow a communication complexity very close to that of a non-private search. As in all known PSS schemes, the workload can be quite heavy on the server side but it remains very small on the user side. In that sense, these constructions could be practical for many applications where privacy matters. We also present an ofﬂine-online variant of our construction that can make these schemes practical even if a delay between the query and the reply cannot be accepted."},"refs":[{"authors":[{"name":"R. Ostrovsky"},{"name":"W. E. Skeith"}],"title":{"text":"Private searching on streaming data"}},{"authors":[{"name":"J. Bethencourt"},{"name":"D. X. Song"},{"name":"B. Waters"}],"title":{"text":"New techniques for private stream searching"}},{"authors":[{"name":"G. Danezis"},{"name":"C. D´ıaz"}],"title":{"text":"Space-efﬁcient private search with applica- tions to rateless codes"}},{"authors":[{"name":"I. S. Reed"},{"name":"G. Solomon"}],"title":{"text":"Polynomial codes over certain ﬁnite ﬁelds"}},{"authors":[{"name":"R. G. Gallager"}],"title":{"text":"Low-density parity-check codes"}},{"authors":[{"name":"M. G. Luby"},{"name":"M. Mitzenmacher"},{"name":"M. A. Shokrollahi"},{"name":"D. A. Spielman"}],"title":{"text":"Analysis of low density codes and improved designs using irregular graphs"}},{"authors":[{"name":"P. Paillier"}],"title":{"text":"Public-key cryptosystems based on composite degree resid- uosity classes"}},{"authors":[{"name":"I. Damg˚ard"},{"name":"M. Jurik"}],"title":{"text":"A generalisation, a simpliﬁcation and some applications of Paillier\u2019s probabilistic public-key system"}},{"authors":[{"name":"M. G. Luby"},{"name":"M. Mitzenmacher"},{"name":"M. G. Luby"},{"name":"M. Mitzenmacher"},{"name":"M. A. Shokrollahi"}],"title":{"text":"Veriﬁcation codes"}}]},"file":{"jsonClass":"File","file":"/home/arnfred/Code/trailhead/resources/isit2012/1569565279.pdf"},"links":[{"id":"1569566567","weight":2},{"id":"1569564843","weight":3},{"id":"1569566527","weight":3},{"id":"1569566485","weight":3},{"id":"1569565883","weight":5},{"id":"1569564889","weight":4},{"id":"1569565223","weight":2},{"id":"1569566725","weight":6},{"id":"1569565663","weight":2},{"id":"1569565377","weight":3},{"id":"1569566385","weight":3},{"id":"1569567049","weight":3},{"id":"1569564635","weight":2},{"id":"1569566799","weight":4},{"id":"1569565067","weight":6},{"id":"1569559665","weight":2},{"id":"1569561021","weight":8},{"id":"1569564669","weight":2},{"id":"1569565691","weight":6},{"id":"1569566875","weight":3},{"id":"1569564605","weight":4},{"id":"1569559617","weight":2},{"id":"1569566981","weight":5},{"id":"1569566321","weight":3},{"id":"1569566605","weight":3},{"id":"1569566683","weight":6},{"id":"1569566855","weight":3},{"id":"1569566869","weight":5},{"id":"1569565097","weight":6},{"id":"1569566091","weight":2},{"id":"1569559259","weight":6},{"id":"1569566697","weight":4},{"id":"1569566597","weight":2},{"id":"1569565551","weight":2},{"id":"1569565711","weight":2},{"id":"1569566761","weight":2},{"id":"1569566943","weight":3},{"id":"1569565091","weight":6},{"id":"1569566571","weight":3},{"id":"1569552245","weight":3},{"id":"1569565495","weight":7},{"id":"1569559967","weight":3},{"id":"1569567045","weight":3},{"id":"1569565227","weight":2},{"id":"1569564481","weight":3},{"id":"1569560833","weight":3},{"id":"1569566415","weight":4},{"id":"1569564805","weight":5},{"id":"1569567005","weight":6},{"id":"1569566081","weight":4},{"id":"1569565613","weight":8},{"id":"1569565355","weight":2},{"id":"1569564469","weight":2},{"id":"1569565931","weight":2},{"id":"1569566373","weight":2},{"id":"1569566647","weight":3},{"id":"1569551535","weight":4},{"id":"1569566765","weight":2},{"id":"1569564897","weight":3},{"id":"1569565775","weight":3},{"id":"1569566871","weight":5},{"id":"1569566653","weight":5},{"id":"1569565461","weight":5},{"id":"1569564731","weight":2},{"id":"1569565171","weight":3},{"id":"1569566207","weight":7},{"id":"1569558325","weight":2},{"id":"1569565837","weight":3},{"id":"1569566671","weight":2},{"id":"1569566303","weight":2},{"id":"1569566119","weight":3},{"id":"1569564233","weight":3},{"id":"1569566459","weight":2},{"id":"1569567535","weight":7},{"id":"1569563411","weight":3},{"id":"1569560427","weight":10},{"id":"1569564849","weight":4},{"id":"1569559541","weight":2},{"id":"1569565459","weight":7},{"id":"1569566319","weight":2},{"id":"1569566941","weight":7},{"id":"1569566033","weight":3},{"id":"1569566739","weight":3},{"id":"1569555811","weight":3},{"id":"1569558459","weight":3},{"id":"1569565609","weight":2},{"id":"1569565291","weight":2},{"id":"1569564203","weight":3},{"id":"1569566821","weight":3},{"id":"1569556713","weight":3},{"id":"1569562685","weight":2},{"id":"1569566467","weight":4},{"id":"1569566903","weight":5},{"id":"1569565859","weight":4},{"id":"1569565809","weight":3},{"id":"1569566843","weight":3},{"id":"1569566579","weight":2},{"id":"1569566563","weight":6},{"id":"1569566089","weight":2},{"id":"1569566173","weight":2},{"id":"1569559221","weight":3},{"id":"1569556091","weight":3},{"id":"1569565347","weight":3},{"id":"1569566925","weight":3},{"id":"1569564387","weight":4},{"id":"1569565455","weight":2},{"id":"1569566497","weight":6},{"id":"1569566795","weight":6},{"id":"1569566963","weight":4},{"id":"1569561679","weight":4},{"id":"1569566709","weight":2},{"id":"1569566787","weight":2},{"id":"1569566717","weight":2},{"id":"1569566015","weight":3},{"id":"1569565897","weight":4},{"id":"1569551763","weight":2},{"id":"1569565953","weight":2},{"id":"1569566895","weight":4},{"id":"1569566889","weight":2},{"id":"1569566749","weight":2},{"id":"1569566269","weight":7},{"id":"1569564189","weight":3},{"id":"1569564195","weight":2},{"id":"1569561513","weight":3},{"id":"1569566985","weight":2},{"id":"1569564613","weight":3},{"id":"1569565369","weight":38},{"id":"1569567009","weight":5},{"id":"1569566865","weight":2},{"id":"1569558785","weight":3},{"id":"1569566193","weight":8},{"id":"1569564337","weight":2},{"id":"1569565907","weight":2},{"id":"1569566343","weight":3},{"id":"1569564311","weight":2},{"id":"1569565803","weight":2},{"id":"1569565785","weight":2},{"id":"1569566239","weight":2},{"id":"1569566167","weight":3},{"id":"1569566679","weight":7},{"id":"1569565989","weight":7},{"id":"1569566575","weight":4},{"id":"1569561085","weight":2},{"id":"1569566617","weight":2},{"id":"1569559565","weight":3},{"id":"1569566905","weight":3},{"id":"1569566733","weight":2},{"id":"1569563307","weight":4},{"id":"1569566063","weight":2},{"id":"1569555999","weight":2},{"id":"1569566759","weight":5},{"id":"1569565589","weight":3},{"id":"1569559195","weight":2},{"id":"1569566149","weight":4},{"id":"1569566657","weight":6},{"id":"1569558859","weight":6},{"id":"1569565199","weight":3},{"id":"1569566643","weight":9},{"id":"1569566511","weight":3},{"id":"1569566719","weight":2},{"id":"1569566991","weight":3},{"id":"1569565841","weight":11},{"id":"1569566369","weight":3},{"id":"1569566531","weight":4},{"id":"1569567665","weight":3},{"id":"1569561143","weight":2},{"id":"1569566581","weight":2},{"id":"1569565833","weight":2},{"id":"1569566489","weight":2},{"id":"1569564611","weight":4},{"id":"1569565535","weight":2},{"id":"1569562867","weight":4},{"id":"1569566395","weight":2},{"id":"1569565667","weight":2},{"id":"1569561795","weight":2},{"id":"1569566325","weight":4},{"id":"1569566423","weight":2},{"id":"1569564795","weight":2},{"id":"1569567015","weight":4},{"id":"1569559805","weight":3},{"id":"1569566437","weight":2},{"id":"1569566811","weight":5},{"id":"1569558901","weight":2},{"id":"1569565735","weight":3},{"id":"1569559111","weight":3},{"id":"1569566687","weight":2},{"id":"1569553537","weight":3},{"id":"1569565427","weight":5},{"id":"1569566403","weight":2},{"id":"1569552251","weight":3},{"id":"1569566139","weight":4},{"id":"1569553519","weight":2},{"id":"1569566885","weight":2},{"id":"1569564441","weight":2},{"id":"1569566513","weight":4},{"id":"1569554971","weight":3},{"id":"1569565501","weight":2},{"id":"1569566899","weight":2},{"id":"1569566445","weight":2},{"id":"1569566209","weight":2},{"id":"1569566649","weight":4},{"id":"1569565559","weight":3},{"id":"1569566371","weight":4},{"id":"1569565655","weight":3},{"id":"1569566909","weight":5},{"id":"1569566127","weight":2},{"id":"1569565151","weight":2},{"id":"1569558985","weight":2},{"id":"1569563763","weight":7},{"id":"1569565087","weight":2},{"id":"1569566473","weight":4},{"id":"1569564857","weight":5},{"id":"1569564333","weight":4},{"id":"1569566913","weight":4},{"id":"1569566809","weight":3},{"id":"1569566629","weight":3},{"id":"1569566257","weight":2},{"id":"1569565033","weight":4},{"id":"1569566447","weight":2},{"id":"1569566357","weight":3},{"id":"1569565817","weight":7},{"id":"1569565847","weight":5},{"id":"1569564353","weight":3},{"id":"1569563897","weight":2},{"id":"1569557083","weight":3},{"id":"1569565929","weight":2},{"id":"1569566141","weight":3},{"id":"1569565633","weight":4},{"id":"1569566661","weight":33},{"id":"1569555879","weight":6},{"id":"1569565521","weight":2},{"id":"1569566115","weight":4},{"id":"1569565219","weight":8},{"id":"1569558509","weight":2},{"id":"1569554759","weight":2},{"id":"1569564851","weight":2},{"id":"1569565595","weight":2},{"id":"1569565185","weight":2},{"id":"1569566773","weight":5},{"id":"1569566037","weight":4},{"id":"1569564985","weight":2},{"id":"1569565095","weight":2},{"id":"1569566223","weight":3},{"id":"1569558401","weight":3},{"id":"1569566553","weight":3},{"id":"1569564973","weight":5},{"id":"1569564969","weight":2},{"id":"1569565029","weight":4},{"id":"1569561245","weight":4},{"id":"1569566505","weight":3},{"id":"1569565393","weight":3},{"id":"1569565933","weight":4},{"id":"1569562207","weight":3},{"id":"1569566191","weight":4},{"id":"1569567033","weight":4},{"id":"1569565527","weight":6},{"id":"1569566853","weight":5},{"id":"1569566603","weight":5},{"id":"1569565363","weight":3},{"id":"1569566159","weight":3},{"id":"1569566695","weight":4},{"id":"1569566051","weight":2},{"id":"1569561379","weight":3},{"id":"1569565909","weight":4},{"id":"1569561123","weight":4},{"id":"1569565441","weight":2},{"id":"1569565311","weight":2},{"id":"1569566667","weight":2},{"id":"1569566893","weight":3},{"id":"1569566317","weight":5},{"id":"1569564097","weight":4},{"id":"1569560997","weight":6},{"id":"1569566407","weight":3},{"id":"1569560349","weight":5},{"id":"1569566501","weight":4},{"id":"1569565741","weight":6},{"id":"1569566275","weight":8},{"id":"1569566481","weight":5},{"id":"1569565545","weight":3},{"id":"1569566857","weight":3},{"id":"1569565961","weight":4},{"id":"1569566245","weight":2},{"id":"1569560503","weight":2},{"id":"1569565463","weight":2},{"id":"1569564339","weight":2},{"id":"1569566219","weight":2},{"id":"1569565439","weight":3},{"id":"1569566229","weight":2},{"id":"1569562551","weight":3},{"id":"1569565415","weight":2},{"id":"1569561623","weight":2},{"id":"1569566383","weight":2},{"id":"1569564485","weight":2},{"id":"1569566631","weight":9},{"id":"1569565571","weight":2},{"id":"1569565885","weight":2},{"id":"1569566177","weight":3},{"id":"1569565493","weight":5},{"id":"1569557633","weight":3},{"id":"1569564411","weight":2},{"id":"1569566805","weight":4},{"id":"1569559199","weight":2},{"id":"1569566293","weight":5},{"id":"1569565665","weight":3},{"id":"1569566831","weight":2},{"id":"1569565523","weight":4},{"id":"1569565611","weight":2},{"id":"1569557715","weight":3},{"id":"1569564175","weight":2},{"id":"1569566983","weight":4},{"id":"1569566779","weight":2},{"id":"1569566097","weight":2},{"id":"1569566479","weight":4},{"id":"1569556361","weight":2},{"id":"1569566431","weight":2},{"id":"1569565397","weight":2},{"id":"1569566873","weight":4},{"id":"1569565765","weight":2},{"id":"1569565925","weight":4},{"id":"1569565435","weight":2},{"id":"1569565263","weight":4},{"id":"1569566261","weight":9},{"id":"1569565215","weight":2},{"id":"1569565093","weight":2},{"id":"1569565385","weight":3},{"id":"1569565575","weight":2},{"id":"1569565919","weight":3},{"id":"1569565181","weight":11},{"id":"1569566711","weight":5},{"id":"1569565241","weight":2},{"id":"1569566927","weight":9},{"id":"1569565661","weight":3},{"id":"1569565865","weight":2},{"id":"1569566887","weight":4},{"id":"1569565273","weight":2},{"id":"1569564131","weight":3},{"id":"1569552037","weight":2},{"id":"1569564919","weight":3},{"id":"1569565511","weight":2},{"id":"1569566737","weight":3},{"id":"1569566429","weight":16},{"id":"1569566917","weight":5},{"id":"1569566035","weight":2},{"id":"1569565353","weight":7},{"id":"1569564683","weight":3},{"id":"1569564305","weight":4},{"id":"1569564283","weight":4},{"id":"1569564291","weight":4},{"id":"1569566691","weight":2},{"id":"1569565421","weight":3},{"id":"1569566547","weight":3},{"id":"1569566651","weight":3},{"id":"1569565177","weight":2},{"id":"1569566823","weight":2},{"id":"1569566677","weight":4},{"id":"1569565349","weight":3},{"id":"1569552025","weight":2},{"id":"1569566137","weight":4},{"id":"1569566237","weight":2},{"id":"1569566283","weight":2},{"id":"1569565645","weight":2},{"id":"1569566529","weight":4},{"id":"1569565375","weight":2},{"id":"1569566715","weight":3},{"id":"1569565237","weight":2},{"id":"1569566639","weight":2},{"id":"1569566819","weight":2},{"id":"1569565041","weight":3},{"id":"1569564703","weight":3},{"id":"1569566713","weight":2},{"id":"1569565541","weight":5},{"id":"1569566813","weight":6},{"id":"1569566771","weight":10},{"id":"1569562277","weight":4},{"id":"1569566641","weight":2},{"id":"1569565425","weight":4},{"id":"1569564247","weight":2},{"id":"1569564437","weight":4},{"id":"1569566533","weight":2},{"id":"1569551905","weight":18},{"id":"1569564861","weight":5},{"id":"1569565457","weight":3},{"id":"1569564787","weight":2},{"id":"1569566487","weight":3},{"id":"1569565529","weight":4},{"id":"1569556759","weight":3},{"id":"1569566619","weight":3},{"id":"1569561185","weight":2},{"id":"1569566075","weight":2},{"id":"1569566397","weight":3},{"id":"1569558779","weight":2},{"id":"1569565233","weight":2},{"id":"1569565593","weight":2},{"id":"1569560235","weight":2},{"id":"1569566817","weight":2},{"id":"1569564157","weight":2},{"id":"1569566389","weight":3},{"id":"1569566435","weight":2},{"id":"1569567483","weight":2},{"id":"1569566911","weight":2},{"id":"1569564923","weight":5},{"id":"1569565367","weight":2},{"id":"1569566299","weight":3},{"id":"1569565039","weight":3},{"id":"1569565769","weight":4},{"id":"1569566171","weight":3},{"id":"1569566601","weight":3},{"id":"1569565805","weight":2},{"id":"1569561713","weight":2},{"id":"1569563919","weight":2},{"id":"1569566577","weight":2},{"id":"1569557851","weight":2},{"id":"1569567691","weight":2},{"id":"1569559919","weight":3},{"id":"1569565861","weight":4},{"id":"1569566147","weight":4},{"id":"1569565537","weight":2},{"id":"1569566057","weight":2},{"id":"1569560785","weight":3},{"id":"1569565561","weight":3},{"id":"1569565631","weight":2},{"id":"1569560213","weight":6},{"id":"1569555891","weight":3},{"id":"1569565997","weight":4},{"id":"1569563425","weight":2},{"id":"1569565035","weight":8},{"id":"1569559597","weight":2},{"id":"1569564961","weight":5},{"id":"1569559251","weight":3},{"id":"1569567013","weight":4},{"id":"1569561861","weight":2},{"id":"1569565337","weight":2},{"id":"1569565737","weight":5},{"id":"1569560459","weight":3},{"id":"1569565853","weight":4},{"id":"1569550425","weight":4},{"id":"1569566273","weight":2},{"id":"1569564123","weight":7},{"id":"1569566341","weight":3},{"id":"1569565889","weight":2},{"id":"1569566635","weight":2},{"id":"1569566611","weight":5},{"id":"1569551539","weight":4},{"id":"1569565565","weight":4},{"id":"1569565635","weight":2},{"id":"1569561397","weight":2},{"id":"1569565731","weight":3},{"id":"1569566797","weight":7},{"id":"1569566413","weight":3},{"id":"1569565707","weight":7},{"id":"1569565113","weight":3},{"id":"1569566375","weight":3},{"id":"1569565143","weight":3},{"id":"1569564257","weight":2},{"id":"1569565583","weight":3},{"id":"1569566555","weight":6},{"id":"1569564931","weight":3},{"id":"1569565373","weight":2},{"id":"1569564141","weight":2},{"id":"1569566973","weight":8},{"id":"1569561579","weight":2},{"id":"1569566449","weight":2},{"id":"1569566987","weight":4},{"id":"1569565031","weight":3},{"id":"1569564755","weight":2},{"id":"1569551541","weight":2},{"id":"1569566839","weight":4},{"id":"1569551751","weight":2},{"id":"1569565139","weight":4},{"id":"1569566663","weight":4},{"id":"1569565579","weight":3},{"id":"1569566067","weight":2},{"id":"1569566825","weight":4},{"id":"1569566241","weight":2},{"id":"1569564807","weight":2},{"id":"1569566609","weight":2},{"id":"1569563007","weight":2},{"id":"1569566113","weight":2},{"id":"1569566443","weight":2},{"id":"1569566727","weight":5},{"id":"1569565315","weight":5},{"id":"1569560581","weight":10}],"meta":{"jsonClass":"HashMap$HashTrieMap","sessionid":"S14.T6.3","endtime":"17:40","authors":"Matthieu Finiasz, Kannan Ramchandran","date":"1341508800000","papertitle":"Private Stream Search at the Same Communication Cost as a Regular Search: Role of LDPC Codes","starttime":"17:20","session":"S14.T6: Applications of Codes in Cryptography","room":"Kresge Rehearsal A (033)","paperid":"1569565279"},"cluster":{"jsonClass":"HashMap$HashTrieMap","spectral6":"3","spectral43":"2","spectral28":"8","spectral32":"28","spectral14":"13","spectral20":"14","spectral9":"8","spectral25":"4","spectral42":"4","spectral3":"1","spectral47":"7","spectral17":"2","louvain":"6","spectral36":"33","spectral39":"0","spectral10":"4","spectral15":"8","spectral33":"13","spectral5":"2","spectral21":"10","spectral44":"28","spectral26":"2","spectral40":"12","spectral8":"2","spectral11":"1","spectral4":"3","spectral37":"27","spectral48":"40","spectral22":"20","spectral23":"5","spectral12":"7","spectral50":"0","spectral19":"13","spectral34":"28","spectral45":"4","spectral7":"6","spectral49":"15","spectral38":"22","spectral24":"21","spectral13":"1","spectral31":"14","spectral29":"17","spectral35":"3","spectral30":"13","spectral41":"13","spectral27":"18","spectral18":"5","spectral46":"10","spectral2":"0","spectral16":"1"}}
